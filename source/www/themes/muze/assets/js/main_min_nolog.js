/******/ (function(modules) { // webpackBootstrap
    /******/ 	// The module cache
    /******/ 	var installedModules = {};
    /******/
    /******/ 	// The require function
    /******/ 	function __webpack_require__(moduleId) {
        /******/
        /******/ 		// Check if module is in cache
        /******/ 		if(installedModules[moduleId]) {
            /******/ 			return installedModules[moduleId].exports;
            /******/ 		}
        /******/ 		// Create a new module (and put it into the cache)
        /******/ 		var module = installedModules[moduleId] = {
            /******/ 			i: moduleId,
            /******/ 			l: false,
            /******/ 			exports: {}
            /******/ 		};
        /******/
        /******/ 		// Execute the module function
        /******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/
        /******/ 		// Flag the module as loaded
        /******/ 		module.l = true;
        /******/
        /******/ 		// Return the exports of the module
        /******/ 		return module.exports;
        /******/ 	}
    /******/
    /******/
    /******/ 	// expose the modules object (__webpack_modules__)
    /******/ 	__webpack_require__.m = modules;
    /******/
    /******/ 	// expose the module cache
    /******/ 	__webpack_require__.c = installedModules;
    /******/
    /******/ 	// define getter function for harmony exports
    /******/ 	__webpack_require__.d = function(exports, name, getter) {
        /******/ 		if(!__webpack_require__.o(exports, name)) {
            /******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
            /******/ 		}
        /******/ 	};
    /******/
    /******/ 	// define __esModule on exports
    /******/ 	__webpack_require__.r = function(exports) {
        /******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
            /******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
            /******/ 		}
        /******/ 		Object.defineProperty(exports, '__esModule', { value: true });
        /******/ 	};
    /******/
    /******/ 	// create a fake namespace object
    /******/ 	// mode & 1: value is a module id, require it
    /******/ 	// mode & 2: merge all properties of value into the ns
    /******/ 	// mode & 4: return value when already ns object
    /******/ 	// mode & 8|1: behave like require
    /******/ 	__webpack_require__.t = function(value, mode) {
        /******/ 		if(mode & 1) value = __webpack_require__(value);
        /******/ 		if(mode & 8) return value;
        /******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
        /******/ 		var ns = Object.create(null);
        /******/ 		__webpack_require__.r(ns);
        /******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
        /******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
        /******/ 		return ns;
        /******/ 	};
    /******/
    /******/ 	// getDefaultExport function for compatibility with non-harmony modules
    /******/ 	__webpack_require__.n = function(module) {
        /******/ 		var getter = module && module.__esModule ?
            /******/ 			function getDefault() { return module['default']; } :
            /******/ 			function getModuleExports() { return module; };
        /******/ 		__webpack_require__.d(getter, 'a', getter);
        /******/ 		return getter;
        /******/ 	};
    /******/
    /******/ 	// Object.prototype.hasOwnProperty.call
    /******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
    /******/
    /******/ 	// __webpack_public_path__
    /******/ 	__webpack_require__.p = "";
    /******/
    /******/
    /******/ 	// Load entry module and return exports
    /******/ 	return __webpack_require__(__webpack_require__.s = 123);
    /******/ })
    /************************************************************************/
    /******/ ([
        /* 0 */
        /***/ (function(module, exports) {

            function _defineProperty(obj, key, value) {
                if (key in obj) {
                    Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                } else {
                    obj[key] = value;
                }

                return obj;
            }

            module.exports = _defineProperty;
            module.exports["default"] = module.exports, module.exports.__esModule = true;

            /***/ }),
        /* 1 */
        /***/ (function(module, exports) {

            function _typeof(obj) {
                "@babel/helpers - typeof";

                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                    module.exports = _typeof = function _typeof(obj) {
                        return typeof obj;
                    };

                    module.exports["default"] = module.exports, module.exports.__esModule = true;
                } else {
                    module.exports = _typeof = function _typeof(obj) {
                        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                    };

                    module.exports["default"] = module.exports, module.exports.__esModule = true;
                }

                return _typeof(obj);
            }

            module.exports = _typeof;
            module.exports["default"] = module.exports, module.exports.__esModule = true;

            /***/ }),
        /* 2 */
        /***/ (function(module, exports, __webpack_require__) {

            var arrayWithHoles = __webpack_require__(86);

            var iterableToArrayLimit = __webpack_require__(87);

            var unsupportedIterableToArray = __webpack_require__(88);

            var nonIterableRest = __webpack_require__(90);

            function _slicedToArray(arr, i) {
                return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
            }

            module.exports = _slicedToArray;
            module.exports["default"] = module.exports, module.exports.__esModule = true;

            /***/ }),
        /* 3 */
        /***/ (function(module, exports) {

            function _classCallCheck(instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            }

            module.exports = _classCallCheck;
            module.exports["default"] = module.exports, module.exports.__esModule = true;

            /***/ }),
        /* 4 */
        /***/ (function(module, exports) {

            function _defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }

            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) _defineProperties(Constructor.prototype, protoProps);
                if (staticProps) _defineProperties(Constructor, staticProps);
                return Constructor;
            }

            module.exports = _createClass;
            module.exports["default"] = module.exports, module.exports.__esModule = true;

            /***/ }),
        /* 5 */
        /***/ (function(module) {

            module.exports = JSON.parse("{\"JS_VERSION\":\"1.0.6\",\"TARGET_KEYS\":{\"BIDDER\":\"hb_bidder\",\"AD_ID\":\"hb_adid\",\"PRICE_BUCKET\":\"pw_pb\",\"PRICE_AMZ_VIDEO\":\"uam_hb\",\"SIZE\":\"hb_size\",\"DEAL\":\"hb_deal\",\"SOURCE\":\"hb_source\",\"FORMAT\":\"hb_format\",\"UUID\":\"hb_uuid\",\"CACHE_ID\":\"hb_cache_id\",\"CACHE_HOST\":\"hb_cache_host\",\"ADOMAIN\":\"hb_adomain\",\"SPECIAL_BID\":\"special_bid\",\"AD_WIDTH\":\"hb_width\",\"AD_HEIGHT\":\"hb_height\",\"AD_SLOT\":\"target_adslot\",\"AD_TYPE\":\"target_adtype\",\"ACCOUNT\":\"target_acc\",\"REAL_CPM\":\"real_cpm\",\"IS_EMPTY_ADS\":\"is_empty_ads\",\"PW_NETWORK\":\"pw_network\",\"PW_LINE_ID\":\"pw_line_id\",\"TARGET_ADSLOT\":\"target_adslot\",\"PW_SLOT\":\"pw_slot\"},\"DFP_HOST\":\"securepubads.g.doubleclick.net\",\"MAX_TARGET_CPM_BANNER\":22.5,\"MAX_TARGET_CPM_VIDEO\":110}");

            /***/ }),
        /* 6 */
        /***/ (function(module, exports, __webpack_require__) {

            /* WEBPACK VAR INJECTION */(function(global) {var check = function (it) {
                return it && it.Math == Math && it;
            };

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
                module.exports =
                    // eslint-disable-next-line es/no-global-this -- safe
                    check(typeof globalThis == 'object' && globalThis) ||
                    check(typeof window == 'object' && window) ||
                    // eslint-disable-next-line no-restricted-globals -- safe
                    check(typeof self == 'object' && self) ||
                    check(typeof global == 'object' && global) ||
                    // eslint-disable-next-line no-new-func -- fallback
                    (function () { return this; })() || Function('return this')();

                /* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(94)))

            /***/ }),
        /* 7 */
        /***/ (function(module, exports) {

            module.exports = function() {
                var list = [];
                list.toString = function toString() {
                    var result = [];
                    for(var i = 0; i < this.length; i++) {
                        var item = this[i];
                        if(item[2]) {
                            result.push("@media " + item[2] + "{" + item[1] + "}");
                        } else {
                            result.push(item[1]);
                        }
                    }
                    return result.join("");
                };
                return list;
            }

            /***/ }),
        /* 8 */
        /***/ (function(module, exports) {

            module.exports = function (exec) {
                try {
                    return !!exec();
                } catch (error) {
                    return true;
                }
            };


            /***/ }),
        /* 9 */
        /***/ (function(module, exports, __webpack_require__) {

            var fails = __webpack_require__(8);

// Detect IE8's incomplete defineProperty implementation
            module.exports = !fails(function () {
                // eslint-disable-next-line es/no-object-defineproperty -- required for testing
                return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
            });


            /***/ }),
        /* 10 */
        /***/ (function(module, exports) {

            module.exports = function (it) {
                return typeof it === 'object' ? it !== null : typeof it === 'function';
            };


            /***/ }),
        /* 11 */
        /***/ (function(module, exports) {

// Module
            var code = "<svg {{{class}}} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"> <path d=\"M9 21H3V3h6v18zm12 0h-6V3h6v18z\" fill-rule=\"evenodd\"></path> </svg> ";
// Exports
            module.exports = code;

            /***/ }),
        /* 12 */
        /***/ (function(module, exports) {

// Module
            var code = "<svg {{{class}}} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"> <path d=\"M5 4v16l16-8z\" fill-rule=\"evenodd\"></path> </svg> ";
// Exports
            module.exports = code;

            /***/ }),
        /* 13 */
        /***/ (function(module, exports) {

// Module
            var code = "<power class=\"{{{classProgressBar}}} pw-cursor-pointer\" data-index=\"{{{index}}}\"> <power class=\"{{{classPowerProgress}}}\"> <power class=\"{{{classProgressMini}}}\"></power> </power> </power>";
// Exports
            module.exports = code;

            /***/ }),
        /* 14 */
        /***/ (function(module, exports) {

// Module
            var code = "<svg style=\"transform:scale(.5)\" enable-background=\"new 0 0 92.132 92.132\" viewBox=\"0 0 92.132 92.132\"> <path class=\"active-path\" d=\"m2.141 89.13c1.425 1.429 3.299 2.142 5.167 2.142 1.869 0 3.742-0.713 5.167-2.142l33.591-33.592 33.591 33.592c1.426 1.429 3.299 2.142 5.167 2.142 1.867 0 3.74-0.713 5.167-2.142 2.854-2.854 2.854-7.48 0-10.334l-33.593-33.591 31.869-31.869c2.855-2.853 2.855-7.481 0-10.334-2.853-2.855-7.479-2.855-10.334 0l-31.868 31.868-31.867-31.869c-2.854-2.855-7.481-2.855-10.333 0-2.855 2.853-2.855 7.481 0 10.334l31.868 31.869-33.59 33.591c-2.857 2.853-2.857 7.479-2e-3 10.335z\" fill=\"#fff\" data-old_color=\"#ffffff\" data-original=\"#000000\"></path> </svg> ";
// Exports
            module.exports = code;

            /***/ }),
        /* 15 */
        /***/ (function(module, exports) {

// Module
            var code = "<a href=\"{{{link}}}\" target=\"_blank\" rel=\"noopener noreferrer\"> <img src=\"{{{image}}}\"> <div style=\"display:flex;align-items:center\"> <span class=\"descContent\">{{{title}}}</span> </div> </a>";
// Exports
            module.exports = code;

            /***/ }),
        /* 16 */
        /***/ (function(module, exports) {

            var toString = {}.toString;

            module.exports = function (it) {
                return toString.call(it).slice(8, -1);
            };


            /***/ }),
        /* 17 */
        /***/ (function(module, exports, __webpack_require__) {

            var toObject = __webpack_require__(30);

            var hasOwnProperty = {}.hasOwnProperty;

            module.exports = function hasOwn(it, key) {
                return hasOwnProperty.call(toObject(it), key);
            };


            /***/ }),
        /* 18 */
        /***/ (function(module, exports) {

// Module
            var code = "<div id=\"powerVideoPlaceholder\" {{{videoPlaceholderCSS}}}> {{{topVideoConatiner}}} <div id=\"powerVideoMainPlaceholder\" class=\"power-video-placeholder power-video-container\"></div> </div>";
// Exports
            module.exports = code;

            /***/ }),
        /* 19 */
        /***/ (function(module, exports) {

// Module
            var code = "<div id=\"powerVideoPlaceholder\" {{{videoPlaceholderCSS}}}> {{{topVideoConatiner}}} <div id=\"powerVideoMainPlaceholder\" class=\"power-video-placeholder power-video-container\"></div> {{{contentPlayerSkin}}} </div>";
// Exports
            module.exports = code;

            /***/ }),
        /* 20 */
        /***/ (function(module, exports) {

// Module
            var code = "<div id=\"powerVideoPlaceholder\" {{{videoPlaceholderCSS}}}> {{{topVideoConatiner}}} <table cellspacing=\"0\" cellpadding=\"0\" style=\"border-collapse:collapse;width:100%\"> <tr> <td style=\"vertical-align:top;width:100%\"> <div id=\"powerVideoMainPlaceholder\" class=\"power-video-placeholder power-video-container\"></div> </td> <td id=\"playerskin67\" style=\"vertical-align:top\"> <div id=\"{{{coverRelatedContent}}}\" class=\"cover-related\"></div> <div id=\"powerVideoList\" class=\"playerskin6\" style=\"overflow-y:scroll\"> {{{contentPlayerSkin}}} </div> </td> </tr> </table> </div>";
// Exports
            module.exports = code;

            /***/ }),
        /* 21 */
        /***/ (function(module, exports) {

// Module
            var code = "<div id=\"powerTopVideoContainer\" class=\"top-container {{{topVideoContainerConfig}}}\"> <div id=\"powerFeatureVideos\" class=\"feature-videos\">{{{mainTitle}}}</div> <div class=\"poweredby-wapper {{{poweredByApacdex}}}\"> <div class=\"poweredby-txt\">Powered By</div> {{{brandIdentity}}} </div> </div>";
// Exports
            module.exports = code;

            /***/ }),
        /* 22 */
        /***/ (function(module, exports) {

// Module
            var code = "<power id=\"{{{powerVideoContainer}}}\" class=\"power-video-container\"> <power id=\"{{{powerVideoWrapper}}}\"> <power id=\"{{{floatingCloseBtn}}}\" class=\"power-floating-close\" style=\"position:absolute;width:20px;height:20px;background-color:rgba(0,0,0,.65);border-radius:50%;display:none!important;line-height:18px\"> <svg style=\"transform:scale(.5)\" enable-background=\"new 0 0 92.132 92.132\" viewBox=\"0 0 92.132 92.132\"> <path class=\"active-path\" d=\"m2.141 89.13c1.425 1.429 3.299 2.142 5.167 2.142 1.869 0 3.742-0.713 5.167-2.142l33.591-33.592 33.591 33.592c1.426 1.429 3.299 2.142 5.167 2.142 1.867 0 3.74-0.713 5.167-2.142 2.854-2.854 2.854-7.48 0-10.334l-33.593-33.591 31.869-31.869c2.855-2.853 2.855-7.481 0-10.334-2.853-2.855-7.479-2.855-10.334 0l-31.868 31.868-31.867-31.869c-2.854-2.855-7.481-2.855-10.333 0-2.855 2.853-2.855 7.481 0 10.334l31.868 31.869-33.59 33.591c-2.857 2.853-2.857 7.479-2e-3 10.335z\" fill=\"#fff\" data-old_color=\"#ffffff\" data-original=\"#000000\"> </path> </svg> </power> <a id=\"{{{iconController}}}\" class=\"img-logo\" href=\"{{{logoClickThrough}}}\"> <img id=\"publisherLogo\" style=\"max-width:86px;max-height:24px;transform:scale(1.2)\" class=\"{{{logoOn}}}\" src=\"{{{logoCustomLink}}}\"> </a> <power style=\"width:100%;height:100%\"> <power class=\"video-cover\" style=\"position:absolute;top:0;left:0;background-color:#000\"></power> <video id=\"{{{powerVideo}}}\" class=\"power-video-iframe\" preload=\"metadata\" autoplay muted playsinline> </video> <power id=\"{{{vPlayerLoading}}}\" class=\"vPlayerLoading\"> <svg class=\"circle\" width=\"70\" height=\"70\"> <circle cx=\"35\" cy=\"35\" r=\"32\"></circle> </svg> <svg class=\"circle active\" width=\"70\" height=\"70\"> <circle cx=\"35\" cy=\"35\" r=\"32\"></circle> </svg> </power> <power id=\"{{{powerAdsPlaceholder}}}\" class=\"ads-wapper\"> </power> </power> <power id=\"{{{autoSkipWrapper}}}\" class=\"auto-skip-wrapper\"> <power id=\"{{{autoSkipNext}}}\" class=\"auto-skip-content-wrapper\" style=\"top:0\"> <power class=\"auto-skip-fill-full\"></power> <power class=\"auto-skip-txt\">Next</power> </power> <power id=\"{{{autoSkipStay}}}\" class=\"auto-skip-content-wrapper\" style=\"bottom:0\"> <power class=\"auto-skip-txt\">Stay</power> </power> </power> <power id=\"{{{powerVideoControls}}}\" class=\"powerVideoControls video-controller power-show ads-logo-active\"> <power id=\"{{{powerVideoCover}}}\" class=\"video-cover\"></power> <power class=\"top-left-video {{{titleOn}}}\"> <power class=\"title-video-wapper\"> <power id=\"{{{titleVideo}}}\" class=\"title-video\">21 Brilliant October Baby Names</power> </power> </power> <power id=\"{{{iconController}}}\" class=\"{{{likeViewConfig}}}\"> <power class=\"view-info-icon {{{viewsLikesOn}}}\"> <svg width=\"100%\" height=\"100%\" style=\"width:100%;height:100%\" viewBox=\"0 0 511.999 511.999\"> <path fill=\"#fff\" d=\"M508.745 246.041c-4.574-6.257-113.557-153.206-252.748-153.206S7.818 239.784 3.249 246.035a16.896 16.896 0 0 0 0 19.923c4.569 6.257 113.557 153.206 252.748 153.206s248.174-146.95 252.748-153.201a16.875 16.875 0 0 0 0-19.922zM255.997 385.406c-102.529 0-191.33-97.533-217.617-129.418 26.253-31.913 114.868-129.395 217.617-129.395 102.524 0 191.319 97.516 217.617 129.418-26.253 31.912-114.868 129.395-217.617 129.395z\"> </path> <path fill=\"#fff\" d=\"M255.997 154.725c-55.842 0-101.275 45.433-101.275 101.275s45.433 101.275 101.275 101.275S357.272 311.842 357.272 256s-45.433-101.275-101.275-101.275zm0 168.791c-37.23 0-67.516-30.287-67.516-67.516s30.287-67.516 67.516-67.516 67.516 30.287 67.516 67.516-30.286 67.516-67.516 67.516z\"> </path> </svg> </power> <power id=\"{{{viewInfoNum}}}\" class=\"view-info-num {{{viewsLikesOn}}}\">311.8K</power> <power class=\"view-like-icon {{{viewsLikesOn}}}\"> <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 850 768\" style=\"pointer-events:none;width:100%;height:100%\"> <path fill=\"#fff\" d=\"M775.9,522.1c15.7-20.1,23.3-41.6,22.3-63.8c-1-24.4-11.9-43.5-20.9-55.2c10.4-26,14.5-67-20.4-98.8c-25.5-23.3-68.9-33.7-129-30.8c-42.2,1.9-77.6,9.8-79,10.1h-0.2c-8,1.4-16.5,3.2-25.2,5.1c-0.6-10.3,1.1-35.8,20.1-93.3c22.5-68.4,21.2-120.8-4.2-155.8C512.8,2.9,470.2,0,457.7,0c-12,0-23.1,5-31,14.1c-17.8,20.7-15.7,58.9-13.5,76.6c-21.2,56.9-80.6,196.3-130.9,235c-1,0.6-1.8,1.4-2.6,2.2c-14.8,15.6-24.7,32.4-31.5,47.2c-9.5-5.1-20.2-8-31.8-8h-98c-36.9,0-66.8,30-66.8,66.8v261c0,36.9,30,66.8,66.8,66.8h98c14.3,0,27.6-4.5,38.5-12.2l37.7,4.5c5.8,0.8,108.6,13.8,214.1,11.7c19.1,1.4,37.1,2.2,53.8,2.2c28.7,0,53.8-2.2,74.7-6.7c49.1-10.4,82.7-31.3,99.7-62c13-23.4,13-46.7,10.9-61.5c32-28.9,37.6-60.9,36.5-83.4C781.8,541.4,778.9,530.3,775.9,522.1L775.9,522.1z M118.5,718.4c-13,0-23.4-10.6-23.4-23.4V433.8c0-13,10.6-23.4,23.4-23.4h98c13,0,23.4,10.6,23.4,23.4v261c0,13-10.6,23.4-23.4,23.4h-98V718.4L118.5,718.4z M734.8,503.3c-6.7,7.1-8,17.8-2.9,26.2c0,0.2,6.6,11.4,7.4,26.8c1.1,21-9,39.7-30.2,55.6c-7.5,5.8-10.6,15.7-7.4,24.7c0,0.2,6.9,21.4-4.3,41.4c-10.8,19.3-34.7,33.1-71,40.8c-29.1,6.3-68.6,7.4-117.1,3.5H507c-103.3,2.2-207.7-11.2-208.8-11.4h-0.2l-16.2-1.9c1-4.5,1.4-9.3,1.4-14.1V433.8c0-6.9-1.1-13.7-3.1-19.9c2.9-10.8,10.9-34.7,29.9-55.1c72.1-57.2,142.6-250.1,145.7-258.4c1.3-3.4,1.6-7.1,1-10.8c-2.7-18-1.8-40,2.1-46.6c8.5,0.2,31.5,2.6,45.3,21.7c16.4,22.6,15.7,63.1-1.9,116.8c-27,81.7-29.2,124.8-7.9,143.7c10.6,9.5,24.7,10,35,6.3c9.8-2.2,19.1-4.2,27.9-5.6c0.6-0.2,1.4-0.3,2.1-0.5C608.7,314.6,697,308,727.7,336c26,23.8,7.5,55.2,5.5,58.6c-5.9,9-4.2,20.7,3.9,27.9c0.2,0.2,17,16.1,17.8,37.4C755.5,474.3,748.7,488.9,734.8,503.3L734.8,503.3z\"> </path> <path fill=\"#000\" fill-opacity=\"0\" d=\"M118.5,718.4c-13,0-23.4-10.6-23.4-23.4V433.8c0-13,10.6-23.4,23.4-23.4h98c13,0,23.4,10.6,23.4,23.4v261c0,13-10.6,23.4-23.4,23.4h-98V718.4L118.5,718.4z M734.8,503.3c-6.7,7.1-8,17.8-2.9,26.2c0,0.2,6.6,11.4,7.4,26.8c1.1,21-9,39.7-30.2,55.6c-7.5,5.8-10.6,15.7-7.4,24.7c0,0.2,6.9,21.4-4.3,41.4c-10.8,19.3-34.7,33.1-71,40.8c-29.1,6.3-68.6,7.4-117.1,3.5H507c-103.3,2.2-207.7-11.2-208.8-11.4h-0.2l-16.2-1.9c1-4.5,1.4-9.3,1.4-14.1V433.8c0-6.9-1.1-13.7-3.1-19.9c2.9-10.8,10.9-34.7,29.9-55.1c72.1-57.2,142.6-250.1,145.7-258.4c1.3-3.4,1.6-7.1,1-10.8c-2.7-18-1.8-40,2.1-46.6c8.5,0.2,31.5,2.6,45.3,21.7c16.4,22.6,15.7,63.1-1.9,116.8c-27,81.7-29.2,124.8-7.9,143.7c10.6,9.5,24.7,10,35,6.3c9.8-2.2,19.1-4.2,27.9-5.6c0.6-0.2,1.4-0.3,2.1-0.5C608.7,314.6,697,308,727.7,336c26,23.8,7.5,55.2,5.5,58.6c-5.9,9-4.2,20.7,3.9,27.9c0.2,0.2,17,16.1,17.8,37.4C755.5,474.3,748.7,488.9,734.8,503.3L734.8,503.3z\"> </path> </svg> </power> <power id=\"{{{viewInfoNum}}}\" class=\"view-like-num {{{viewsLikesOn}}}\">42</power> </power> <power id=\"{{{iconController}}}\" class=\"top-right-video\"> <power class=\"logo-wrapper\"> <power id=\"{{{adsLogoBrand}}}\" class=\"ads-logo\"> {{{logobrandIdentity}}} </power> </power> <power class=\"share-wapper {{{shareOn}}}\"> <power class=\"share-wapper-bg\"></power> <power class=\"share-group share-share\"> <power style=\"cursor:pointer;padding:0\"> <svg width=\"100%\" height=\"100%\" class=\"power-svg\" viewBox=\"0 0 481.6 481.6\"> <path fill=\"#fff\" d=\"M381.6 309.4c-27.7 0-52.4 13.2-68.2 33.6l-132.3-73.9c3.1-8.9 4.8-18.5 4.8-28.4 0-10-1.7-19.5-4.9-28.5l132.2-73.8c15.7 20.5 40.5 33.8 68.3 33.8 47.4 0 86.1-38.6 86.1-86.1S429 0 381.5 0s-86.1 38.6-86.1 86.1c0 10 1.7 19.6 4.9 28.5l-132.1 73.8c-15.7-20.6-40.5-33.8-68.3-33.8-47.4 0-86.1 38.6-86.1 86.1s38.7 86.1 86.2 86.1c27.8 0 52.6-13.3 68.4-33.9l132.2 73.9c-3.2 9-5 18.7-5 28.7 0 47.4 38.6 86.1 86.1 86.1s86.1-38.6 86.1-86.1-38.7-86.1-86.2-86.1zm0-282.3c32.6 0 59.1 26.5 59.1 59.1s-26.5 59.1-59.1 59.1-59.1-26.5-59.1-59.1 26.6-59.1 59.1-59.1zM100 299.8c-32.6 0-59.1-26.5-59.1-59.1s26.5-59.1 59.1-59.1 59.1 26.5 59.1 59.1-26.6 59.1-59.1 59.1zm281.6 154.7c-32.6 0-59.1-26.5-59.1-59.1s26.5-59.1 59.1-59.1 59.1 26.5 59.1 59.1-26.5 59.1-59.1 59.1z\"> </path> </svg> </power> </power> <power id=\"powerShareBtnAnim\" class=\"share-group share-fb\"> <power id=\"{{{fbBtn}}}\" style=\"cursor:pointer;padding:0\"> <svg width=\"100%\" height=\"100%\" class=\"power-svg\" viewBox=\"-110 1 511 511.99996\"> <path fill=\"#fff\" d=\"M180 512H98.008c-13.695 0-24.836-11.14-24.836-24.836V302.227H25.336C11.64 302.227.5 291.082.5 277.39v-79.246c0-13.696 11.14-24.836 24.836-24.836h47.836v-39.684c0-39.348 12.355-72.824 35.726-96.805C132.375 12.73 165.184 0 203.778 0l62.53.102c13.672.023 24.794 11.164 24.794 24.835v73.579c0 13.695-11.137 24.836-24.829 24.836l-42.101.015c-12.84 0-16.11 2.574-16.809 3.363-1.152 1.31-2.523 5.008-2.523 15.223v31.352h58.27c4.386 0 8.636 1.082 12.288 3.12 7.88 4.403 12.778 12.727 12.778 21.723l-.031 79.247c0 13.687-11.141 24.828-24.836 24.828h-58.47v184.941C204.84 500.86 193.696 512 180 512zm-76.813-30.016h71.633V288.79c0-9.144 7.442-16.582 16.582-16.582h66.727l.027-68.883h-66.758c-9.14 0-16.578-7.437-16.578-16.582v-44.789c0-11.726 1.192-25.062 10.043-35.086 10.696-12.117 27.551-13.515 39.301-13.515l36.922-.016V30.109l-57.332-.093c-62.024 0-100.566 39.703-100.566 103.609v53.117c0 9.14-7.438 16.582-16.579 16.582H30.516v68.883h56.093c9.141 0 16.579 7.438 16.579 16.582zM266.25 30.117h.004zm0 0\"> </path> </svg> </power> </power> <power id=\"powerShareBtnAnim\" class=\"share-group share-twitter\"> <power id=\"{{{twitterBtn}}}\" style=\"cursor:pointer;padding:0\"> <svg width=\"100%\" height=\"100%\" class=\"power-svg\" viewBox=\"0 0 511.999 511.999\"> <path fill=\"#fff\" d=\"M509.738 109.538a15.263 15.263 0 0 0-14.332-7.215l-25.53 2.224 24.403-49.193a15.268 15.268 0 1 0-20.393-20.498l-64.587 31.631c-39.903-21.066-89.756-14.813-124.06 16.436-28.63 26.08-43.679 66.187-40.873 106.183-74.829-7.5-138.169-50.331-175.623-119.537a15.269 15.269 0 0 0-25.7-1.817c-23.23 31.382-24.86 74.41-6.649 109.809-5.02-1.268-10.362-2.984-16.286-4.963A15.266 15.266 0 0 0 .205 189.564c7.206 43.688 32.682 77.264 72.926 97.138a128.229 128.229 0 0 1-16.024 4.44 15.267 15.267 0 0 0-8.034 25.378c28.981 30.978 70.845 46.225 100.581 53.539-33.81 26.477-70.307 30.908-123.341 29.087-6.139-.186-11.795 3.272-14.376 8.837a15.27 15.27 0 0 0 2.544 16.681c22.108 24.369 102.654 51.847 187.326 53.907 3.349.081 6.765.125 10.253.125 59.451-.001 138.022-12.745 194.419-69.142 42.687-42.686 69.387-91.827 79.356-146.053 8.052-43.797 2.963-78.869.518-95.725-.18-1.239-.372-2.554-.528-3.704l23.881-38.49a15.267 15.267 0 0 0 .032-16.044zm-53.606 62.622c4.531 31.224 18.316 126.24-71.245 215.801-52.06 52.059-127.888 61.407-182.338 60.084-46.461-1.13-88.019-10.016-118.139-20.15 12.229-1.5 23.127-3.814 33.414-7.011 28.359-8.815 52.317-24.676 75.395-49.915a15.268 15.268 0 0 0-9.327-25.447c-14.559-1.866-58.305-9.23-92.753-32.992 9.927-4.06 19.501-9.141 28.643-15.205a15.27 15.27 0 0 0-4.569-27.494c-28.195-7.392-62.223-23.932-77.914-60.855 10.02 1.756 20.915 2.181 32.535-.424a15.268 15.268 0 0 0 7.645-25.504c-19.524-20.222-26.825-49.364-20.561-74.301 20.514 29.981 46.503 55.213 76.279 73.868 38.091 23.865 82.549 37.054 128.57 38.137a15.32 15.32 0 0 0 12.157-5.573 15.27 15.27 0 0 0 3.107-13.007c-7.918-35.595 3.375-73.541 28.771-96.674 26.34-23.995 65.269-27.635 94.666-8.846a15.27 15.27 0 0 0 14.938.846l31.541-15.448-16.509 33.281a15.265 15.265 0 0 0 1.065 15.388 15.252 15.252 0 0 0 13.938 6.607l22.242-1.937-10.246 16.515c-3.439 5.543-2.726 10.461-1.305 20.256z\"> </path> </svg> </power> </power> <power id=\"powerShareBtnAnim\" class=\"share-group share-linkedin\"> <power id=\"{{{linkedinBtn}}}\" style=\"cursor:pointer;padding:0\"> <svg width=\"100%\" height=\"100%\" class=\"power-svg\" viewBox=\"0 0 510 510\"> <path fill=\"#fff\" stroke=\"none\" d=\" M 29.4 170.55 Q 25.0033203125 174.9400390625 25 181.15 L 25 478.95 Q 25.0033203125 485.1599609375 29.4 489.55 33.7900390625 493.9466796875 40 493.95 L 132.7 493.95 Q 138.9099609375 493.9466796875 143.3 489.55 147.6966796875 485.1599609375 147.7 478.95 L 147.7 181.15 Q 147.6966796875 174.9400390625 143.3 170.55 138.9099609375 166.1533203125 132.7 166.15 L 40 166.15 Q 33.7900390625 166.1533203125 29.4 170.55 M 55 196.15 L 117.7 196.15 117.7 463.95 55 463.95 55 196.15 M 134.85 38.35 L 134.85 38.35 Q 114.7173828125 18.1341796875 86.3 18.15 57.823828125 18.1466796875 37.7 38.35 L 37.7 38.35 Q 17.70234375 58.46015625 17.7 86.85 17.694921875 115.2359375 37.7 135.35 L 37.7 135.4 Q 57.82109375 155.55390625 86.3 155.55 114.702734375 155.55390625 134.85 135.4 L 134.85 135.4 Q 154.954296875 115.2505859375 154.95 86.85 154.9470703125 58.4404296875 134.85 38.35 M 113.6 59.55 L 113.65 59.55 Q 124.9529296875 70.8595703125 124.95 86.85 124.9453125 102.8494140625 113.6 114.2 L 113.65 114.2 Q 102.297265625 125.54609375 86.3 125.55 70.296875 125.54609375 59 114.2 L 58.95 114.2 Q 47.7052734375 102.846484375 47.7 86.85 47.69765625 70.857421875 58.95 59.55 L 59 59.5 Q 70.2935546875 48.1533203125 86.3 48.15 102.2828125 48.166015625 113.6 59.55 M 366.55 287.35 L 366.55 287.35 Q 369.8208984375 295.9189453125 370.95 308.6 371.6982421875 317.625 371.7 334.2 L 371.7 479.05 Q 371.7033203125 485.2599609375 376.1 489.65 380.4900390625 494.0466796875 386.7 494.05 L 479.35 494.05 Q 485.5599609375 494.0466796875 489.95 489.65 494.3466796875 485.2599609375 494.35 479.05 L 494.35 315.75 Q 494.346484375 281.159765625 489.9 257 484.36796875 226.735546875 471.6 206.7 442.5888671875 158.8494140625 368.25 158.85 332.56171875 158.936328125 304.3 176.4 L 304.3 176.35 Q 299.108203125 179.589453125 294.45 183.15 L 294.45 181.15 Q 294.4466796875 174.9400390625 290.05 170.55 285.6599609375 166.1533203125 279.45 166.15 L 190.75 166.15 Q 184.5400390625 166.1533203125 180.15 170.55 175.7533203125 174.9400390625 175.75 181.15 L 175.75 479.05 Q 175.7533203125 485.2599609375 180.15 489.65 184.5400390625 494.0466796875 190.75 494.05 L 283.15 494.05 Q 289.3599609375 494.0466796875 293.75 489.65 298.1466796875 485.2599609375 298.15 479.05 L 298.15 331.75 Q 298.1484375 301.451171875 305.95 286.25 L 306 286.2 Q 315.576171875 270.294921875 338.65 270.3 359.621484375 269.85 366.55 287.35 M 446.2 222.7 Q 456.0318359375 238.5634765625 460.4 262.4 464.353515625 284.340625 464.35 315.75 L 464.35 464.05 401.7 464.05 401.7 334.2 Q 401.7017578125 315.975 400.85 306.05 L 400.85 306 Q 399.27265625 288.264453125 394.45 276.35 L 394.45 276.3 Q 380.37734375 240.7470703125 338.65 240.3 296.2140625 240.305078125 279.7 271.75 L 279.7 271.75 Q 268.1515625 291.6453125 268.15 331.75 L 268.15 464.05 205.75 464.05 205.75 196.15 264.45 196.15 264.45 221.9 Q 264.4533203125 228.1099609375 268.85 232.5 273.2400390625 236.8966796875 279.45 236.9 L 280.65 236.9 Q 284.8103515625 236.90390625 288.35 234.75 291.9462890625 232.5927734375 293.9 228.9 302.626171875 212.6734375 320.05 201.9 L 320.05 201.9 Q 341.3384765625 188.7634765625 368.25 188.85 423.7208984375 188.8505859375 446.2 222.7 Z\"> </path> </svg> </power> </power> <power id=\"powerShareBtnAnim\" class=\"share-group share-pinterest\"> <power id=\"{{{pinterestBtn}}}\" style=\"cursor:pointer;padding:0\"> <svg width=\"100%\" height=\"100%\" class=\"power-svg\" viewBox=\"0 0 520 520\"> <path fill=\"#fff\" stroke=\"none\" d=\" M 340.95 115.95 L 341 115.95 Q 366.8947265625 141.594921875 366.9 183.05 366.915234375 211.75390625 360.8 237.75 354.941796875 262.813671875 344.05 281.85 L 344 281.9 Q 333.6970703125 299.9265625 319.95 309.8 L 319.9 309.8 Q 306.843359375 319.0630859375 291.8 319.15 276.2375 319.3591796875 267 308.4 L 266.95 308.35 Q 258.0572265625 297.5625 261.55 282.85 L 261.55 282.8 Q 264.0701171875 272.1232421875 268.85 256.55 L 268.8 256.55 Q 274.4572265625 238.3400390625 277.05 229.6 L 277.05 229.55 Q 287.273828125 195.3291015625 287.05 178.6 287.04765625 154.2626953125 274.2 139.05 L 274.2 139 Q 259.7958984375 120.948046875 233.7 120.95 203.5919921875 120.5439453125 182.95 147.95 L 182.9 147.95 Q 163.8544921875 172.7755859375 163.85 209.55 163.86328125 228.55703125 169 246.3 L 169 246.35 Q 170.6 251.8517578125 172.2 255.95 L 136.75 406 136.75 406 Q 129.925 434.76171875 131.35 475.2 131.394921875 476.27890625 131.6 477.4 136.5583984375 504.404296875 152.8 508.05 166.89921875 515.028515625 189.1 498.8 191.389453125 497.1279296875 192.9 494.7 215.4203125 459.2328125 223.35 429.8 L 223.35 429.8 Q 225.5431640625 421.843359375 234.7 385.7 L 234.65 385.75 236.6 378.25 Q 242.115234375 382.219140625 248.75 385.75 L 248.8 385.75 Q 272.2091796875 398.1158203125 298.3 398.1 335.6607421875 398.0712890625 367.6 381.65 367.625 381.6623046875 367.65 381.65 398.4412109375 366.0109375 421.1 336.7 443.12890625 308.362890625 454.85 270.2 466.613671875 232.165625 466.65 188.35 466.666796875 153.6826171875 452.5 121.3 L 452.5 121.35 Q 438.5078125 89.2806640625 412.7 64.5 386.191796875 39.1021484375 351.05 25.2 314.0994140625 10.583984375 271.65 10.55 220.0044921875 10.5455078125 177.2 28.05 137.6974609375 44.1279296875 108.65 73.55 L 108.7 73.55 Q 81.7677734375 100.7685546875 67.35 135.6 L 67.35 135.55 Q 53.3587890625 169.0849609375 53.4 203.15 53.3939453125 245.4220703125 69.25 276.45 L 69.25 276.45 Q 87.139453125 311.978515625 120.9 325.6 L 120.8 325.6 Q 132.50859375 330.494140625 141.95 325.4 L 142 325.35 Q 152.0927734375 321.062109375 155.3 308.35 L 155.35 308.3 Q 159.7423828125 290.978125 161.1 285.65 161.11328125 285.6248046875 161.1 285.55 163.7869140625 275.45 161.7 269.65 L 161.7 269.7 Q 160.8388671875 264.51171875 153.95 256.35 146.6896484375 247.687109375 142.95 237.3 L 142.95 237.25 Q 138.7033203125 225.1880859375 138.7 210.25 138.6919921875 186.1400390625 147.4 164.15 156.05078125 142.311328125 172.1 125.65 L 172.05 125.65 Q 188.7466796875 108.4470703125 211.15 99.1 L 211.15 99.1 Q 235.3005859375 89.054296875 263.65 89.1 312.636328125 89.1048828125 340.95 115.95 M 361.9 94.45 L 361.9 94.4 Q 326.141796875 59.094921875 263.65 59.1 229.098828125 59.1458984375 199.65 71.4 L 199.6 71.4 Q 171.452734375 83.152734375 150.5 104.8 L 150.5 104.8 Q 130.3490234375 125.688671875 119.5 153.1 108.7078125 180.359765625 108.7 210.25 108.6966796875 230.8119140625 114.7 247.4 L 114.7 247.4 Q 120.2103515625 262.812890625 131 275.65 132.08984375 276.9224609375 132.7 277.35 L 132.7 277.4 Q 132.23984375 277.4806640625 132.1 278 L 132.05 278.1 Q 130.9310546875 282.5537109375 127.55 295.7 107.378125 285.471875 96.05 262.95 L 96.05 262.9 Q 83.4060546875 237.577734375 83.4 203.15 83.44140625 174.9146484375 95.05 147.1 L 95.05 147.05 Q 107.23203125 117.6318359375 130 94.65 L 130 94.65 Q 154.801953125 69.5720703125 188.5 55.85 226.1953125 40.554296875 271.65 40.55 308.2 40.515625 340 53.1 369.607421875 64.7974609375 391.95 86.15 413.3921875 106.719140625 425 133.35 L 425 133.35 Q 436.6330078125 159.9173828125 436.65 188.35 436.6861328125 227.4341796875 426.2 261.35 416.1708984375 294.0369140625 397.4 318.35 378.9775390625 342.1642578125 354 354.9 L 353.95 354.95 Q 328.31015625 368.1287109375 298.3 368.1 279.590625 368.0841796875 262.8 359.2 L 262.8 359.25 Q 248.23359375 351.52578125 242.15 340.75 240.01015625 336.640625 235.9 334.45 231.778125 332.262890625 227.15 332.8 222.568359375 333.3482421875 219.05 336.4 215.540625 339.491015625 214.35 343.95 L 205.6 378.3 205.6 378.35 Q 196.5568359375 414.055859375 194.4 421.9 L 194.4 421.85 Q 187.5673828125 446.5330078125 169.15 476.15 164.917578125 479.0849609375 162.8 479.75 162.223828125 477.9609375 161.3 473.15 160.1587890625 437.973828125 165.95 412.85 L 202.55 258 Q 203.8064453125 252.7384765625 201.35 247.85 199.6349609375 244.2423828125 197.8 237.95 L 197.8 237.95 Q 193.8365234375 224.242578125 193.85 209.55 193.8453125 183.644921875 206.85 166.05 L 206.85 166 Q 217.9248046875 151.3541015625 233.7 150.95 244.7080078125 150.951953125 251 158.05 L 250.95 158 Q 257.0521484375 166.033984375 257.05 178.6 256.8263671875 192.469921875 248.3 221 L 248.3 221 Q 245.7427734375 229.6599609375 240.15 247.7 L 240.15 247.75 Q 235.0298828125 264.476953125 232.35 275.95 225.2498046875 305.946875 244.1 327.8 L 244.1 327.75 Q 261.9630859375 348.94140625 291.8 349.15 316.1564453125 349.2369140625 337.25 334.3 L 337.25 334.3 Q 356.102734375 321.1734375 370.05 296.8 L 370.05 296.8 Q 383.0583984375 274.2859375 390 244.6 396.884765625 215.3458984375 396.9 183.05 396.9052734375 128.1248046875 361.9 94.45 Z\"> </path> </svg> </power> </power> <power id=\"powerShareBtnAnim\" class=\"share-group share-whatsapp\"> <power id=\"{{{whatsappBtn}}}\" style=\"cursor:pointer;padding:0\"> <svg width=\"100%\" height=\"100%\" class=\"power-svg\" viewBox=\"0 0 520 520\"> <path fill=\"#fff\" stroke=\"none\" d=\" M 438.75 79.25 Q 404.5 45 360.1 26.25 314.15 6.8 263.8 6.8 213.45 6.8 167.45 26.25 123.1 45 88.8 79.25 54.55 113.5 35.8 157.9 16.35 203.85 16.35 254.2 16.35 288.75 25.65 321.65 34.7 353.6 51.85 381.95 52.2 382.5 52.3 383.15 L 52.3 383.2 Q 52.35 383.8 52.15 384.45 L 8.8 513.25 141.8 470.7 Q 142.35 470.5 143 470.55 143.6 470.6 144.15 470.9 171.15 485.85 200.95 493.65 231.65 501.65 263.7 501.65 314.05 501.65 360.05 482.2 404.45 463.45 438.75 429.15 473 394.9 491.75 350.5 511.2 304.55 511.2 254.2 511.2 203.85 491.75 157.9 473 113.5 438.75 79.25 M 413.3 104.8 Q 442.55 134.05 458.65 172 475.3 211.3 475.3 254.25 475.25 297.2 458.6 336.45 442.5 374.4 413.2 403.7 383.95 432.95 346 449.05 306.7 465.7 263.8 465.7 232.1 465.7 202.05 456.5 173.6 447.8 148.65 431.5 L 69.9 456.7 69.95 456.7 Q 68.85 457.05 67.8 456.6 L 67.75 456.6 Q 66.7 456.1 66.25 455.05 65.8 454 66.15 452.9 L 91.65 376.95 Q 72.95 350.85 62.95 320.5 52.3 288.4 52.3 254.25 52.3 211.3 68.95 172 85.05 134.05 114.35 104.8 143.6 75.5 181.55 59.4 220.85 42.75 263.8 42.75 306.75 42.75 346.05 59.4 384 75.5 413.3 104.8 M 338.3 288.7 Q 333.05 286.65 330.55 286.85 326.85 287.15 323.8 291.45 320.8 295.6 312.95 304.4 306.5 311.65 302.55 315.7 299.65 318.8 296.55 319.1 293.4 319.35 288.7 316.85 278.9 312.4 270.05 307.25 253.3 297.45 238.5 283.2 226.65 271.8 215.95 256.2 209.85 247.25 204.55 237.6 202.2 233.25 203.65 229.85 204.55 227.7 207.85 224.7 209.75 222.95 212.75 219.6 216.2 215.75 217.85 213.9 220 211.55 221.65 208.95 221.7 208.9 224.7 203.55 227.45 198.55 224.55 192.35 223.45 190.05 206.7 144.15 203.55 135.75 199.3 133.7 198 133.1 192.7 132.95 190.75 132.9 186.8 132.5 182.5 132.05 180.5 131.95 176.6 131.75 172.5 133.25 167.3 135.15 163.2 139.35 153.35 149.3 149.15 156.1 139.55 171.65 138.8 191.85 138.05 211.7 149.05 235.5 154.5 247.35 162.4 258.95 163.15 260.05 171.15 272.6 181.05 287.2 192.35 300.4 227.85 342 268 359.55 308.9 377.45 325.65 379.75 331.35 380.5 336.25 379.7 343.6 378.5 344.1 378.45 354.05 377.95 368.45 369.35 384.3 359.9 388.4 349.65 392.4 339.65 393.65 330.05 394.65 321.9 393.3 319.45 392.25 317.45 389 315.45 384.35 312.85 381.2 311.1 343.7 290.85 338.3 288.7 Z\"> </path> </svg> </power> </power> <power id=\"powerShareBtnAnim\" class=\"share-group share-email\"> <power id=\"{{{emailBtn}}}\" style=\"cursor:pointer;padding:0\"> <svg width=\"100%\" height=\"100%\" class=\"power-svg\" viewBox=\"0 0 483.3 483.3\"> <g fill=\"#fff\"> <path d=\"M424.3 57.75H59.1c-32.6 0-59.1 26.5-59.1 59.1v249.6c0 32.6 26.5 59.1 59.1 59.1h365.1c32.6 0 59.1-26.5 59.1-59.1v-249.5c.1-32.6-26.4-59.2-59-59.2zm32.1 308.7c0 17.7-14.4 32.1-32.1 32.1H59.1c-17.7 0-32.1-14.4-32.1-32.1v-249.5c0-17.7 14.4-32.1 32.1-32.1h365.1c17.7 0 32.1 14.4 32.1 32.1v249.5h.1z\"> </path> <path d=\"M304.8 238.55l118.2-106c5.5-5 6-13.5 1-19.1-5-5.5-13.5-6-19.1-1l-163 146.3-31.8-28.4c-.1-.1-.2-.2-.2-.3-.7-.7-1.4-1.3-2.2-1.9L78.3 112.35c-5.6-5-14.1-4.5-19.1 1.1-5 5.6-4.5 14.1 1.1 19.1l119.6 106.9-119.1 111.5c-5.4 5.1-5.7 13.6-.6 19.1 2.7 2.8 6.3 4.3 9.9 4.3 3.3 0 6.6-1.2 9.2-3.6l120.9-113.1 32.8 29.3c2.6 2.3 5.8 3.4 9 3.4s6.5-1.2 9-3.5l33.7-30.2 120.2 114.2c2.6 2.5 6 3.7 9.3 3.7 3.6 0 7.1-1.4 9.8-4.2 5.1-5.4 4.9-14-.5-19.1l-118.7-112.7z\"> </path> </g> </svg> </power> </power> </power> </power> <power class=\"center-video-wapper\"> <power class=\"play-pause-btn\"> <power id=\"{{{playVideoBtn}}}\" style=\"cursor:pointer;display:block\"> <svg width=\"100%\" height=\"100%\" class=\"power-svg\" viewBox=\"0 0 512 512\"> <path fill=\"#fff\" d=\"M256 0C114.617 0 0 114.615 0 256s114.617 256 256 256 256-114.615 256-256S397.383 0 256 0zm88.48 269.57l-128 80a16.008 16.008 0 0 1-16.238.422A15.994 15.994 0 0 1 192 336V176c0-5.82 3.156-11.172 8.242-13.992a15.957 15.957 0 0 1 16.238.422l128 80c4.676 2.93 7.52 8.055 7.52 13.57s-2.844 10.641-7.52 13.57z\"> </path> </svg> <svg class=\"power-hidden\" width=\"100%\" height=\"100%\" class=\"power-svg\" viewBox=\"0 0 300.003 300.003\"> <path fill=\"#fff\" d=\"M150.001 0c-82.838 0-150 67.159-150 150 0 82.838 67.162 150.003 150 150.003 82.843 0 150-67.165 150-150.003 0-82.841-67.155-150-150-150zM134.41 194.538c0 9.498-7.7 17.198-17.198 17.198s-17.198-7.7-17.198-17.198V105.46c0-9.498 7.7-17.198 17.198-17.198s17.198 7.7 17.198 17.198v89.078zm64.545 0c0 9.498-7.701 17.198-17.198 17.198-9.498 0-17.198-7.7-17.198-17.198V105.46c0-9.498 7.7-17.198 17.198-17.198s17.198 7.7 17.198 17.198v89.078z\" class=\"active-path\" data-old_color=\"#ffffff\" data-original=\"#000000\"> </path> </svg> </power> </power> <power id=\"{{{iconController}}}\" class=\"back-next-btn-group back-btn-wapper\"> <power class=\"back-btn-size back-btn {{{nextPrevArrowOn}}}\"> <power id=\"{{{videoBackBtn}}}\" style=\"cursor:pointer;display:block\"> <svg width=\"100%\" height=\"100%\" class=\"power-svg\" viewBox=\"0 0 42 42\"> <path fill=\"#fff\" d=\"M35.965.114a1.005 1.005 0 0 0-1.033.063L7.5 19.095V1a1 1 0 1 0-2 0v40a1 1 0 1 0 2 0V22.905l27.432 18.919a1.012 1.012 0 0 0 1.033.062A1 1 0 0 0 36.5 41V1a1 1 0 0 0-.535-.886z\"> </path> </svg> </power> </power> </power> <power id=\"{{{iconController}}}\" class=\"back-next-btn-group next-btn-wapper\"> <power class=\"back-btn-size next-btn {{{nextPrevArrowOn}}}\"> <power id=\"{{{videoNextBtn}}}\" style=\"cursor:pointer;display:block\"> <svg width=\"100%\" height=\"100%\" class=\"power-svg\" viewBox=\"0 0 42 42\"> <path fill=\"#fff\" d=\"M35.965.114a1.005 1.005 0 0 0-1.033.063L7.5 19.095V1a1 1 0 1 0-2 0v40a1 1 0 1 0 2 0V22.905l27.432 18.919a1.012 1.012 0 0 0 1.033.062A1 1 0 0 0 36.5 41V1a1 1 0 0 0-.535-.886z\"> </path> </svg> </power> </power> </power> </power> <power id=\"{{{iconController}}}\" class=\"bottom-video-wapper\"> <power class=\"video-progress\"> <progress id=\"{{{videoProgressBar}}}\" value=\"0\" min=\"0\"></progress> <input id=\"{{{seek}}}\" class=\"seek\" type=\"range\" value=\"0\" min=\"0\" step=\"1\"> <power id=\"{{{seekTooltip}}}\" class=\"seek-tooltip\">00:00</power> </power> <power class=\"fullscreen-btn {{{fullscreenOn}}}\"> <power class=\"fullscreen-icon\"> <power id=\"{{{fullscreenBtn}}}\" style=\"cursor:pointer;display:block\"> <svg viewBox=\"0 0 18 18\"> <g> <g fill=\"#fff\"> <path d=\"M17,17h-6v1h6v0h1v-7h-1V17z M1,11H0v7h1v0h6v-1H1V11z M17,0L17,0l-6,0v1h6v6h1V0H17z M1,0H0v7h1V1h6V0L1,0    L1,0z\"> </path> </g> </g> </svg> <svg class=\"power-hidden\" viewBox=\"0 0 18 18\"> <g> <g fill=\"#fff\"> <path d=\"M11,11v1v6h1v-6h6v-1h-6H11z M0,11v1h6v6h1v-6v-1H6H0z M12,6V0h-1v6v1h1h6V6H12z M6,6H0v1h6h1V6V0H6V6z\"> </path> </g> </g> </svg> </power> </power> </power> <power class=\"sound-controll\"> <power id=\"{{{soundScrabberWrapper}}}\" class=\"sound-scrabber-wapper\"> <power class=\"sound-scrabber-bg\"></power> <power class=\"sound-scrabber-hit-wapper\"> <progress id=\"{{{volumeProcessBar}}}\" min=\"0\" max=\"1\" step=\"0.01\"></progress> <input id=\"{{{volumeBar}}}\" type=\"range\" min=\"0\" max=\"1\" step=\"0.01\"> </power> </power> <power class=\"sound-btn\"> <power id=\"{{{volumeBtn}}}\" style=\"cursor:pointer;display:block\"> <svg id=\"{{{volumeOn}}}\" width=\"100%\" height=\"100%\" class=\"power-svg\" viewBox=\"0 0 489.6 489.6\"> <g fill=\"#fff\"> <path d=\"M361.1 337.6c2.2 1.5 4.6 2.3 7.1 2.3 3.8 0 7.6-1.8 10-5.2 18.7-26.3 28.5-57.4 28.5-89.9s-9.9-63.6-28.5-89.9c-3.9-5.5-11.6-6.8-17.1-2.9-5.5 3.9-6.8 11.6-2.9 17.1 15.7 22.1 24 48.3 24 75.8 0 27.4-8.3 53.6-24 75.8-3.9 5.4-2.6 13 2.9 16.9zM425.4 396.3c2.2 1.5 4.6 2.3 7.1 2.3 3.8 0 7.6-1.8 10-5.2 30.8-43.4 47.1-94.8 47.1-148.6s-16.3-105.1-47.1-148.6c-3.9-5.5-11.6-6.8-17.1-2.9-5.5 3.9-6.8 11.6-2.9 17.1 27.9 39.3 42.6 85.7 42.6 134.4 0 48.6-14.7 95.1-42.6 134.4-3.9 5.5-2.6 13.1 2.9 17.1zM254.7 415.7c4.3 2.5 9.2 3.8 14.2 3.8 7.4 0 14.4-2.8 19.7-7.9 5.6-5.4 8.7-12.6 8.7-20.4V98.5c0-15.7-12.7-28.4-28.4-28.4-4.9 0-9.8 1.3-14.2 3.8-.3.2-.6.3-.8.5l-100.1 69.2H73.3C32.9 143.6 0 176.5 0 216.9v55.6c0 40.4 32.9 73.3 73.3 73.3h84.5l95.9 69.2c.3.3.7.5 1 .7zm-92.9-94.4H73.3c-26.9 0-48.8-21.9-48.8-48.8v-55.6c0-26.9 21.9-48.8 48.8-48.8h84.3c2.5 0 4.9-.8 7-2.2l102.7-71c.5-.3 1.1-.4 1.6-.4 1.6 0 3.9 1.2 3.9 3.9v292.7c0 1.1-.4 2-1.1 2.8-.7.7-1.8 1.1-2.7 1.1-.5 0-1-.1-1.5-.3l-98.4-71.1c-2.2-1.5-4.7-2.3-7.3-2.3z\"> </path> </g> </svg> <svg id=\"{{{volumeOff}}}\" class=\"power-svg power-hidden\" width=\"100%\" height=\"100%\" viewBox=\"0 0 612 612\"> <defs> <g id=\"Layer0_0_FILL\"> <path fill=\"#fff\" stroke=\"none\" d=\" M 371.65 292.8 L 341.1 330.45 341.1 488.8 Q 341.1 490.75 339.7 492.3 338.35 493.75 336.3 493.75 335.15 493.75 334.4 493.3 L 255.4 436.2 252.2 440.15 235.9 460.2 317.1 518.75 Q 317.8 519.35 318.35 519.6 326.7 524.4 336.15 524.4 343.15 524.4 349.45 521.85 355.8 519.3 360.75 514.5 366 509.4 368.85 502.85 371.65 496.25 371.65 489 L 371.65 292.8 M 472.75 193.65 Q 469.1 188.5 462.8 187.45 459.8009765625 186.922265625 457.05 187.5 454.0548828125 188.125390625 451.35 190.05 446.2 193.75 445.15 200 444.9408203125 201.255078125 444.9 202.45 444.8271484375 207.3259765625 447.75 211.45 462.45 232.15 470.1 256.3 477.75 280.45 477.75 306.25 477.75 312.15 477.35 318 476 337.45 470.1 356.05 462.45 380.15 447.75 401 444.1 406 445.15 412.2 446.2 418.35 451.35 422 455.6 424.95 460.25 424.95 463.9 424.95 467.2 423.3 470.55 421.55 472.75 418.45 490.25 393.8 499.35 365.2 506.6 342.25 508 318 508.35 312.05 508.35 306.05 508.35 275.55 499.25 246.95 490.2 218.35 472.75 193.65 M 361.25 98.05 Q 350.85 87.65 336.15 87.65 326.75 87.65 318.35 92.45 317.6 92.85 317.35 93.05 L 192.25 179.5 91.55 179.5 Q 72.95 179.5 55.95 186.7 39.5 193.7 26.85 206.4 14.15 219.1 7.2 235.55 0 252.55 0 271.15 L 0 340.65 Q 0 359.25 7.2 376.25 14.15 392.7 26.85 405.4 39.5 418.1 55.95 425.05 72.95 432.25 91.55 432.25 L 139.65 432.25 164.45 401.65 91.55 401.65 Q 66.4 401.65 48.45 383.75 30.55 365.85 30.55 340.65 L 30.55 271.15 Q 30.55 245.95 48.45 228.05 66.35 210.15 91.55 210.15 L 197 210.15 Q 201.6 210.15 205.8 207.35 L 334.2 118.55 Q 334.95 118.05 336.2 118.05 337.95 118.05 339.4 119.25 341.1 120.6 341.1 122.95 L 341.1 183.7 371.65 146.05 371.65 123.15 Q 371.65 108.4 361.25 98.05 M 558 127.4 Q 555.6 123.8 553.05 120.2 549.35 115.05 543.1 114 536.8 112.95 531.65 116.6 526.5 120.25 525.45 126.55 524.35 132.8 528.05 138 546 163.2 558 191.2 563.55 204.1 567.8 217.6 581.35 260.3 581.35 306 581.35 351.6 567.8 394.4 554.2 437.25 528.05 474 524.45 479.2 525.55 485.45 526.6 491.7 531.75 495.45 536 498.35 540.7 498.35 544.35 498.35 547.65 496.7 551 494.95 553.2 491.85 582 451.05 597 403.75 612 356.35 612 306 612 255.65 596.95 208.3 583.25 165.25 558 127.4 M 513.6 10.4 Q 507.15 8.05 500.5 9.7 493.1 11.55 488.8 17.85 L 37.15 574.05 Q 32.15 581.4 33.85 588.05 35.3 593.95 41.15 597.25 46.9 600.5 53.25 599.4 60.2 598.25 64.2 592.3 L 520.9 29.05 Q 524.85 23 522.3 17.65 519.95 12.75 513.6 10.4 Z\"> </path> </g> </defs> <g transform=\"matrix( 1, 0, 0, 1, 0,0) \"> <use xlink:href=\"#Layer0_0_FILL\"></use> </g> </svg> </power> </power> </power> <power class=\"progress-txt\"> <time id=\"{{{timeElapsed}}}\">00:00</time> <span> / </span> <time id=\"{{{duration}}}\">00:00</time> </power> <power class=\"skipxsec-wapper\"> <power class=\"skipxsec-btn skipxsec-back-btn {{{nextPrevSkipOn}}}\"> <power id=\"{{{skipSecBack}}}\" style=\"cursor:pointer;display:block\"> <svg width=\"100%\" height=\"100%\" enable-background=\"new 0 0 512.004 512.004\" viewBox=\"0 0 512.004 512.004\" style=\"pointer-events:none\"> <path fill=\"#fff\" d=\"M464.004 98.346h-368v32h368c14.544 0 15.92 15.92 16 20.688v128c0 3.072-.448 7.152-2.608 9.056-2.816 2.496-8.784 2.624-11.072 2.416-.768-.096-1.552-.16-2.32-.16H54.628l68.688-68.688-22.624-22.624-96 96c-6.256 6.256-6.256 16.368 0 22.624l96 96 22.624-22.624-68.688-68.688h408.464c1.168.112 2.896.24 5.024.24 7.536 0 20.064-1.52 30.144-10.224 6.272-5.424 13.744-15.6 13.744-33.328v-128c0-21.168-12.784-52.688-48-52.688z\"> </path> </svg> </power> </power> <power class=\"skipxsec-btn skipxsec-forward-btn {{{nextPrevSkipOn}}}\"> <power id=\"{{{skipSecForward}}}\" style=\"cursor:pointer;display:block\"> <svg width=\"100%\" height=\"100%\" enable-background=\"new 0 0 512.004 512.004\" viewBox=\"0 0 512.004 512.004\" style=\"pointer-events:none\"> <path fill=\"#fff\" d=\"M464.004 98.346h-368v32h368c14.544 0 15.92 15.92 16 20.688v128c0 3.072-.448 7.152-2.608 9.056-2.816 2.496-8.784 2.624-11.072 2.416-.768-.096-1.552-.16-2.32-.16H54.628l68.688-68.688-22.624-22.624-96 96c-6.256 6.256-6.256 16.368 0 22.624l96 96 22.624-22.624-68.688-68.688h408.464c1.168.112 2.896.24 5.024.24 7.536 0 20.064-1.52 30.144-10.224 6.272-5.424 13.744-15.6 13.744-33.328v-128c0-21.168-12.784-52.688-48-52.688z\"> </path> </svg> </power> </power> <power class=\"skipxsec-num {{{nextPrevSkipOn}}}\">10 Sec</power> </power> </power> </power> </power> </power>";
// Exports
            module.exports = code;

            /***/ }),
        /* 23 */
        /***/ (function(module, exports) {

// Module
            var code = "<svg {{{classPrevButton}}} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"> <path d=\"M18 21h3V3h-3v18zM3 21l14-9L3 3v18z\" fill-rule=\"evenodd\"></path> </svg> ";
// Exports
            module.exports = code;

            /***/ }),
        /* 24 */
        /***/ (function(module, exports, __webpack_require__) {

            module.exports = __webpack_require__(122);


            /***/ }),
        /* 25 */
        /***/ (function(module, exports) {

// Module
            var code = "<div id=\"{{{relatedzoneWrapperID}}}\" class=\"relatedzone__wrapper\" {{{backgroundStyle}}}> <div id=\"adsPlaceholderWrapper1\" class=\"adsPlaceholder1\"> <span class=\"adsTitle\">Featured Advertising</span> <div id=\"adsPlaceholder1\" style=\"min-width:300px;min-height:250px\"> </div> </div> <div id=\"relatedZone1ID\" class=\"relatedzone\"> <div class=\"relatedzone_title\" {{{titleStyle}}}> {{{mainTitle}}} </div> <div class=\"relatedzone_main__wrapper\"> {{{relatedZoneDetail}}} </div> <div class=\"footerContent\"> Powered by <a href=\"{{{poweredByURL}}}\" target=\"_blank\">{{{brandName}}}</a> </div> </div> <div id=\"adsPlaceholderWrapper2\" class=\"adsPlaceholder2_horizontal\"> <span class=\"adsTitle\">Featured Advertising</span> <div id=\"adsPlaceholder2\" style=\"min-width:300px;min-height:250px\"> </div> </div> </div>";
// Exports
            module.exports = code;

            /***/ }),
        /* 26 */
        /***/ (function(module, exports) {

            module.exports = function (bitmap, value) {
                return {
                    enumerable: !(bitmap & 1),
                    configurable: !(bitmap & 2),
                    writable: !(bitmap & 4),
                    value: value
                };
            };


            /***/ }),
        /* 27 */
        /***/ (function(module, exports, __webpack_require__) {

            var fails = __webpack_require__(8);
            var classof = __webpack_require__(16);

            var split = ''.split;

// fallback for non-array-like ES3 and non-enumerable old V8 strings
            module.exports = fails(function () {
                // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
                // eslint-disable-next-line no-prototype-builtins -- safe
                return !Object('z').propertyIsEnumerable(0);
            }) ? function (it) {
                return classof(it) == 'String' ? split.call(it, '') : Object(it);
            } : Object;


            /***/ }),
        /* 28 */
        /***/ (function(module, exports) {

// `RequireObjectCoercible` abstract operation
// https://tc39.es/ecma262/#sec-requireobjectcoercible
            module.exports = function (it) {
                if (it == undefined) throw TypeError("Can't call method on " + it);
                return it;
            };


            /***/ }),
        /* 29 */
        /***/ (function(module, exports, __webpack_require__) {

            var isObject = __webpack_require__(10);

// `ToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-toprimitive
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
            module.exports = function (input, PREFERRED_STRING) {
                if (!isObject(input)) return input;
                var fn, val;
                if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
                if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
                if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
                throw TypeError("Can't convert object to primitive value");
            };


            /***/ }),
        /* 30 */
        /***/ (function(module, exports, __webpack_require__) {

            var requireObjectCoercible = __webpack_require__(28);

// `ToObject` abstract operation
// https://tc39.es/ecma262/#sec-toobject
            module.exports = function (argument) {
                return Object(requireObjectCoercible(argument));
            };


            /***/ }),
        /* 31 */
        /***/ (function(module, exports, __webpack_require__) {

            var DESCRIPTORS = __webpack_require__(9);
            var fails = __webpack_require__(8);
            var createElement = __webpack_require__(98);

// Thank's IE8 for his funny defineProperty
            module.exports = !DESCRIPTORS && !fails(function () {
                // eslint-disable-next-line es/no-object-defineproperty -- requied for testing
                return Object.defineProperty(createElement('div'), 'a', {
                    get: function () { return 7; }
                }).a != 7;
            });


            /***/ }),
        /* 32 */
        /***/ (function(module, exports) {

            module.exports = {};


            /***/ }),
        /* 33 */
        /***/ (function(module, exports, __webpack_require__) {

            var aFunction = __webpack_require__(100);

// optional / simple context binding
            module.exports = function (fn, that, length) {
                aFunction(fn);
                if (that === undefined) return fn;
                switch (length) {
                    case 0: return function () {
                        return fn.call(that);
                    };
                    case 1: return function (a) {
                        return fn.call(that, a);
                    };
                    case 2: return function (a, b) {
                        return fn.call(that, a, b);
                    };
                    case 3: return function (a, b, c) {
                        return fn.call(that, a, b, c);
                    };
                }
                return function (/* ...args */) {
                    return fn.apply(that, arguments);
                };
            };


            /***/ }),
        /* 34 */
        /***/ (function(module, exports, __webpack_require__) {

            var DESCRIPTORS = __webpack_require__(9);
            var definePropertyModule = __webpack_require__(101);
            var createPropertyDescriptor = __webpack_require__(26);

            module.exports = DESCRIPTORS ? function (object, key, value) {
                return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
            } : function (object, key, value) {
                object[key] = value;
                return object;
            };


            /***/ }),
        /* 35 */
        /***/ (function(module, exports, __webpack_require__) {

            var IS_NODE = __webpack_require__(114);
            var V8_VERSION = __webpack_require__(115);
            var fails = __webpack_require__(8);

// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
            module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
                // eslint-disable-next-line es/no-symbol -- required for testing
                return !Symbol.sham &&
                    // Chrome 38 Symbol has incorrect toString conversion
                    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
                    (IS_NODE ? V8_VERSION === 38 : V8_VERSION > 37 && V8_VERSION < 41);
            });


            /***/ }),
        /* 36 */
        /***/ (function(module, exports, __webpack_require__) {

            var path = __webpack_require__(32);
            var global = __webpack_require__(6);

            var aFunction = function (variable) {
                return typeof variable == 'function' ? variable : undefined;
            };

            module.exports = function (namespace, method) {
                return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace])
                    : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];
            };


            /***/ }),
        /* 37 */
        /***/ (function(module, exports, __webpack_require__) {

            var parent = __webpack_require__(91);

            module.exports = parent;


            /***/ }),
        /* 38 */
        /***/ (function(module) {

            module.exports = JSON.parse("{\"z2yv40\":35,\"otdvy8\":34,\"u85yww\":33,\"ksjrwg\":32,\"w634lc\":31,\"nvo9a8\":30,\"qxjshs\":29,\"j0vd34\":28,\"y09fr4\":27,\"qikef4\":26,\"sxyuio\":25,\"lg9t6o\":24,\"wetrsw\":23,\"mz7ksg\":22,\"ssz1ts\":21,\"hsjny8\":20,\"dwpclc\":19.5,\"ypuwao\":19,\"6f0b9c\":18.5,\"pa8pa8\":18,\"91wge8\":17.5,\"up0s8w\":17,\"1k7f28\":16.5,\"kfft34\":16,\"gjlhq8\":15.5,\"v6i2o0\":15,\"8ffda8\":14.5,\"not1c0\":14,\"bhawhs\":13.5,\"rkncow\":13,\"3kmh34\":12.5,\"jnyxa8\":12,\"ey5ts0\":11.5,\"xte7sw\":11,\"5ijmrk\":10.5,\"pizchs\":10,\"ajl9ts\":9.5,\"tetnuo\":9,\"a0ao0\":8.5,\"lx4mio\":8,\"14sd0jk\":7.95,\"9pmhog\":7.9,\"1i3tiww\":7.85,\"y4mrcw\":7.8,\"1bg39q8\":7.75,\"31w8hs\":7.7,\"1vu9fcw\":7.65,\"ng2e4g\":7.6,\"10riwhs\":7.55,\"gsc4xs\":7.5,\"1p6j668\":7.45,\"u3snb4\":7.4,\"1cz11c0\":7.35,\"4ku03k\":7.3,\"1qahjpc\":7.25,\"hwaigw\":7.2,\"16bas5c\":7.15,\"b8k9a8\":7.1,\"1jmraio\":7.05,\"wvol4w\":7,\"1a753i8\":6.95,\"1sy29s\":6.9,\"1ym5d6o\":6.85,\"q7yby8\":6.8,\"13jeubk\":6.75,\"e0g740\":6.7,\"1men8cg\":6.65,\"rbwphc\":6.6,\"1fqwz5s\":6.55,\"7cpxxc\":6.5,\"1t2dhj4\":6.45,\"ko6gao\":6.4,\"15hc000\":6.35,\"aelh4w\":6.3,\"1issidc\":6.25,\"ytlqtc\":6.2,\"1c5296o\":6.15,\"3qv7y8\":6.1,\"1v0an7k\":6.05,\"mm3lz4\":6,\"zxk4cg\":5.95,\"fydcsg\":5.9,\"1ocke0w\":5.85,\"t9tv5s\":5.8,\"1ewy70g\":5.75,\"6ir5s0\":5.7,\"1s8epds\":5.65,\"ju7o5c\":5.6,\"1897xts\":5.55,\"d6heyo\":5.5,\"1lkog74\":5.45,\"w1pszk\":5.4,\"19d6bcw\":5.35,\"yza4g\":5.3,\"1xs6l1c\":5.25,\"pdzjsw\":5.2,\"12pg268\":5.15,\"ehxhj4\":5.1,\"1mw4irk\":5.05,\"rtdzwg\":5,\"1g8e9kw\":4.95,\"7u78cg\":4.9,\"1tjury8\":4.85,\"l5nqps\":4.8,\"140w4qo\":4.75,\"8y5lvk\":4.7,\"1hccn40\":4.65,\"xd5vk0\":4.6,\"1aomdxc\":4.55,\"2afcow\":4.5,\"1wbqps0\":4.45,\"nxjojk\":4.4,\"11906ww\":4.35,\"h9tfcw\":4.3,\"1po0glc\":4.25,\"ul9xq8\":4.2,\"1dgibr4\":4.15,\"52baio\":4.1,\"1qryu4g\":4.05,\"idrsw0\":4,\"16ss2kg\":3.95,\"bq1jpc\":3.9,\"1k48kxs\":3.85,\"wj73eo\":3.8,\"19unls0\":3.75,\"1ggkjk\":3.7,\"1y9nvgg\":3.65,\"pvgu80\":3.6,\"136xclc\":3.55,\"dnypds\":3.5,\"1m25qm8\":3.45,\"qzf7r4\":3.4,\"1fefhfk\":3.35,\"708g74\":3.3,\"1spvzsw\":3.25,\"kboykg\":3.2,\"15ytaf4\":3.15,\"aw2rk0\":3.1,\"1ja9ssg\":3.05,\"zb318g\":3,\"186q1hc\":2.99,\"8o60hs\":2.98,\"1py01z4\":2.97,\"qfg0zk\":2.96,\"1cmjjls\":2.95,\"d3zim8\":2.94,\"1udtk3k\":2.93,\"uv9j40\":2.92,\"13qwjcw\":2.91,\"48cidc\":2.9,\"1li6juo\":2.89,\"lzmiv4\":2.88,\"1dqhx4w\":2.87,\"e7xw5c\":2.86,\"1vhrxmo\":2.85,\"vz7wn4\":2.84,\"14uuww0\":2.83,\"5cavwg\":2.82,\"1mm4xds\":2.81,\"n3kwe8\":2.8,\"19aof0g\":2.79,\"9s4e0w\":2.78,\"1r1yfi8\":2.77,\"rjeeio\":2.76,\"10f1erk\":2.75,\"whds0\":2.74,\"1i6bf9c\":2.73,\"inre9s\":2.72,\"1fyeo74\":2.71,\"gfun7k\":2.7,\"1xpooow\":2.69,\"y74npc\":2.68,\"172rny8\":2.67,\"7k7myo\":2.66,\"1ou1og0\":2.65,\"pbhngg\":2.64,\"1bil62o\":2.63,\"c01534\":2.62,\"1t9v6kg\":2.61,\"trb5kw\":2.6,\"12my5ts\":2.59,\"34e4u8\":2.58,\"1ke86bk\":2.57,\"kvo5c0\":2.56,\"1e5hb7k\":2.55,\"emxa80\":2.54,\"1vwrbpc\":2.53,\"we7aps\":2.52,\"159uayo\":2.51,\"5ra9z4\":2.5,\"1n14bgg\":2.49,\"nikagw\":2.48,\"19pnt34\":2.47,\"a73s3k\":2.46,\"1rgxtkw\":2.45,\"rydslc\":2.44,\"10u0su8\":2.43,\"1bgruo\":2.42,\"1ilatc0\":2.41,\"j2qscg\":2.4,\"1gde29s\":2.39,\"guu1a8\":2.38,\"1y4o2rk\":2.37,\"ym41s0\":2.36,\"17hr20w\":2.35,\"7z711c\":2.34,\"1p912io\":2.33,\"pqh1j4\":2.32,\"1bxkk5c\":2.31,\"cf0j5s\":2.3,\"1toukn4\":2.29,\"u6ajnk\":2.28,\"131xjwg\":2.27,\"3jdiww\":2.26,\"1kt7ke8\":2.25,\"lanjeo\":2.24,\"1d1ixog\":2.23,\"diywow\":2.22,\"1ussy68\":2.21,\"va8x6o\":2.2,\"145vxfk\":2.19,\"4nbwg0\":2.18,\"1lx5xxc\":2.17,\"melwxs\":2.16,\"18lpfk0\":2.15,\"935ekg\":2.14,\"1qczg1s\":2.13,\"quff28\":2.12,\"zq2fb4\":2.11,\"7iebk\":2.1,\"1hhcfsw\":2.09,\"hysetc\":2.08,\"1f9foqo\":2.07,\"fqvnr4\":2.06,\"1x0pp8g\":2.05,\"xi5o8w\":2.04,\"16dsohs\":2.03,\"6v8ni8\":2.02,\"1o52ozk\":2.01,\"omio00\":2,\"1atm6m8\":1.99,\"bb25mo\":1.98,\"1skw740\":1.97,\"t2c64g\":1.96,\"11xz6dc\":1.95,\"2ff5ds\":1.94,\"1jp96v4\":1.93,\"k6p5vk\":1.92,\"1epghz4\":1.91,\"f6wgzk\":1.9,\"1wgqigw\":1.89,\"wy6hhc\":1.88,\"15tthq8\":1.87,\"6b9gqo\":1.86,\"1nl3i80\":1.85,\"o2jh8g\":1.84,\"1a9mzuo\":1.83,\"ar2yv4\":1.82,\"1s0x0cg\":1.81,\"siczcw\":1.8,\"11dzzls\":1.79,\"1vfym8\":1.78,\"1j5a03k\":1.77,\"jmpz40\":1.76,\"1gxd91c\":1.75,\"het81s\":1.74,\"1yon9j4\":1.73,\"z638jk\":1.72,\"181q8sg\":1.71,\"8j67sw\":1.7,\"1pt09a8\":1.69,\"qag8ao\":1.68,\"1chjqww\":1.67,\"cyzpxc\":1.66,\"1u8treo\":1.65,\"uq9qf4\":1.64,\"13lwqo0\":1.63,\"43cpog\":1.62,\"1ld6r5s\":1.61,\"lumq68\":1.6,\"1dli4g0\":1.59,\"e2y3gg\":1.58,\"1vcs4xs\":1.57,\"vu83y8\":1.56,\"14pv474\":1.55,\"57b37k\":1.54,\"1mh54ow\":1.53,\"myl3pc\":1.52,\"195ombk\":1.51,\"9n4lc0\":1.5,\"1qwymtc\":1.49,\"reelts\":1.48,\"10a1m2o\":1.47,\"rhl34\":1.46,\"1i1bmkg\":1.45,\"iirlkw\":1.44,\"1ftevi8\":1.43,\"gauuio\":1.42,\"1xkow00\":1.41,\"y24v0g\":1.4,\"16xrv9c\":1.39,\"7f7u9s\":1.38,\"1op1vr4\":1.37,\"p6hurk\":1.36,\"1bdldds\":1.35,\"bv1ce8\":1.34,\"1t4vdvk\":1.33,\"tmbcw0\":1.32,\"12hyd4w\":1.31,\"2zec5c\":1.3,\"1k98dmo\":1.29,\"kqocn4\":1.28,\"1efgwlc\":1.27,\"ewwvls\":1.26,\"1w6qx34\":1.25,\"wo6w3k\":1.24,\"15jtwcg\":1.23,\"619vcw\":1.22,\"1nb3wu8\":1.21,\"nsjvuo\":1.2,\"19znegw\":1.19,\"ah3dhc\":1.18,\"1rqxeyo\":1.17,\"s8ddz4\":1.16,\"1140e80\":1.15,\"1lgd8g\":1.14,\"1ivaeps\":1.13,\"jcqdq8\":1.12,\"1gndnnk\":1.11,\"h4tmo0\":1.1,\"1yeno5c\":1.09,\"yw3n5s\":1.08,\"17rqneo\":1.07,\"896mf4\":1.06,\"1pj0nwg\":1.05,\"q0gmww\":1.04,\"1c7k5j4\":1.03,\"cp04jk\":1.02,\"1tyu60w\":1.01,\"uga51c\":1,\"13bx5a8\":0.99,\"3td4ao\":0.98,\"1l375s0\":0.97,\"lkn4sg\":0.96,\"1dbij28\":0.95,\"dsyi2o\":0.94,\"1v2sjk0\":0.93,\"vk8ikg\":0.92,\"14fvitc\":0.91,\"4xbhts\":0.9,\"1m75jb4\":0.89,\"molibk\":0.88,\"18vp0xs\":0.87,\"9d4zy8\":0.86,\"1qmz1fk\":0.85,\"r4f0g0\":0.84,\"10020ow\":0.83,\"hhzpc\":0.82,\"1hrc16o\":0.81,\"i8s074\":0.8,\"1fjfa4g\":0.79,\"g0v94w\":0.78,\"1xapam8\":0.77,\"xs59mo\":0.76,\"16ns9vk\":0.75,\"7588w0\":0.74,\"1of2adc\":0.73,\"owi9ds\":0.72,\"1b3ls00\":0.71,\"bl1r0g\":0.7,\"1suvshs\":0.69,\"tcbri8\":0.68,\"127yrr4\":0.67,\"2peqrk\":0.66,\"1jz8s8w\":0.65,\"kgor9c\":0.64,\"1ezg3cw\":0.63,\"fgw2dc\":0.62,\"1wqq3uo\":0.61,\"x862v4\":0.6,\"163t340\":0.59,\"6l924g\":0.58,\"1nv33ls\":0.57,\"ocj2m8\":0.56,\"1ajml8g\":0.55,\"b12k8w\":0.54,\"1sawlq8\":0.53,\"ssckqo\":0.52,\"11nzkzk\":0.51,\"25fk00\":0.5,\"1jf9lhc\":0.49,\"jwpkhs\":0.48,\"1h7cuf4\":0.47,\"hostfk\":0.46,\"1yymuww\":0.45,\"zg2txc\":0.44,\"18bpu68\":0.43,\"8t5t6o\":0.42,\"1q2zuo0\":0.41,\"qkftog\":0.4,\"1crjcao\":0.39,\"d8zbb4\":0.38,\"1uitcsg\":0.37,\"v09bsw\":0.36,\"13vwc1s\":0.35,\"4dcb28\":0.34,\"1ln6cjk\":0.33,\"m4mbk0\":0.32,\"1dvhpts\":0.31,\"ecxou8\":0.3,\"1vmrqbk\":0.29,\"w47pc0\":0.28,\"14zupkw\":0.27,\"5haolc\":0.26,\"1mr4q2o\":0.25,\"n8kp34\":0.24,\"19fo7pc\":0.23,\"9x46ps\":0.22,\"1r6y874\":0.21,\"roe77k\":0.2,\"10k17gg\":0.19,\"11h6gw\":0.18,\"1ibb7y8\":0.17,\"isr6yo\":0.16,\"1g3egw0\":0.15,\"gkufwg\":0.14,\"1xuohds\":0.13,\"yc4ge8\":0.12,\"177rgn4\":0.11,\"7p7fnk\":0.1,\"1oz1h4w\":0.09,\"pghg5c\":0.08,\"1bnkyrk\":0.07,\"c50xs0\":0.06,\"1teuz9c\":0.05,\"tway9s\":0.04,\"12rxyio\":0.03,\"39dxj4\":0.02,\"1kj7z0g\":0.01,\"v_1f1xzpc\":9.75,\"v_ajl9ts\":9.5,\"v_1v5afwg\":9.25,\"v_tetnuo\":9,\"v_17k8ydc\":8.75,\"v_a0ao0\":8.5,\"v_1nnlekg\":8.25,\"v_lx4mio\":8,\"v_1bg39q8\":7.75,\"v_gsc4xs\":7.5,\"v_1qahjpc\":7.25,\"v_wvol4w\":7,\"v_13jeubk\":6.75,\"v_7cpxxc\":6.5,\"v_1issidc\":6.25,\"v_mm3lz4\":6,\"v_ozbe9s\":50,\"v_1ewy70g\":5.75,\"v_d6heyo\":5.5,\"v_1xs6l1c\":5.25,\"v_rtdzwg\":5,\"v_ut2vb4\":49,\"v_k4ii2o\":48,\"v_vi1urk\":47,\"v_ndvqbk\":46,\"v_r9q1og\":45,\"v_js10cg\":44,\"v_xigwsg\":43,\"v_q0rvgg\":42,\"v_twm6tc\":41,\"v_lp0ge8\":40,\"v_140w4qo\":4.75,\"v_2afcow\":4.5,\"v_1po0glc\":4.25,\"v_idrsw0\":4,\"v_x2jt34\":39,\"v_mdzfuo\":38,\"v_s7qww0\":37,\"v_is4pvk\":36,\"v_z2yv40\":35,\"v_otdvy8\":34,\"v_u85yww\":33,\"v_ksjrwg\":32,\"v_w634lc\":31,\"v_nvo9a8\":30,\"v_19unls0\":3.75,\"v_dnypds\":3.5,\"v_1spvzsw\":3.25,\"v_zb318g\":3,\"v_bo64g0\":29.5,\"v_qxjshs\":29,\"v_46h340\":28.5,\"v_j0vd34\":28,\"v_f511q8\":27.5,\"v_y09fr4\":27,\"v_4vg2kg\":26.5,\"v_qikef4\":26,\"v_a2qghs\":25.5,\"v_sxyuio\":25,\"v_n49hc\":24.5,\"v_lg9t6o\":24,\"v_hkfhts\":23.5,\"v_wetrsw\":23,\"v_6vv4lc\":22.5,\"v_mz7ksg\":22,\"v_cpmlmo\":21.5,\"v_ssz1ts\":21,\"v_3a0em8\":20.5,\"v_hsjny8\":20,\"v_10f1erk\":2.75,\"v_5ra9z4\":2.5,\"v_1kt7ke8\":2.25,\"v_omio00\":2,\"v_1a3e8zk\":19.75,\"v_dwpclc\":19.5,\"v_1symn0g\":19.25,\"v_ypuwao\":19,\"v_ztt9ts\":18.75,\"v_6f0b9c\":18.5,\"v_1lgxlog\":18.25,\"v_pa8pa8\":18,\"v_1gc543k\":17.75,\"v_91wge8\":17.5,\"v_1wfhkao\":17.25,\"v_up0s8w\":17,\"v_16wix34\":16.75,\"v_1k7f28\":16.5,\"v_1m5wl4w\":16.25,\"v_kfft34\":16,\"v_1cqae4g\":15.75,\"v_gjlhq8\":15.5,\"v_1rd6z28\":15.25,\"v_v6i2o0\":15,\"v_11u8buo\":14.75,\"v_8ffda8\":14.5,\"v_1hxks1s\":14.25,\"v_not1c0\":14,\"v_1d7rojk\":13.75,\"v_bhawhs\":13.5,\"v_1yuw0e8\":13.25,\"v_rkncow\":13,\"v_15b394w\":12.75,\"v_3kmh34\":12.5,\"v_1o6bn5s\":12.25,\"v_jnyxa8\":12,\"v_196xkhs\":11.75,\"v_ey5ts0\":11.5,\"v_1u03474\":11.25,\"v_xte7sw\":11,\"v_11p8j5s\":10.75,\"v_5ijmrk\":10.5,\"v_1kkgx6o\":10.25,\"v_pizchs\":10,\"v_1gxd91c\":1.75,\"v_9n4lc0\":1.5,\"v_1w6qx34\":1.25,\"v_uga51c\":1,\"v_16ns9vk\":0.75,\"v_25fk00\":0.5,\"v_1mr4q2o\":0.25}");

            /***/ }),
        /* 39 */
        /***/ (function(module, exports) {

// Module
            var code = "<power id=\"{{{adsPlaceholderWrapperID}}}\" class=\"adsPlaceholderWrapper\"> <power id=\"{{{adsPlacementWrapperID}}}\" class=\"adsPlacementWrapper {{{adsPlacementWrapper}}}\" {{{adsPlacementWrapperStyle}}}> <power style=\"background:unset!important;display:block\"> <div class=\"{{{topBtnAds}}}\"> <div id=\"{{{adsBtnCloseID}}}\" class=\"powerBtn\" title=\"Skip ad\" style=\"float:right;opacity:.8\"> <svg width=\"24\" viewBox=\"0 0 48 48\" fill=\"#5F6368\" style=\"fill:#5f6368!important\"> <path d=\"M38 12.83L35.17 10 24 21.17 12.83 10 10 12.83 21.17 24 10 35.17 12.83 38 24 26.83 35.17 38 38 35.17 26.83 24z\"> </path> <path d=\"M0 0h48v48H0z\" fill=\"none\"></path> </svg> </div> <div id=\"{{{adsByID}}}\" class=\"powerBtn\" style=\"margin:0 auto;display:block;padding-top:5px\"> <div class=\"text\" style=\"color:#5f6368;display:table-cell;vertical-align:middle;line-height:1!important\"> <a {{{titleStyle}}} href=\"{{{titleLink}}}\" target=\"_blank\" rel=\"nofollow\"> <power style=\"font-family:inherit!important;line-height:15px;font-weight:550;display:inline!important;padding-left:3px\"> Ad</power> </a> </div> </div> </div> </power> <power id=\"{{{adsContentWrapperID}}}\"> <power style=\"background:unset!important;display:block\" id=\"{{{adsContentID}}}\"></power> </power> </power> <power id=\"{{{adsFeedbackID}}}\" class=\"adsFeedback\"> <div class=\"pp-interstitial-survey pp-center\" {{{adsFeedbackStyle}}}> <div id=\"pp_interstitial_survey\"> <div class=\"pp-section-container\"> <div class=\"pp-survey-header\"><span>Feedback on this ad</span></div> <div id=\"pp_feedback_btns\" class=\"btn-section\"> <div class=\"itemfb\" data-reason-id=\"3\" data-reason=\"Already bought this\"> <span>Already bought this</span> </div> <div class=\"itemfb\" data-reason-id=\"2\" data-reason=\"Not interested in this ad\"> <span>Not interested in this</span> </div> <div class=\"itemfb\" data-reason-id=\"5\" data-reason=\"Ad with offensive content\"> <span>Ad with offensive content</span> </div> </div> </div> </div> <div id=\"confirmation-view\" style=\"display:none\"> <div class=\"pp-section-container\"> <div class=\"survey-confirmation-header\"><span>We'll try not to show that ad again</span></div> <div class=\"survey-confirmation-closing\"><span>Closing ad...</span></div> </div> </div> </div> </power> <style>.pubpower_show{visibility:visible;opacity:1}.pubpower_hidden{visibility:hidden;opacity:0;display:none!important}.adsPlaceholderWrapper{transition:opacity .25s ease-in-out 0s;position:fixed;z-index:2147483647;left:0;top:0;width:100%;height:100%;overflow:auto;backdrop-filter:blur(15px);flex:1 1 0%;background-color:rgba(52,58,65,.6)!important}.pubpower_hide{display:none!important}.powerBtn:focus{outline:0}.powerBtn{cursor:pointer;font-family:Arial,Helvetica,sans-serif!important;padding-bottom:15px;background:0 0;color:#fff}.powerBtn power{font-size:14px!important}.topBtnAds{padding:15px 10px;background-color:#333}.adsPlacementWrapper{display:block;box-sizing:initial!important;position:fixed;top:50%;left:50%;transform:translate(-50%,-50%)}.adsWrapperMobile{padding:0 px;border-radius:0;background-color:transparent;width:100%;height:100%}.adsWrapperDesktop{padding:12px 10px;border-radius:8px;background-color:#fff}.adsContent{background:unset!important;display:block;background-color:#111;position:fixed;box-shadow:0 10px 22px rgba(0,0,0,.65)}.adsContentVideo{left:50%;transform:translate(-50%,-50%)}.adsFeedback{display:none;padding:0;border-radius:0;width:100%;height:100%;background-color:#2929298f;position:fixed;top:50%;left:50%;transform:translate(-50%,-50%)}.pp-center{position:fixed;top:50%;left:50%;transform:translate(-50%,-50%)}.pp-survey-header span{font-size:1.25em;font-family:sans-serif;padding:0 24px;white-space:nowrap}.pp-interstitial-survey{display:block;font-size:16px;margin:10px auto;max-width:90%}.btn-section{padding:.8em 0}.pp-section-container{border-radius:3px;-moz-border-radius:3px;-webkit-border-radius:3px;background-color:#fff;margin-bottom:8px}.pp-survey-header{background-color:#4285f4;color:#fff;display:block;height:64px;line-height:64px;width:100%;border-top-left-radius:3px;-moz-border-top-left-radius:3px;-webkit-border-top-left-radius:3px;border-top-right-radius:3px;-moz-border-top-right-radius:3px;-webkit-border-top-right-radius:3px}.pp-interstitial-survey div{display:block;width:100%}.btn-section div,.survey-confirmation-closing,.survey-confirmation-header{cursor:pointer;box-sizing:border-box;display:block;padding:0 24px;width:100%}.btn-section div span,.survey-confirmation-closing span,.survey-confirmation-header span{display:inline-block;color:rgba(0,0,0,.54);font-family:sans-serif;font-size:1em;margin:14px 0;max-width:224px}@media only screen and (max-width:480px){.powerBtn{padding-bottom:6px;color:#fff;display:table!important}.powerBtn power{font-size:16px!important}.topBtnAds{padding:12px 10px;background-color:#333}}</style> </power>";
// Exports
            module.exports = code;

            /***/ }),
        /* 40 */
        /***/ (function(module, exports) {

// Module
            var code = "<power id=\"{{{adsPlaceholderWrapperID}}}\" class=\"power_stickybanner__wrapper {{{bannerPosition}}}\"> <power class=\"power_adsContent__wrapper\"> <power id=\"{{{adSlotIdWrapper}}}\" class=\"power_adscontent {{{classWrapperAd}}}\"></power> </power> <power class=\"{{{iconAndCloseWrapper}}}\"> {{{iconBrandAndCloseHtml}}} </power> <style>:root{--padding_bottom_mb_center:2px;--padding_btn_close:4px;--btn_close-height:20px}.power_hiden{display:none}.power_top{width:100%;top:0;padding-bottom:var(--padding_btn_close)}.power_bottom{width:100%;bottom:0;padding-bottom:var(--padding_bottom_mb_center);padding-top:var(--padding_btn_close)}.power_bottom_center{width:100%;bottom:0;padding-top:var(--padding_btn_close)}.power_top_center{width:100%;top:0;padding-bottom:var(--padding_btn_close)}.power_bottom_left{bottom:0;display:flex;justify-content:flex-start}.power_bottom_right{left:auto!important;bottom:0;right:0;display:flex;justify-content:flex-end}.power_stickybanner__wrapper{z-index:999999998!important;position:fixed;left:0;box-shadow:rgb(0 0 0 / 60%) 0 0 6px 0;background-color:#fafafa;transition:all 1s ease 0s;display:none}.power_adsContent__wrapper{display:flex;justify-content:center;align-items:center;flex-direction:column}.power_iconRp__wrapper{display:none;width:728px;height:90px;position:absolute;background-color:#fff}.power_adsclose_pc__wrapper{position:absolute;height:var(--btn_close-height)}.power_adsclose_top_center{bottom:0;right:0}.power_adsclose_top_center>.power_iconBrand_btnClose__wrapper div:first-child{display:none!important}.power_adsclose_top_center:before{content:\"\";position:absolute;top:0;left:-10px;border-bottom:20px solid rgba(0,0,0,.7);border-left:10px solid transparent}.power_adsclose_bottom_center{top:0;right:0}.power_adsclose_bottom_center>.power_iconBrand_btnClose__wrapper div:first-child{display:none!important}.power_adsclose_bottom_center:before{content:\"\";position:absolute;top:0;left:-10px;border-top:20px solid rgba(0,0,0,.7);border-left:10px solid transparent}.power_adsclose_bottom_left{top:calc(-1 *var(--btn_close-height))}.power_adsclose_bottom_left>.power_iconBrand_btnClose__wrapper div:last-child{display:none!important}.power_adsclose_bottom_left:before{content:\"\";position:absolute;top:0;right:-10px;border-right:10px solid transparent;border-bottom:20px solid rgba(0,0,0,.7)}.power_adsclose_bottom_right{top:calc(-1 *var(--btn_close-height));right:0}.power_adsclose_bottom_right>.power_iconBrand_btnClose__wrapper div:first-child{display:none!important}.power_adsclose_bottom_right:before{content:\"\";position:absolute;top:0;left:-10px;border-top:20px solid transparent;border-right:10px solid rgba(0,0,0,.7)}.power_iconBrand_btnClose__wrapper{padding:2px;height:100%;box-sizing:border-box;display:flex;justify-content:center;align-items:center;background-color:rgba(0,0,0,.7)}.power_iconBrand_btnClose__wrapper a{width:80px;margin-right:5px}.power_adsclose_mobile__wrapper{position:absolute;width:100%}.power_adsclose_mobile_wrapper_top{bottom:0}.power_adsclose_mobile_wrapper_top .power_line{box-shadow:rgba(0,0,0,.2) 0 1px 2px 1px,rgba(0,0,0,.1) 0 -1px 0 -1px!important}.power_adsclose_mobile_wrapper_bottom{top:0}.power_adsclose_mobile_wrapper_bottom .power_line{box-shadow:rgba(0,0,0,.2) 0 1px 2px -1px,rgba(0,0,0,.1) 0 -1px 0 -1px!important}.power_line{background-color:#fafafa!important;width:100%;position:absolute;height:var(--padding_btn_close)}.power_line_top{bottom:0;box-shadow:rgba(0,0,0,.2) 0 1px 2px 1px,rgba(0,0,0,.1) 0 -1px 0 -1px!important}.power_adsclose{width:60px;height:20px;position:absolute;text-align:center;box-shadow:2px 0 1px -1px #d8d8d8;background-color:#fafafa!important}.power_adsclose_top{bottom:-20px;border-bottom:1px solid #d4d4d4;border-bottom-right-radius:5px;border-bottom-left-radius:5px}.power_adsclose_top polygon:last-child{display:none!important}.power_adsclose_bottom{top:-20px;border-top:1px solid #d4d4d4;border-top-right-radius:5px;border-top-left-radius:5px}.power_adsclose_bottom polygon:first-child{display:none!important}@media screen and (max-width:768px){.power_line{height:5px}.power_adsclose{width:unset;height:unset;position:absolute;text-align:center;box-shadow:2px 0 1px -1px #d8d8d8;background-color:#fafafa!important}.power_adsclose_bottom{top:0}.power_adsclose_top{bottom:0}}@media screen and (min-width:769px){.power_adsclose_bottom{top:-2px;right:0}.power_adsclose_bottom:before{content:\"\";position:absolute;top:0;left:-10px;border-top:20px solid rgba(0,0,0,.7);border-left:10px solid transparent}.power_adsclose_top{bottom:-2px;right:0}.power_adsclose_top:before{content:\"\";position:absolute;top:0;left:-10px;border-bottom:20px solid rgba(0,0,0,.7);border-left:10px solid transparent}.power_adsclose_mobile__wrapper{width:auto}}</style> </power>";
// Exports
            module.exports = code;

            /***/ }),
        /* 41 */
        /***/ (function(module, exports) {

// Module
            var code = "<power class=\"power_iconBrand_btnClose__wrapper\"> <power id=\"{{{adsBtnCloseID}}}\" class=\"{{{hideBtnClose}}}\" style=\"margin:3px;width:10px;cursor:pointer\"> <svg viewBox=\"0 0 92.132 92.132\"> <path class=\"active-path\" d=\"m2.141 89.13c1.425 1.429 3.299 2.142 5.167 2.142 1.869 0 3.742-0.713 5.167-2.142l33.591-33.592 33.591 33.592c1.426 1.429 3.299 2.142 5.167 2.142 1.867 0 3.74-0.713 5.167-2.142 2.854-2.854 2.854-7.48 0-10.334l-33.593-33.591 31.869-31.869c2.855-2.853 2.855-7.481 0-10.334-2.853-2.855-7.479-2.855-10.334 0l-31.868 31.868-31.867-31.869c-2.854-2.855-7.481-2.855-10.333 0-2.855 2.853-2.855 7.481 0 10.334l31.868 31.869-33.59 33.591c-2.857 2.853-2.857 7.479-2e-3 10.335z\" fill=\"#fff\" data-old_color=\"#ffffff\" data-original=\"#000000\"></path> </svg> </power> </power>";
// Exports
            module.exports = code;

            /***/ }),
        /* 42 */
        /***/ (function(module, exports) {

// Module
            var code = "<power class=\"power_line {{{linePosition}}} {{{hideBtnClose}}}\"></power> <power id=\"{{{adsBtnCloseID}}}\" class=\"power_adsclose {{{btnClosePosition}}} {{{hideBtnClose}}}\"> {{{butttonArrowContent}}} </power>";
// Exports
            module.exports = code;

            /***/ }),
        /* 43 */
        /***/ (function(module, exports) {

// Module
            var code = "<svg style=\"margin:0!important;position:absolute!important;bottom:-4px!important;left:0!important;display:block!important;width:80px!important;height:30px!important;transform:none!important;pointer-events:initial!important\"> <defs> <filter id=\"ppdropShadowTop\" filterUnits=\"userSpaceOnUse\" color-interpolation-filters=\"sRGB\"> <feComponentTransfer in=\"SourceAlpha\" result=\"TransferredAlpha\"> <feFuncR type=\"discrete\" tableValues=\"0.5\"></feFuncR> <feFuncG type=\"discrete\" tableValues=\"0.5\"></feFuncG> <feFuncB type=\"discrete\" tableValues=\"0.5\"></feFuncB> </feComponentTransfer> <feGaussianBlur in=\"TransferredAlpha\" stdDeviation=\"2\"></feGaussianBlur> <feOffset dx=\"0\" dy=\"0\" result=\"offsetblur\"></feOffset> <feMerge> <feMergeNode></feMergeNode> <feMergeNode in=\"SourceGraphic\"></feMergeNode> </feMerge> </filter> </defs> <path d=\"M0,26 L0,6 A6,6 0 0,1 6,1 L50,1 A6,6 0 0,1 56,6 L56,20 A6,6 0 0,0 62,26 Z\" stroke=\"#FAFAFA\" stroke-width=\"1\" fill=\"#FAFAFA\" style=\"filter:url(&quot;#ppdropShadowTop&quot;)\"></path> <rect x=\"0\" y=\"25\" width=\"80\" height=\"5\" style=\"fill:#fafafa\"></rect> <g class=\"down\" stroke=\"#616161\" stroke-width=\"2px\" stroke-linecap=\"square\"> <line x1=\"22\" y1=\"12\" x2=\"28\" y2=\"18\"></line> <line x1=\"28\" y1=\"18\" x2=\"34\" y2=\"12\"></line> </g> </svg>";
// Exports
            module.exports = code;

            /***/ }),
        /* 44 */
        /***/ (function(module, exports) {

// Module
            var code = "<svg style=\"margin:0!important;position:absolute!important;top:-4px!important;left:0!important;display:block!important;width:80px!important;height:30px!important;transform:none!important;pointer-events:initial!important\"> <defs> <filter id=\"ppdropShadowBottom\" filterUnits=\"userSpaceOnUse\" color-interpolation-filters=\"sRGB\"> <feComponentTransfer in=\"SourceAlpha\" result=\"TransferredAlpha\"> <feFuncR type=\"discrete\" tableValues=\"0.5\"></feFuncR> <feFuncG type=\"discrete\" tableValues=\"0.5\"></feFuncG> <feFuncB type=\"discrete\" tableValues=\"0.5\"></feFuncB> </feComponentTransfer> <feGaussianBlur in=\"TransferredAlpha\" stdDeviation=\"2\"></feGaussianBlur> <feOffset dx=\"0\" dy=\"0\" result=\"offsetblur\"></feOffset> <feMerge> <feMergeNode></feMergeNode> <feMergeNode in=\"SourceGraphic\"></feMergeNode> </feMerge> </filter> </defs> <path d=\"M0,4 L0,22 A6,6 0 0,0 6,28 L50,28 A6,6 0 0,0 56,22 L56,10 A6,6 0 0,1 61,4 Z\" stroke=\"#FAFAFA\" stroke-width=\"1\" fill=\"#FAFAFA\" style=\"filter:url(&quot;#ppdropShadowBottom&quot;)\"></path> <rect x=\"0\" y=\"0\" width=\"80\" height=\"5\" style=\"fill:#fafafa\"></rect> <g class=\"up\" stroke=\"#616161\" stroke-width=\"2px\" stroke-linecap=\"square\"> <line x1=\"22\" y1=\"18\" x2=\"28\" y2=\"12\"></line> <line x1=\"28\" y1=\"12\" x2=\"34\" y2=\"18\"></line> </g> </svg>";
// Exports
            module.exports = code;

            /***/ }),
        /* 45 */
        /***/ (function(module, exports, __webpack_require__) {

            exports = module.exports = __webpack_require__(7)();
            exports.push([module.i, ":root {\r\n    /* Video */\r\n    --power-floating-btn-size: 20px;\r\n    --power-floating-width: 350px;\r\n    --power-top-bot: 20px;\r\n    --power-left-right: 20px;\r\n    --power-font-family: Roboto;\r\n    --power-playerskin67-columns: 130px;\r\n\r\n    /* playerSkin */\r\n    --power-controls-color: #ffc107;\r\n    --power-background-color: rgba(255, 255, 255, 1);\r\n    --power-title-color: rgba(255, 255, 255, 1);\r\n    --power-title-background-color: rgba(0, 0, 0, 0);\r\n    --power-description-color: rgba(255, 255, 255, 1);\r\n}\r\n\r\n/* Use in All Skin */\r\n.left-coner {\r\n    left: 0;\r\n    cursor: pointer;\r\n}\r\n\r\n.right-coner {\r\n    right: 0;\r\n    cursor: pointer;\r\n}\r\n\r\n.power-active {\r\n    opacity: 1 !important;\r\n    height: auto !important;\r\n}\r\n\r\n.power-deactive {\r\n    opacity: 0 !important;\r\n    height: 0px !important;\r\n}\r\n\r\n.power-show {\r\n    opacity: 1 !important;\r\n}\r\n\r\n.power-hide {\r\n    opacity: 0 !important;\r\n}\r\n\r\n.power-hidden {\r\n    display: none !important;\r\n    opacity: 0 !important;\r\n}\r\n\r\n.power-div-center {\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\n.power-video-placeholder {\r\n    position: relative;\r\n    overflow: hidden;\r\n    width: 100%;\r\n    min-width: 300px !important;\r\n    padding-top: 56.25%;\r\n    /* 16:9 Aspect Ratio (divide 9 by 16 = 0.5625) */\r\n}\r\n\r\n.power-video-container button {\r\n    background-color: transparent;\r\n    border-color: transparent;\r\n    width: inherit;\r\n    height: inherit;\r\n}\r\n\r\n.video-source {\r\n    width: 100%;\r\n    height: auto !important;\r\n    /* height: 100%; */\r\n}\r\n\r\n.video-controller {\r\n    opacity: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    position: absolute;\r\n    display: inline-block;\r\n    top: 0px;\r\n    left: 0px;\r\n    transition: 0.5s;\r\n}\r\n\r\n.powerVideoControls:hover {\r\n    opacity: 1;\r\n}\r\n\r\n.power-svg {\r\n    width: 100%;\r\n    height: 100%;\r\n    pointer-events: none;\r\n}\r\n\r\n.title-video-wapper:hover div {\r\n    color: var(--power-controls-color);\r\n}\r\n\r\n.title-video-wapper:hover svg path {\r\n    fill: var(--power-controls-color);\r\n}\r\n\r\nbutton:hover svg path {\r\n    fill: var(--power-controls-color);\r\n}\r\n\r\n/* IMG Logo */\r\n.img-logo {\r\n    position: absolute;\r\n    top: 15px;\r\n    left: 20px;\r\n    opacity: 0.5;\r\n    z-index: 1;\r\n}\r\n\r\n/* Ads Layer */\r\n.ads-wapper {\r\n    display: block;\r\n    opacity: 1;\r\n    overflow: hidden;\r\n    position: absolute;\r\n    left: 0px;\r\n    top: 0px;\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n.ads-cover {\r\n    position: absolute;\r\n    top: 0px;\r\n    left: 0px;\r\n    /* z-index: 100; */\r\n    cursor: pointer;\r\n    width: 100%;\r\n    height: 100%;\r\n    display: none;\r\n    visibility: visible;\r\n    user-select: none;\r\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n    pointer-events: auto;\r\n}\r\n\r\n.ads-transparent-cover {\r\n    cursor: pointer;\r\n    width: 100%;\r\n    height: 100%;\r\n    visibility: visible;\r\n    user-select: none;\r\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n    pointer-events: auto;\r\n}\r\n\r\n.ads-transparent-inner {\r\n    cursor: pointer;\r\n    visibility: inherit;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: linear-gradient(black, transparent, transparent, black);\r\n    opacity: 0.7;\r\n    user-select: none;\r\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n    pointer-events: auto;\r\n}\r\n\r\n.video-cover {\r\n    opacity: 1;\r\n    display: block;\r\n    width: 100%;\r\n    height: 100%;\r\n    /* visibility: visible; */\r\n    user-select: none;\r\n    pointer-events: auto;\r\n    /* visibility: inherit; */\r\n    background-color: rgba(0, 0, 0, 0.4);\r\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n}\r\n\r\n.video-preload-wapper {\r\n    width: 100%;\r\n    height: 100%;\r\n    position: absolute;\r\n    display: none;\r\n    /* z-index: 4; */\r\n    top: 0px;\r\n    left: 0px;\r\n    cursor: pointer;\r\n    background: black;\r\n}\r\n\r\n.video-preload {\r\n    width: 58px;\r\n    height: 58px;\r\n    top: 50%;\r\n    left: 50%;\r\n    fill: none;\r\n    stroke: white;\r\n    stroke-width: 4;\r\n    stroke-dasharray: 400;\r\n    stroke-dashoffset: -46.5;\r\n    position: absolute;\r\n    display: block;\r\n    transform: translate(-50%, -50%) rotate(93deg);\r\n}\r\n\r\n.power-video-iframe {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    top: 0;\r\n    left: 0;\r\n    bottom: 0;\r\n    right: 0;\r\n}\r\n\r\n/* Top Left Video */\r\n.top-left-video {\r\n    top: 0px;\r\n    left: 0px;\r\n    width: calc(100% - 120px);\r\n    position: absolute;\r\n}\r\n\r\n.title-video-wapper {\r\n    top: 15px;\r\n    left: 20px;\r\n    width: 100%;\r\n    font-family: var(--power-font-family);\r\n    font-size: 18px;\r\n    color: white;\r\n    position: absolute;\r\n    display: inline-flex;\r\n}\r\n\r\n.title-video-wapper-under650 {\r\n    font-size: 14px;\r\n}\r\n\r\n.title-video {\r\n    background-color: var(--power-title-background-color);\r\n    padding-right: 15px;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    cursor: pointer;\r\n}\r\n\r\n.title-icon {\r\n    pointer-events: auto;\r\n    margin-left: -18px;\r\n    width: 14px;\r\n    min-width: 14px;\r\n    height: 14px;\r\n    padding-right: 5px;\r\n    transform: scale(-1, 1);\r\n    margin-top: 3px;\r\n    /* user-select: none;\r\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0); */\r\n}\r\n\r\n/* View Info */\r\n.view-info-wapper {\r\n    top: 41px;\r\n    left: 20px;\r\n    position: absolute;\r\n}\r\n\r\n.view-info-icon {\r\n    position: relative;\r\n    width: 21px;\r\n    height: 19px;\r\n    pointer-events: none;\r\n    color: white;\r\n    float: left;\r\n    user-select: none;\r\n    bottom: 1px;\r\n}\r\n\r\n.view-info-icon-under650 {\r\n    width: 21px;\r\n    height: 16px;\r\n}\r\n\r\n.view-info-num {\r\n    position: relative;\r\n    width: max-content;\r\n    height: 20px;\r\n    pointer-events: none;\r\n    color: white;\r\n    float: left;\r\n    user-select: none;\r\n    font-size: 14px;\r\n    left: 2px;\r\n}\r\n\r\n.view-info-num {\r\n    font-size: 13px;\r\n}\r\n\r\n.view-like-icon {\r\n    position: relative;\r\n    width: 16px;\r\n    height: 16px;\r\n    cursor: pointer;\r\n\r\n    float: left;\r\n    left: 10px;\r\n    user-select: none;\r\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n    pointer-events: auto;\r\n    bottom: 1px;\r\n}\r\n\r\n.view-like-icon-under650 {\r\n    width: 14px;\r\n    height: 14px;\r\n}\r\n\r\n.view-like-num {\r\n    display: none;\r\n    position: relative;\r\n    position: relative;\r\n    width: max-content;\r\n    height: 20px;\r\n    pointer-events: none;\r\n    color: white;\r\n    float: left;\r\n    user-select: none;\r\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n    font-size: 14px;\r\n    left: 12px;\r\n}\r\n\r\n/* Top Right Video */\r\n.top-right-video {\r\n    top: 0px;\r\n    right: 0px;\r\n    position: absolute;\r\n    user-select: none;\r\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n    pointer-events: auto;\r\n    visibility: visible;\r\n}\r\n\r\n/* Logo */\r\n.logo-wrapper {\r\n    display: block;\r\n    transform: scale(1.5);\r\n}\r\n\r\n.logo-wrapper-under650 {\r\n    display: block;\r\n    transform: scale(1.1);\r\n}\r\n\r\n.ads-logo {\r\n    top: 10px;\r\n    right: 8px;\r\n    /* width: 60px; */\r\n    position: absolute;\r\n    opacity: 1;\r\n    user-select: none;\r\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n    pointer-events: auto;\r\n    display: inline-block;\r\n    transition: 0.5s;\r\n    cursor: pointer;\r\n}\r\n\r\n.ads-logo-text-wrap {\r\n    opacity: 0;\r\n    overflow: hidden;\r\n    margin-right: 5px;\r\n    position: relative;\r\n    height: 15px;\r\n    transition: 0.7s;\r\n}\r\n\r\n/* .powerVideoControls:hover>.top-right-video>.logo-wrapper>.ads-logo {\r\n    width: 60px;\r\n} */\r\n\r\n.powerVideoControls:hover>.top-right-video>.logo-wrapper>.ads-logo>.ads-logo-text-wrap {\r\n    opacity: 1;\r\n}\r\n\r\n/* .ads-logo-active>.top-right-video>.logo-wrapper>.ads-logo {\r\n    width: 60px;\r\n} */\r\n\r\n.ads-logo-active>.top-right-video>.logo-wrapper>.ads-logo>.ads-logo-text-wrap {\r\n    opacity: 1;\r\n}\r\n\r\n.ads-logo-text {\r\n    height: 15px;\r\n    width: 37px;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n}\r\n\r\n/* Share */\r\n.share-wapper {\r\n    top: 38px;\r\n    right: 8px;\r\n    position: absolute;\r\n    opacity: 1;\r\n    user-select: none;\r\n    pointer-events: auto;\r\n}\r\n\r\n.share-wapper-bg {\r\n    top: 0px;\r\n    right: 0px;\r\n    width: 322px;\r\n    height: 40px;\r\n    opacity: 0;\r\n    object-fit: contain;\r\n    border-radius: 5px;\r\n    background-color: rgb(12, 12, 12);\r\n    position: absolute;\r\n    user-select: none;\r\n    pointer-events: auto;\r\n    transition: 0.3s;\r\n}\r\n\r\n.share-wapper-bg-under650 {\r\n    width: 220px;\r\n    height: 34px;\r\n}\r\n\r\n.share-wapper:hover>.share-wapper-bg {\r\n    opacity: 0.7;\r\n}\r\n\r\n.share-wapper:hover>#powerShareBtnAnim {\r\n    opacity: 1;\r\n}\r\n\r\n.share-group {\r\n    top: 8px;\r\n    width: 20px;\r\n    height: 20px;\r\n    position: absolute;\r\n    user-select: none;\r\n    pointer-events: auto;\r\n}\r\n\r\n.share-group-under650 {\r\n    width: 16px;\r\n    height: 16px;\r\n}\r\n\r\n.share-share {\r\n    right: 10px;\r\n    left: -36px;\r\n}\r\n\r\n.share-fb {\r\n    right: 56px;\r\n    opacity: 0;\r\n    transition: 0.6s;\r\n}\r\n\r\n.share-twitter {\r\n    right: 102px;\r\n    opacity: 0;\r\n    transition: 0.62s;\r\n}\r\n\r\n.share-linkedin {\r\n    right: 148px;\r\n    opacity: 0;\r\n    transition: 0.63s;\r\n}\r\n\r\n.share-pinterest {\r\n    right: 194px;\r\n    opacity: 0;\r\n    transition: 0.64s;\r\n}\r\n\r\n.share-whatsapp {\r\n    right: 240px;\r\n    opacity: 0;\r\n    transition: 0.65s;\r\n}\r\n\r\n.share-email {\r\n    right: 286px;\r\n    opacity: 0;\r\n    transition: 0.66s;\r\n}\r\n\r\n/* Center Video */\r\n.center-video-wapper {\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    position: absolute;\r\n    opacity: 1;\r\n    visibility: visible;\r\n    user-select: none;\r\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n    pointer-events: auto;\r\n    display: block;\r\n}\r\n\r\n.play-pause-btn {\r\n    width: 60px;\r\n    height: 60px;\r\n    position: absolute;\r\n    top: 0px;\r\n    left: 0px;\r\n    transform: translate(-50%, -50%);\r\n}\r\n\r\n.play-pause-btn button {\r\n    cursor: pointer;\r\n    padding: 0;\r\n}\r\n\r\n.play-pause-btn-under650 {\r\n    width: 40px;\r\n    height: 40px;\r\n}\r\n\r\n/* Back Next BTN */\r\n.back-next-btn-group {\r\n    width: 25px;\r\n    height: 25px;\r\n    top: 50%;\r\n    position: absolute;\r\n}\r\n\r\n.back-btn-wapper {\r\n    transform: translate(-80%, -50%);\r\n    right: 22px;\r\n}\r\n\r\n.next-btn-wapper {\r\n    transform: translate(80%, -50%);\r\n    left: 22px;\r\n}\r\n\r\n.back-btn-wapper-under650 {\r\n    right: 16px;\r\n    width: 18px;\r\n    height: 18px;\r\n}\r\n\r\n.next-btn-wapper-under650 {\r\n    /* top: -2px; */\r\n    left: 16px;\r\n    width: 18px;\r\n    height: 18px;\r\n}\r\n\r\n.back-btn-size {\r\n    top: 50%;\r\n    left: 50%;\r\n    display: block;\r\n    position: relative;\r\n}\r\n\r\n.back-btn-size button {\r\n    cursor: pointer;\r\n    padding: 0;\r\n}\r\n\r\n.back-btn {\r\n    transform: translate(-50%, -50%);\r\n}\r\n\r\n.next-btn {\r\n    transform: scale(-1) translate(50%, 50%);\r\n}\r\n\r\n/* Bottom Video */\r\n.bottom-video-wapper {\r\n    width: 100%;\r\n    bottom: 0px;\r\n    left: 0px;\r\n    position: absolute;\r\n    opacity: 1;\r\n    visibility: visible;\r\n    user-select: none;\r\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n    pointer-events: auto;\r\n    display: block;\r\n}\r\n\r\n/* Process Bar */\r\n.load-bar {\r\n    bottom: 6px;\r\n    width: 26%;\r\n    height: 5px;\r\n    background-color: rgba(0, 210, 255, 0.4);\r\n\r\n    left: 0px;\r\n    position: absolute;\r\n    user-select: none;\r\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n    pointer-events: auto;\r\n}\r\n\r\n/* Video process */\r\n.video-progress {\r\n    display: block;\r\n    position: relative;\r\n    bottom: 31px;\r\n    text-align: left;\r\n    /* margin-left: 12px;\r\n    margin-right: 12px; */\r\n}\r\n\r\n.video-progress progress {\r\n    -webkit-appearance: none;\r\n    -moz-appearance: none;\r\n    appearance: none;\r\n    border-radius: 2px;\r\n    width: 100%;\r\n    height: 5px;\r\n    pointer-events: none;\r\n    position: absolute;\r\n    top: 0;\r\n}\r\n\r\n.video-progress-under650 progress {\r\n    height: 4px;\r\n}\r\n\r\n.video-progress progress .video-progress progress::-webkit-progress-bar {\r\n    background-color: #474545;\r\n    border-radius: 2px;\r\n}\r\n\r\n.video-progress progress::-webkit-progress-value {\r\n    background: var(--power-controls-color);\r\n    border-radius: 2px;\r\n}\r\n\r\n.video-progress progress::-moz-progress-bar {\r\n    border: 1px solid var(--power-controls-color);\r\n    background: var(--power-controls-color);\r\n}\r\n\r\n.progress-load-bar {\r\n    width: 50%;\r\n    height: 5px;\r\n    left: 0px;\r\n    background-color: rgba(0, 210, 255, 0.4);\r\n    position: absolute;\r\n    pointer-events: auto;\r\n}\r\n\r\n.video-progress input[type=\"range\"] {\r\n    -webkit-appearance: none;\r\n    -moz-appearance: none;\r\n    height: 5px;\r\n    background-color: transparent;\r\n    cursor: pointer;\r\n}\r\n\r\n.video-progress-under650 input[type=\"range\"] {\r\n    height: 4px;\r\n}\r\n\r\n.video-progress input[type=\"range\"]:focus {\r\n    outline: none;\r\n}\r\n\r\n.video-progress input[type=\"range\"]::-webkit-slider-runnable-track {\r\n    -webkit-appearance: none;\r\n    width: 100%;\r\n    cursor: pointer;\r\n    border-radius: 1.3px;\r\n    transition: 0.4s ease;\r\n}\r\n\r\n.video-progress input[type=\"range\"]::-webkit-slider-thumb {\r\n    -webkit-appearance: none;\r\n    width: 12px;\r\n    height: 12px;\r\n    border-radius: 12px;\r\n    background: var(--power-controls-color);\r\n    cursor: pointer;\r\n    margin-left: -1px;\r\n}\r\n\r\n.video-progress-under650 input[type=\"range\"]::-webkit-slider-thumb {\r\n    width: 9px;\r\n    height: 9px;\r\n}\r\n\r\n.video-progress input[type=\"range\"]:focus::-webkit-slider-runnable-track {\r\n    background: transparent;\r\n}\r\n\r\n.video-progress input[type=\"range\"]::-moz-range-track {\r\n    width: 100%;\r\n    height: 8.4px;\r\n    cursor: pointer;\r\n    border: 1px solid transparent;\r\n    background: transparent;\r\n    border-radius: 1.3px;\r\n}\r\n\r\n.video-progress input[type=\"range\"]::-moz-range-thumb {\r\n    height: 12px;\r\n    width: 12px;\r\n    border-radius: 50px;\r\n    border: 1px solid var(--power-controls-color);\r\n    background: var(--power-controls-color);\r\n    cursor: pointer;\r\n    margin-top: 5px;\r\n}\r\n\r\n.video-progress input[type=\"range\"]:focus::-moz-range-track {\r\n    outline: none;\r\n}\r\n\r\n.seek {\r\n    position: absolute;\r\n    top: 0;\r\n    width: 100%;\r\n    cursor: pointer;\r\n    margin: 0;\r\n}\r\n\r\n.seek:hover+.seek-tooltip {\r\n    display: block;\r\n}\r\n\r\n.seek-tooltip {\r\n    display: none;\r\n    position: absolute;\r\n    top: -50px;\r\n    margin-left: -20px;\r\n    font-size: 12px;\r\n    padding: 3px;\r\n    content: attr(data-title);\r\n    font-weight: bold;\r\n    color: #fff;\r\n    background-color: rgba(0, 0, 0, 0.6);\r\n}\r\n\r\n/* Fullscreen */\r\n.fullscreen-btn {\r\n    width: 20px;\r\n    height: 20px;\r\n    bottom: 14px;\r\n    right: 14px;\r\n    position: absolute;\r\n    user-select: none;\r\n    pointer-events: auto;\r\n}\r\n\r\n.fullscreen-btn button {\r\n    cursor: pointer;\r\n    padding: 0;\r\n}\r\n\r\n.fullscreen-icon {\r\n    width: 20px;\r\n    height: 20px;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -57%);\r\n    display: block;\r\n    position: relative;\r\n    user-select: none;\r\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n    pointer-events: auto;\r\n}\r\n\r\n.fullscreen-icon-under650 {\r\n    width: 16px;\r\n    height: 16px;\r\n    display: block;\r\n}\r\n\r\n/* Sound Controll */\r\n.sound-controll {\r\n    width: 22px;\r\n    height: 22px;\r\n    bottom: 23px;\r\n    right: 50px;\r\n    position: absolute;\r\n    cursor: pointer;\r\n    user-select: none;\r\n    pointer-events: auto;\r\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n}\r\n\r\n.sound-scrabber-wapper {\r\n    opacity: 0;\r\n    position: absolute;\r\n    right: 0px;\r\n    bottom: 0px;\r\n    transform: translate(0px, 50%);\r\n    display: block;\r\n    user-select: none;\r\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n    pointer-events: auto;\r\n    transition: 0.5s;\r\n}\r\n\r\n.sound-controll:hover>.sound-scrabber-wapper {\r\n    opacity: 1;\r\n}\r\n\r\n.sound-scrabber-bg {\r\n    width: 174px;\r\n    height: 40px;\r\n    opacity: 0.72;\r\n    border-radius: 5px;\r\n    background-color: rgb(12, 12, 12);\r\n    position: absolute;\r\n    right: -8px;\r\n    bottom: 0px;\r\n    transform: translate(0px, 50%);\r\n    user-select: none;\r\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n    pointer-events: auto;\r\n}\r\n\r\n.sound-scrabber-bg-under650 {\r\n    right: -14px;\r\n    bottom: -1px;\r\n    width: 102px;\r\n    height: 27px;\r\n}\r\n\r\n.sound-scrabber-hit-wapper {\r\n    width: 120px;\r\n    /* height: 17px; */\r\n    bottom: 1px;\r\n    right: 32px;\r\n    display: flex;\r\n    position: absolute;\r\n    transform: translate(0px, 50%);\r\n    cursor: pointer;\r\n    user-select: none;\r\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n    pointer-events: auto;\r\n}\r\n\r\n.sound-scrabber-hit-wapper-under650 {\r\n    right: 14px;\r\n    bottom: -1px;\r\n    width: 65px;\r\n}\r\n\r\n.sound-scrabber-hit-wapper progress {\r\n    -webkit-appearance: none;\r\n    -moz-appearance: none;\r\n    appearance: none;\r\n    border-radius: 2px;\r\n    width: 100%;\r\n    height: 4px;\r\n    pointer-events: none;\r\n    position: absolute;\r\n    top: 0;\r\n}\r\n\r\n/* base process bar color */\r\n.sound-scrabber-hit-wapper progress::-webkit-progress-bar {\r\n    background-color: #474545;\r\n    border-radius: 2px;\r\n}\r\n\r\n/* main process bar color */\r\n.sound-scrabber-hit-wapper progress::-webkit-progress-value {\r\n    background: white;\r\n    border-radius: 2px;\r\n}\r\n\r\n.sound-scrabber-hit-wapper progress::-moz-progress-bar {\r\n    border: 1px solid transparent;\r\n    background: transparent;\r\n}\r\n\r\n.sound-scrabber-hit-wapper input[type=\"range\"] {\r\n    -webkit-appearance: none;\r\n    -moz-appearance: none;\r\n    width: 100%;\r\n    height: 4px;\r\n    background: transparent;\r\n    cursor: pointer;\r\n}\r\n\r\n.sound-scrabber-hit-wapper input[type=\"range\"]:focus {\r\n    outline: none;\r\n}\r\n\r\n.sound-scrabber-hit-wapper input[type=\"range\"]::-webkit-slider-runnable-track {\r\n    width: 100%;\r\n    cursor: pointer;\r\n    border-radius: 1.3px;\r\n    -webkit-appearance: none;\r\n    transition: 0.4s ease;\r\n}\r\n\r\n.sound-scrabber-hit-wapper input[type=\"range\"]::-webkit-slider-thumb {\r\n    width: 10px;\r\n    height: 10px;\r\n    border-radius: 12px;\r\n    background: transparent;\r\n    cursor: pointer;\r\n    -webkit-appearance: none;\r\n    margin-left: -1px;\r\n}\r\n\r\n.sound-scrabber-hit-wapper input[type=\"range\"]:focus::-webkit-slider-runnable-track {\r\n    background: transparent;\r\n}\r\n\r\n.sound-scrabber-hit-wapper input[type=\"range\"]::-moz-range-track {\r\n    width: 100%;\r\n    height: 8.4px;\r\n    cursor: pointer;\r\n    border: 1px solid transparent;\r\n    background: transparent;\r\n    border-radius: 1.3px;\r\n}\r\n\r\n.sound-scrabber-hit-wapper input[type=\"range\"]::-moz-range-thumb {\r\n    height: 12px;\r\n    width: 12px;\r\n    border-radius: 50px;\r\n    border: 1px solid var(--power-controls-color);\r\n    background: var(--power-controls-color);\r\n    cursor: pointer;\r\n    margin-top: 5px;\r\n}\r\n\r\n.sound-scrabber-hit-wapper input[type=\"range\"]:focus::-moz-range-track {\r\n    outline: none;\r\n}\r\n\r\n/* Sound btn */\r\n.sound-btn {\r\n    width: 22px;\r\n    height: 22px;\r\n    bottom: 3px;\r\n    right: 0px;\r\n    position: absolute;\r\n    transform: translate(0px, 50%);\r\n    display: block;\r\n}\r\n\r\n.sound-btn button {\r\n    cursor: pointer;\r\n    padding: 0;\r\n}\r\n\r\n.sound-btn-under650 {\r\n    bottom: 1px;\r\n    right: -8px;\r\n    width: 16px;\r\n    height: 16px;\r\n}\r\n\r\n/* Progress-txt */\r\n.progress-txt {\r\n    pointer-events: auto;\r\n    bottom: 14px;\r\n    left: 19px;\r\n    position: absolute;\r\n    font-size: 14px;\r\n    font-family: var(--power-font-family);\r\n    color: rgb(255, 255, 255);\r\n    user-select: none;\r\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n}\r\n\r\n.progress-txt-under650 {\r\n    font-size: 11px;\r\n}\r\n\r\n/* Skip sec */\r\n.skipxsec-wapper {\r\n    width: 110px;\r\n    height: 21px;\r\n    position: relative;\r\n    bottom: 14px;\r\n    /* left: 50%;\r\n    transform: translateX(-50%); */\r\n    user-select: none;\r\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n    pointer-events: auto;\r\n    display: block;\r\n    margin: 0 auto;\r\n}\r\n\r\n.skipxsec-wapper button {\r\n    cursor: pointer;\r\n    padding: 0;\r\n}\r\n\r\n.skipxsec-btn {\r\n    width: 21px;\r\n    height: 21px;\r\n    bottom: -1px;\r\n    position: absolute;\r\n    user-select: none;\r\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n    pointer-events: auto;\r\n}\r\n\r\n.skipxsec-back-btn {\r\n    left: 0px;\r\n}\r\n\r\n.skipxsec-back-btn-under650 {\r\n    left: 15px;\r\n    bottom: 2px;\r\n    width: 16px;\r\n    height: 16px;\r\n}\r\n\r\n.skipxsec-forward-btn {\r\n    transform: scaleX(-1);\r\n    right: 0px;\r\n}\r\n\r\n.skipxsec-forward-btn-under650 {\r\n    right: 15px;\r\n    bottom: 2px;\r\n    width: 16px;\r\n    height: 16px;\r\n}\r\n\r\n/* .skipxsec-icon {\r\n    width: 21px;\r\n    height: 21px;\r\n    position: relative;\r\n    user-select: none;\r\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n    pointer-events: auto;\r\n} */\r\n.skipxsec-num {\r\n    position: absolute;\r\n    left: 50%;\r\n    bottom: 1px;\r\n    transform: translateX(-50%);\r\n    color: rgb(255, 255, 255);\r\n    font-size: 14px;\r\n    line-height: 17px;\r\n    font-family: var(--power-font-family);\r\n    user-select: none;\r\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n    pointer-events: auto;\r\n}\r\n\r\n.skipxsec-num-under650 {\r\n    font-size: 10px;\r\n}\r\n\r\n/* instream_ad_loader_loading */\r\n.vPlayerLoading {\r\n    display: block;\r\n    border-radius: inherit;\r\n    bottom: 0;\r\n    left: 0;\r\n    overflow: hidden;\r\n    position: absolute;\r\n    right: 0;\r\n    top: 0;\r\n    z-index: 9999;\r\n    background-color: #060606;\r\n}\r\n\r\n@-webkit-keyframes av-loading-dash {\r\n    0% {\r\n        stroke-dasharray: 1, 210;\r\n        stroke-dashoffset: 0;\r\n    }\r\n\r\n    50% {\r\n        stroke-dasharray: 130, 220;\r\n        stroke-dashoffset: -50;\r\n    }\r\n\r\n    100% {\r\n        stroke-dasharray: 170, 220;\r\n        stroke-dashoffset: -210;\r\n    }\r\n}\r\n\r\n@-moz-keyframes av-loading-dash {\r\n    0% {\r\n        stroke-dasharray: 1, 210;\r\n        stroke-dashoffset: 0;\r\n    }\r\n\r\n    50% {\r\n        stroke-dasharray: 130, 220;\r\n        stroke-dashoffset: -50;\r\n    }\r\n\r\n    100% {\r\n        stroke-dasharray: 170, 220;\r\n        stroke-dashoffset: -210;\r\n    }\r\n}\r\n\r\n@-o-keyframes av-loading-dash {\r\n    0% {\r\n        stroke-dasharray: 1, 210;\r\n        stroke-dashoffset: 0;\r\n    }\r\n\r\n    50% {\r\n        stroke-dasharray: 130, 220;\r\n        stroke-dashoffset: -50;\r\n    }\r\n\r\n    100% {\r\n        stroke-dasharray: 170, 220;\r\n        stroke-dashoffset: -210;\r\n    }\r\n}\r\n\r\n@keyframes av-loading-dash {\r\n    0% {\r\n        stroke-dasharray: 1, 210;\r\n        stroke-dashoffset: 0;\r\n    }\r\n\r\n    50% {\r\n        stroke-dasharray: 130, 220;\r\n        stroke-dashoffset: -50;\r\n    }\r\n\r\n    100% {\r\n        stroke-dasharray: 170, 220;\r\n        stroke-dashoffset: -210;\r\n    }\r\n}\r\n\r\n@-webkit-keyframes av-loading-rotate {\r\n    0% {\r\n        stroke: white;\r\n        -webkit-transform: rotate(0deg);\r\n        transform: rotate(0deg);\r\n    }\r\n\r\n    100% {\r\n        stroke: currentColor;\r\n        -webkit-transform: rotate(360deg);\r\n        transform: rotate(360deg);\r\n    }\r\n}\r\n\r\n@-moz-keyframes av-loading-rotate {\r\n    0% {\r\n        stroke: white;\r\n        -webkit-transform: rotate(0deg);\r\n        transform: rotate(0deg);\r\n    }\r\n\r\n    100% {\r\n        stroke: currentColor;\r\n        -webkit-transform: rotate(360deg);\r\n        transform: rotate(360deg);\r\n    }\r\n}\r\n\r\n@-o-keyframes av-loading-rotate {\r\n    0% {\r\n        stroke: white;\r\n        -webkit-transform: rotate(0deg);\r\n        transform: rotate(0deg);\r\n    }\r\n\r\n    100% {\r\n        stroke: currentColor;\r\n        -webkit-transform: rotate(360deg);\r\n        transform: rotate(360deg);\r\n    }\r\n}\r\n\r\n@keyframes av-loading-rotate {\r\n    0% {\r\n        stroke: white;\r\n        -webkit-transform: rotate(0deg);\r\n        transform: rotate(0deg);\r\n    }\r\n\r\n    100% {\r\n        stroke: currentColor;\r\n        -webkit-transform: rotate(360deg);\r\n        transform: rotate(360deg);\r\n    }\r\n}\r\n\r\n.vPlayerLoading svg {\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n}\r\n\r\n.vPlayerLoading svg.circle {\r\n    fill: transparent;\r\n    stroke: rgba(255, 255, 255, 0.2);\r\n    stroke-width: 3;\r\n    width: 70px;\r\n    height: 70px;\r\n    margin-left: -35px;\r\n    margin-top: -35px;\r\n}\r\n\r\n.vPlayerLoading svg.circle.active {\r\n    color: #00b3ff;\r\n    stroke: white;\r\n    stroke-linecap: round;\r\n    animation: av-loading-dash 2s ease infinite, av-loading-rotate 2.5s linear infinite;\r\n}\r\n\r\n.auto-skip-wrapper {\r\n    width: 70px;\r\n    height: 44px;\r\n    position: absolute;\r\n    right: 3px;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n    cursor: pointer;\r\n    user-select: none;\r\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n    pointer-events: auto;\r\n    z-index: 1;\r\n}\r\n\r\n.auto-skip-content-wrapper {\r\n    width: 67px;\r\n    height: 20px;\r\n    position: absolute;\r\n    cursor: pointer;\r\n    display: block;\r\n    background-color: rgb(0, 0, 0);\r\n    opacity: 0.8;\r\n    border-radius: 5px;\r\n    box-shadow: white 0px 0px 4px;\r\n    user-select: none;\r\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n    pointer-events: auto;\r\n}\r\n\r\n.auto-skip-txt {\r\n    line-height: 20px;\r\n    font-family: var(--power-font-family);\r\n    font-size: 14px;\r\n    font-weight: bold;\r\n    text-align: center;\r\n    color: rgb(255, 255, 255);\r\n    cursor: pointer;\r\n    user-select: none;\r\n    pointer-events: auto;\r\n    display: block;\r\n}\r\n\r\n.auto-skip-fill-full {\r\n    width: 0px;\r\n    position: absolute;\r\n    cursor: pointer;\r\n    display: block;\r\n    background-color: var(--power-controls-color);\r\n    border-radius: 5px;\r\n    z-index: -1;\r\n    user-select: none;\r\n    pointer-events: auto;\r\n    height: 20px;\r\n}\r\n\r\n/* Hide Scrollbar */\r\n.power-hide-scrollbar::-webkit-scrollbar {\r\n    display: none;\r\n}\r\n\r\n.power-hide-scrollbar {\r\n    overflow: -moz-scrollbars-none;\r\n    -ms-overflow-style: none;\r\n}\r\n\r\n/* Anim Show Hide Outstream HNL */\r\n/* Left */\r\n@keyframes pubpower_hideL {\r\n    0% {\r\n        transform: translate(0);\r\n    }\r\n\r\n    20% {\r\n        transform: translate(5px);\r\n    }\r\n\r\n    100% {\r\n        transform: translate(-120vw);\r\n    }\r\n}\r\n\r\n@keyframes pubpower_showL {\r\n    0% {\r\n        transform: translate(-120vw);\r\n    }\r\n\r\n    80% {\r\n        transform: translate(-5px);\r\n    }\r\n\r\n    100% {\r\n        transform: translate(0vw);\r\n    }\r\n}\r\n\r\n.pubpowerHideL {\r\n    animation: pubpower_hideL 1.5s forwards ease-in-out;\r\n}\r\n\r\n.pubpowerShowL {\r\n    animation: pubpower_showL 1.5s forwards ease-in-out;\r\n}\r\n\r\n/* Right */\r\n@keyframes pubpower_hideR {\r\n    0% {\r\n        transform: translate(0);\r\n    }\r\n\r\n    20% {\r\n        transform: translate(5px);\r\n    }\r\n\r\n    100% {\r\n        transform: translate(120vw);\r\n    }\r\n}\r\n\r\n@keyframes pubpower_showR {\r\n    0% {\r\n        transform: translate(120vw);\r\n    }\r\n\r\n    80% {\r\n        transform: translate(5px);\r\n    }\r\n\r\n    100% {\r\n        transform: translate(0vw);\r\n    }\r\n}\r\n\r\n.pubpowerHideR {\r\n    animation: pubpower_hideR 1.5s forwards ease-in-out;\r\n}\r\n\r\n.pubpowerShowR {\r\n    animation: pubpower_showR 1.5s forwards ease-in-out;\r\n}", ""]);

            /***/ }),
        /* 46 */
        /***/ (function(module, exports, __webpack_require__) {

            exports = module.exports = __webpack_require__(7)();
            exports.push([module.i, "*,\r\n*::before,\r\n*::after {\r\n    box-sizing: inherit;\r\n    margin: 0;\r\n    padding: 0;\r\n    outline: 0;\r\n}\r\n\r\n:root {\r\n    /* Video */\r\n    --power-floating-btn-size: 20px;\r\n    --power-floating-width: 350px;\r\n    --power-top-bot: 20px;\r\n    --power-left-right: 20px;\r\n    --power-font-family: Roboto;\r\n    --power-playerskin67-columns: 130px;\r\n\r\n    /* playerSkin */\r\n    --power-controls-color: #ffc107;\r\n    --power-background-color: rgba(255, 255, 255, 1);\r\n    --power-title-color: rgba(255, 255, 255, 1);\r\n    --power-title-background-color: rgba(0, 0, 0, 0);\r\n    --power-description-color: rgba(255, 255, 255, 1);\r\n}\r\n\r\n@media screen and (max-width: 260px) {\r\n    .skipxsec-btn {\r\n        display: none !important;\r\n    }\r\n\r\n    .skipxsec-num {\r\n        display: none !important;\r\n    }\r\n}\r\n\r\n/* Use in All Skin */\r\n.left-coner {\r\n    left: 0;\r\n    cursor: pointer;\r\n}\r\n\r\n.right-coner {\r\n    right: 0;\r\n    cursor: pointer;\r\n}\r\n\r\n.power-active {\r\n    opacity: 1 !important;\r\n    height: auto !important;\r\n}\r\n\r\n.power-deactive {\r\n    opacity: 0 !important;\r\n    height: 0px !important;\r\n}\r\n\r\n.power-show {\r\n    opacity: 1 !important;\r\n}\r\n\r\n.power-hide {\r\n    opacity: 0 !important;\r\n}\r\n\r\n.power-hidden {\r\n    display: none !important;\r\n    opacity: 0 !important;\r\n}\r\n\r\n.power-div-center {\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\n/* Floating Video */\r\n.power-floating {\r\n    position: fixed !important;\r\n    width: var(--power-floating-width) !important;\r\n    height: calc(var(--power-floating-width) / 1.77) !important;\r\n}\r\n\r\n.top-left {\r\n    top: var(--power-top-bot) !important;\r\n    left: var(--power-left-right) !important;\r\n}\r\n\r\n.top-right {\r\n    top: var(--power-top-bot) !important;\r\n    right: var(--power-left-right) !important;\r\n}\r\n\r\n.bot-left {\r\n    bottom: var(--power-top-bot) !important;\r\n    left: var(--power-left-right) !important;\r\n}\r\n\r\n.bot-right {\r\n    bottom: var(--power-top-bot) !important;\r\n    right: var(--power-left-right) !important;\r\n}\r\n\r\n/* Floating BTN Close */\r\n.power-floating-close {\r\n    position: absolute;\r\n    width: var(--power-floating-btn-size);\r\n    height: var(--power-floating-btn-size);\r\n    background-color: rgba(0, 0, 0, 0.65);\r\n    border-radius: 50%;\r\n    display: block;\r\n}\r\n\r\n.top-left-close {\r\n    left: calc(-0.95 * var(--power-floating-btn-size)) !important;\r\n    top: calc(-0.95 * var(--power-floating-btn-size)) !important;\r\n}\r\n\r\n.top-right-close {\r\n    top: calc(-0.95 * var(--power-floating-btn-size)) !important;\r\n    right: calc(-0.95 * var(--power-floating-btn-size)) !important;\r\n}\r\n\r\n.bot-left-close {\r\n    left: calc(-0.95 * var(--power-floating-btn-size)) !important;\r\n    bottom: calc(-0.95 * var(--power-floating-btn-size)) !important;\r\n}\r\n\r\n.bot-right-close {\r\n    right: calc(-0.95 * var(--power-floating-btn-size)) !important;\r\n    bottom: calc(-0.95 * var(--power-floating-btn-size)) !important;\r\n}\r\n\r\n/* Responsive Text */\r\n.description-responsive-6line {\r\n    display: -webkit-box;\r\n    -webkit-line-clamp: 6;\r\n    /* number of lines to show */\r\n    -webkit-box-orient: vertical;\r\n}\r\n\r\n.description-responsive-2line {\r\n    display: -webkit-box;\r\n    -webkit-line-clamp: 2;\r\n    /* number of lines to show */\r\n    -webkit-box-orient: vertical;\r\n}\r\n\r\n.description-responsive {\r\n    display: -webkit-box;\r\n    -webkit-line-clamp: 3;\r\n    /* number of lines to show */\r\n    -webkit-box-orient: vertical;\r\n}\r\n\r\n/* Feature Videos */\r\n.top-container {\r\n    display: flex;\r\n    align-items: flex-start;\r\n    justify-content: space-between;\r\n}\r\n\r\n.feature-videos {\r\n    color: var(--power-controls-color);\r\n    font-family: var(--power-font-family);\r\n    font-size: 12px;\r\n    font-weight: bold;\r\n    font-style: normal;\r\n    font-stretch: normal;\r\n    line-height: normal;\r\n    letter-spacing: normal;\r\n    margin-right: 10px;\r\n    height: 25px;\r\n}\r\n\r\n/* Video Powered By */\r\n.poweredby-wapper {\r\n    min-width: 132px;\r\n    /* width: 132px; */\r\n    /* height: 25px; */\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-end;\r\n}\r\n\r\n.poweredby-txt {\r\n    /* position: relative; */\r\n    font-family: var(--power-font-family);\r\n    font-size: 12px;\r\n    color: #9b9b9b;\r\n}\r\n\r\n.poweredby-logo-wapper {\r\n    /* position: relative; */\r\n    width: 60px;\r\n    margin-left: 3px;\r\n}\r\n\r\n.poweredby-logo-txt {\r\n    width: 100%;\r\n    height: 15px;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n}\r\n\r\n.brand-name-wrapper {\r\n    margin: 0 0 0 2px;\r\n}\r\n\r\n.brand-name {\r\n    font-family: var(--power-font-family);\r\n    font-size: 13px;\r\n    color: #9b9b9b;\r\n    font-weight: 600;\r\n}\r\n\r\n/* Video Placeholder */\r\n.power-video-placeholder {\r\n    position: relative;\r\n    overflow: hidden;\r\n    width: 100%;\r\n    min-width: 300px !important;\r\n    padding-top: 56.25%;\r\n    /* 16:9 Aspect Ratio (divide 9 by 16 = 0.5625) */\r\n}\r\n\r\n/* === Player Skin 2 === */\r\n/* Slider Video */\r\n.playerskin2-wrapper {\r\n    margin-top: 5px;\r\n    height: 88px;\r\n    position: relative;\r\n    overflow: hidden;\r\n}\r\n\r\n/* Slider */\r\n.playerskin2-slider-wrapper {\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    position: absolute;\r\n    bottom: 0px;\r\n    overflow-x: auto;\r\n    /* -webkit-overflow-scrolling: touch; */\r\n}\r\n\r\n/* Hide scrollbar for Chrome, Safari and Opera */\r\n.playerskin2-slider-wrapper::-webkit-scrollbar {\r\n    display: none;\r\n}\r\n\r\n/* Hide scrollbar for IE, Edge and Firefox */\r\n.playerskin2-slider-wrapper {\r\n    -ms-overflow-style: none;\r\n    /* IE and Edge */\r\n    scrollbar-width: none;\r\n    /* Firefox */\r\n}\r\n\r\n.playerskin2-itemslider-wrapper {\r\n    /* height: 88px; */\r\n    position: absolute;\r\n    bottom: 0px;\r\n    background-color: rgb(255, 255, 255);\r\n    overflow: hidden;\r\n    flex-shrink: 0;\r\n}\r\n\r\n.playerskin2-itemslider-wrapper:hover>#powerThumbnail>.playerskin2-playbtn-icon {\r\n    opacity: 1;\r\n}\r\n\r\n.playerskin2-title {\r\n    opacity: 0;\r\n    display: block;\r\n    width: 85%;\r\n    height: 27px;\r\n    left: 9.5px;\r\n    top: 9.5px;\r\n    font-size: 12px;\r\n    position: absolute;\r\n    color: rgb(255, 255, 255);\r\n    font-family: var(--power-font-family);\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n}\r\n\r\n.playerskin2-itemslider-wrapper:hover>.playerskin2-title {\r\n    opacity: 1;\r\n}\r\n\r\n.playerskin2-nowplaying {\r\n    opacity: 0;\r\n    width: 70px;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    left: 50%;\r\n    top: 50%;\r\n    transform: translate(-50%, -50%);\r\n    font-size: 11px;\r\n    position: absolute;\r\n    line-height: 12px;\r\n    letter-spacing: 0.11px;\r\n    color: white;\r\n    font-family: var(--power-font-family);\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n}\r\n\r\n.playerskin2-coverbox {\r\n    opacity: 1;\r\n    width: 100%;\r\n    height: 100%;\r\n    position: absolute;\r\n    background-color: rgba(0, 0, 0, 0.4);\r\n    top: 0px;\r\n}\r\n\r\n.playerskin2-playbtn-icon {\r\n    opacity: 0;\r\n    width: 20px;\r\n    height: 20px;\r\n    position: absolute;\r\n    left: 9.5px;\r\n    bottom: 9.5px;\r\n}\r\n\r\n.playerskin2-playbtn-icon:hover {\r\n    opacity: 1;\r\n}\r\n\r\n/* Arrow */\r\n.playerskin2-arrow-wrapper {\r\n    z-index: 1;\r\n    position: absolute;\r\n    width: 20px;\r\n    height: 40px;\r\n    top: 50%;\r\n    transform: translate(0%, -50%);\r\n}\r\n\r\n/* === Player Skin 3 === */\r\n.playerskin3-title {\r\n    color: var(--power-title-color);\r\n    font-size: 18px;\r\n    font-weight: bold;\r\n    font-family: var(--power-font-family);\r\n    letter-spacing: 0.1px;\r\n    word-wrap: break-word;\r\n\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n}\r\n\r\n.playerskin3-description {\r\n    color: var(--power-description-color);\r\n    font-size: 14px;\r\n    line-height: 1.25;\r\n    font-family: var(--power-font-family);\r\n    /* letter-spacing: 0.1px; */\r\n    word-wrap: break-word;\r\n\r\n    overflow: hidden;\r\n    /* white-space: nowrap; */\r\n    text-overflow: ellipsis;\r\n}\r\n\r\n/* === Player Skin 4 === */\r\n/* .playerskin4-wrapper {\r\n    position: absolute;\r\n    width: 25px;\r\n    height: 25px;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n} */\r\n#powerPlayerSkin4 svg ellipse {\r\n    fill: var(--power-controls-color);\r\n}\r\n\r\n/* === Player Skin 5 === */\r\n.playerskin5-thumbnail-playbtn {\r\n    position: absolute;\r\n    width: 25px;\r\n    height: 25px;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n}\r\n\r\n.playerskin5-thumbnail-readmore {\r\n    font-family: var(--power-font-family);\r\n    font-size: 10px;\r\n    font-weight: bold;\r\n    font-style: italic;\r\n    font-stretch: normal;\r\n    line-height: normal;\r\n    letter-spacing: normal;\r\n    color: #00d2ff;\r\n    text-decoration: underline;\r\n}\r\n\r\n/* === Player Skin 6 === */\r\n.playerskin6 {\r\n    overflow-y: hidden;\r\n    overflow-x: hidden;\r\n}\r\n\r\n.playerskin6 ul {\r\n    list-style: none;\r\n    padding: 0;\r\n    list-style-type: none;\r\n}\r\n\r\n.playerskin6 td {\r\n    border-style: solid;\r\n    border-color: #ffffff;\r\n    border-top-width: 0px !important;\r\n    border-left-width: 7px !important;\r\n    border-right-width: 7px !important;\r\n    border-bottom-width: 0px !important;\r\n}\r\n\r\n.playerskin6 .video-list {\r\n    position: relative;\r\n    overflow: hidden;\r\n    /* 16:9 Aspect Ratio (divide 9 by 16 = 0.5625) */\r\n    /* padding-top: 56.25%; */\r\n    /* margin-bottom: 7px !important; */\r\n    /* width: 100%; */\r\n    width: 130px !important;\r\n    height: 73px !important;\r\n}\r\n\r\n.playerskin6 .video-image {\r\n    width: 100%;\r\n    height: 100%;\r\n    border-radius: 2px;\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n}\r\n\r\n.playerskin6 .video-title {\r\n    text-align: center;\r\n    height: 40px;\r\n    max-width: 238px;\r\n    font-size: 12px;\r\n    overflow: hidden;\r\n    margin-top: 5px;\r\n}\r\n\r\n.playerskin6::-webkit-scrollbar {\r\n    display: none;\r\n}\r\n\r\n.power_layout__grid {\r\n    display: grid;\r\n    grid-template-columns: var(--power-playerskin67-columns);\r\n    grid-column-gap: 7px;\r\n    grid-row-gap: 7px;\r\n    padding-left: 7px;\r\n    padding-right: 7px;\r\n}\r\n\r\n/* .playerskin8-video-wrap {\r\n    position: relative;\r\n    overflow: hidden;\r\n    width: 100%;\r\n    padding-top: 121%;\r\n} */\r\n/* .playerskin8-video-center {\r\n    position: absolute;\r\n    top: 0px;\r\n    left: 0px;\r\n    width: 100%;\r\n    height: 100% !important;\r\n} */\r\n\r\n#aTagVideoIndex {\r\n    cursor: pointer;\r\n}\r\n\r\ntbody,\r\ntd,\r\ntfoot,\r\nth,\r\nthead,\r\nmtr {\r\n    border-spacing: 0;\r\n    border-width: 0;\r\n}\r\n\r\n.cover-related {\r\n    width: 100%;\r\n    position: absolute;\r\n    background-color: #ffffff9e;\r\n    z-index: 2;\r\n    user-select: none;\r\n}", ""]);

            /***/ }),
        /* 47 */
        /***/ (function(module, exports, __webpack_require__) {

            exports = module.exports = __webpack_require__(7)();
            exports.push([module.i, "*,\r\n*::before,\r\n*::after {\r\n    box-sizing: inherit;\r\n    margin: 0;\r\n    padding: 0;\r\n    outline: 0;\r\n}\r\n\r\n:root {\r\n    --power-toparticles-column: 3;\r\n    --power-font-family: Roboto;\r\n    --power-title-color: rgba(255, 255, 255, 1);\r\n    --power-title-background-color: rgba(0, 0, 0, 1);\r\n    --power-controls-color: rgba(0, 0, 0, 1);\r\n    --power-padding-border: 20;\r\n    --power-slider-anim-durtion: 5000ms;\r\n    --power-desc-width: 500px;\r\n}\r\n\r\n@media screen and (max-width: 400px) {\r\n    .power-readmore-text {\r\n        display: none !important;\r\n    }\r\n    .power-arrow-btn {\r\n        display: block !important;\r\n    }\r\n    #powerTopArtTitle {\r\n        display: none !important;\r\n    }\r\n    #powerTopArtPlayBtn {\r\n        width: 56px;\r\n        width: 56px;\r\n    }\r\n    #powerTopArtPrevBtn {\r\n        display: none !important;\r\n    }\r\n    #powerTopArtNextBtn {\r\n        display: none !important;\r\n    }\r\n    .power-readmore-container {\r\n        padding: 10px !important;\r\n    }\r\n}\r\n\r\n.power-active {\r\n    opacity: 1 !important;\r\n    height: auto !important;\r\n}\r\n.power-deactive {\r\n    opacity: 0 !important;\r\n    height: 0px !important;\r\n}\r\n.power-show {\r\n    opacity: 1 !important;\r\n}\r\n.power-hide {\r\n    opacity: 0 !important;\r\n}\r\n.power-hidden {\r\n    display: none !important;\r\n    opacity: 0 !important;\r\n}\r\n\r\n.power-postion-full {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    top: 0;\r\n    left: 0;\r\n}\r\n\r\n.power-toparticles-placeholder {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n}\r\n\r\n.video-controller {\r\n    width: 100%;\r\n    height: 100%;\r\n    position: absolute;\r\n    display: inline-block;\r\n    top: 0px;\r\n    left: 0px;\r\n}\r\n\r\n/* Slider Index */\r\n.power-ui-ps-head {\r\n    width: 100%;\r\n    display: inline-block;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    z-index: 1;\r\n}\r\n.power_grid_wapper {\r\n    display: grid;\r\n    grid-template-columns: repeat(var(--power-toparticles-column), 1fr);\r\n    grid-column-gap: 2px;\r\n    padding: 12px 8px;\r\n}\r\n.power_slider_index {\r\n    width: 100%;\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    position: relative;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n.power_bar_container {\r\n    width: 100%;\r\n    height: 3px;\r\n    position: relative;\r\n    overflow: hidden;\r\n    cursor: pointer;\r\n    box-sizing: border-box;\r\n    padding: 0 1px;\r\n}\r\n.power_progress_bg {\r\n    border-radius: 8px 0 0 8px;\r\n    background-color: hsla(0, 0%, 100%, 0.4);\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n.power_progress_fill {\r\n    fill: var(--power-controls-color);\r\n    stroke: var(--power-controls-color);\r\n    background-color: var(--power-controls-color);\r\n    position: absolute;\r\n    width: 0%;\r\n    height: 100%;\r\n    --animfill: paused;\r\n    animation: pubpower-fill-full var(--power-slider-anim-durtion) normal;\r\n    animation-fill-mode: forwards;\r\n    animation-play-state: var(--animfill);\r\n    animation-iteration-count: 1;\r\n    animation-timing-function: linear;\r\n}\r\n/* Anim Slider Index */\r\n#topArtSliderIndexID[full] > .power_progress_fill {\r\n    width: 100% !important;\r\n}\r\n#topArtSliderIndexID[open] > .power_progress_fill {\r\n    --animfill: running;\r\n}\r\n#topArtSliderIndexID:not([open]) > .power_progress_fill {\r\n    --animfill: paused;\r\n}\r\n@keyframes pubpower-fill-full {\r\n    0% {\r\n        width: 0%;\r\n    }\r\n    100% {\r\n        width: 100%;\r\n    }\r\n}\r\n\r\n/* Top Header */\r\n.power-logo-title_wrapper {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding: 0 var(--power-padding-border);\r\n    z-index: 1;\r\n}\r\n/* Top Left */\r\n.power-logo-title {\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n.img-logo {\r\n    opacity: 0.8;\r\n}\r\n#publisherLogo {\r\n    max-width: 80px;\r\n    height: auto;\r\n}\r\n.power-top-title {\r\n    padding: 5px;\r\n    margin-left: 5px;\r\n    font-family: var(--power-font-family);\r\n    color: var(--power-title-color);\r\n    background-color: var(--power-title-background-color);\r\n    font-size: 16px;\r\n}\r\n/* Top Right */\r\n.logo-brand {\r\n    width: 65px;\r\n    cursor: pointer;\r\n}\r\n.logo-brand-under400 {\r\n    width: 44px;\r\n}\r\n\r\n/* Center Video */\r\n.play-pause-btn_wapper {\r\n    top: 42%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    position: absolute;\r\n    opacity: 1;\r\n    visibility: visible;\r\n    user-select: none;\r\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\r\n    pointer-events: auto;\r\n    display: block;\r\n    z-index: 3;\r\n}\r\n.play-pause-btn {\r\n    width: 80px;\r\n    height: 80px;\r\n    position: absolute;\r\n    top: 0px;\r\n    left: 0px;\r\n    transform: translate(-50%, -50%);\r\n}\r\n.play-pause-btn-under400 {\r\n    width: 56px;\r\n    height: 56px;\r\n}\r\n.play-pause-btn_wapper button {\r\n    background-color: transparent;\r\n    border-color: transparent;\r\n    width: inherit;\r\n    height: inherit;\r\n    cursor: pointer;\r\n}\r\nbutton:hover svg path {\r\n    fill: var(--power-controls-color);\r\n}\r\n\r\n.power-btn-container {\r\n    padding: 8px;\r\n}\r\n.power-btn-container svg {\r\n    width: 24px;\r\n    height: 24px;\r\n}\r\n.power-btn-container svg:hover path {\r\n    fill: var(--power-controls-color);\r\n    cursor: pointer;\r\n}\r\n\r\n.power-toparticles_overlay {\r\n    background-color: rgba(0, 0, 0, 0.5);\r\n    cursor: pointer;\r\n    z-index: 3;\r\n}\r\n\r\n/* Bot Left Controller */\r\n.power-ui-toparticles-controls {\r\n    display: flex;\r\n    align-items: center;\r\n    position: absolute;\r\n    bottom: 40px;\r\n    left: var(--power-padding-border);\r\n    z-index: 1;\r\n}\r\n\r\n/* power-video-container */\r\n.power-video-container {\r\n    position: absolute;\r\n    width: 100%;\r\n    /* height: 100%; */\r\n    top: 0;\r\n    left: 0;\r\n    flex-shrink: 0;\r\n    display: block;\r\n}\r\n.power-video-placeholder {\r\n    position: relative;\r\n    overflow: hidden;\r\n    width: 100%;\r\n    min-width: 300px !important;\r\n    padding-top: 56.25%; /* 16:9 Aspect Ratio (divide 9 by 16 = 0.5625) */\r\n    display: block;\r\n}\r\n\r\n/* Slider */\r\n.power-slider-img-container {\r\n    -webkit-transform: scale(1.1);\r\n    -ms-transform: scale(1.1);\r\n    transform: scale(1.1);\r\n}\r\n.power-is-playing.power-slider-img-container {\r\n    -webkit-transition-property: transform;\r\n    -o-transition-property: transform;\r\n    transition-property: transform;\r\n    -webkit-transition-timing-function: ease-out;\r\n    -o-transition-timing-function: ease-out;\r\n    transition-timing-function: ease-out;\r\n    -webkit-transform: scale(1);\r\n    -ms-transform: scale(1);\r\n    transform: scale(1);\r\n}\r\n.power-is-paused.power-slider-img-container {\r\n    -webkit-transition-property: none;\r\n    -o-transition-property: none;\r\n    transition-property: none;\r\n    -webkit-transition-duration: 0s;\r\n    -o-transition-duration: 0s;\r\n    transition-duration: 0s;\r\n}\r\n.power-slider-img-container img {\r\n    -moz-user-select: none;\r\n    -webkit-user-select: none;\r\n    -ms-user-select: none;\r\n    user-select: none;\r\n    -webkit-user-drag: none;\r\n\r\n    padding: 0;\r\n    margin: 0;\r\n    object-fit: unset;\r\n}\r\n/* Read More */\r\n.power-readmore_wrapper {\r\n    position: absolute;\r\n    /* width: 100%;\r\n    height: 100%;\r\n    top: 0;\r\n    left: 0; */\r\n    bottom: 40px;\r\n    right: var(--power-padding-border);\r\n    z-index: 1;\r\n}\r\n.power-readmore-container {\r\n    display: flex;\r\n    align-items: center;\r\n    background-color: var(--power-controls-color);\r\n    padding: 10px 25px;\r\n    border-radius: 30px;\r\n}\r\n.power-readmore-text {\r\n    font-family: var(--power-font-family);\r\n    color: var(--power-title-color);\r\n    font-size: 15px;\r\n    letter-spacing: 0.16px;\r\n}\r\n.power-arrow-btn {\r\n    width: 20px;\r\n    height: 12px;\r\n    line-height: 0;\r\n    display: none;\r\n}\r\n.power-arrow-btn svg {\r\n    fill: var(--power-title-color);\r\n}\r\n\r\n/* Description */\r\n.power-description_wrapper {\r\n    display: flex;\r\n    position: relative;\r\n    width: 100%;\r\n    height: 70px !important;\r\n    background-color: #fff;\r\n    border-bottom: 1px solid #d8d8d8;\r\n    z-index: 2;\r\n}\r\n.power-description_content {\r\n    width: 100%;\r\n    padding: 0px var(--power-padding-border);\r\n}\r\n.power-description_component {\r\n    display: flex;\r\n    align-items: flex-start;\r\n    max-width: var(--power-desc-width);\r\n    min-width: 250px;\r\n    /* width: 500px; */\r\n    height: 68px !important;\r\n    position: absolute;\r\n    bottom: 30px;\r\n}\r\n.power-vertical-line {\r\n    background-color: var(--power-controls-color);\r\n    width: 4px;\r\n    height: 100%;\r\n    --animfill: paused;\r\n    animation: pubpower-line-anim 200ms normal;\r\n    animation-fill-mode: forwards;\r\n    animation-play-state: var(--animfill);\r\n    animation-iteration-count: 1;\r\n    animation-timing-function: ease-in-out;\r\n}\r\n/* Set Description one Line */\r\n#powerTopArtDescription[floating] > .power-description_component {\r\n    bottom: 10px !important;\r\n}\r\n#powerTopArtDescription[one][floating] > .power-description_component {\r\n    height: 34px !important;\r\n    bottom: 32px !important;\r\n}\r\n#powerTopArtDescription[one] > .power-description_component {\r\n    height: 34px !important;\r\n    bottom: 52px !important;\r\n}\r\n#powerTopArtDescription[one] > .power-description_component > .power-ui-lines > .power-description_line2 {\r\n    display: none !important;\r\n}\r\n/* Anim Vertical Line Description */\r\n#powerTopArtDescription[open] > .power-description_component > .power-vertical-line {\r\n    --animfill: running;\r\n}\r\n#powerTopArtDescription:not([open]) > .power-description_component > .power-vertical-line {\r\n    --animfill: paused;\r\n}\r\n@keyframes pubpower-line-anim {\r\n    0% {\r\n        height: 0%;\r\n    }\r\n    100% {\r\n        height: 100%;\r\n    }\r\n}\r\n.power-ui-lines {\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n.power-description-line_wrapper {\r\n    /* left: 4px; */\r\n    padding: 4px 10px 6px;\r\n    max-width: calc(100% - 4px);\r\n    background: #f2f2f2;\r\n    color: #000;\r\n    font-family: var(--power-font-family);\r\n    font-size: 20px;\r\n\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n}\r\n.power-description_line1 {\r\n    transform: scale(0);\r\n    --animfill: paused;\r\n    animation: pubpower-line-1 300ms normal;\r\n    animation-delay: 200ms;\r\n    animation-fill-mode: forwards;\r\n    animation-play-state: var(--animfill);\r\n    animation-iteration-count: 1;\r\n    animation-timing-function: ease-in-out;\r\n    transform-origin: left center;\r\n}\r\n/* Anim Line 1 Description */\r\n#powerTopArtDescription[open] > .power-description_component > .power-ui-lines > .power-description_line1 {\r\n    --animfill: running;\r\n}\r\n#powerTopArtDescription:not([open]) > .power-description_component > .power-ui-lines > .power-description_line1 {\r\n    --animfill: paused;\r\n}\r\n@keyframes pubpower-line-1 {\r\n    0% {\r\n        transform: scaleX(0);\r\n    }\r\n    100% {\r\n        transform: scaleX(1);\r\n    }\r\n}\r\n.power-description_line2 {\r\n    transform: scale(0);\r\n    --animfill: paused;\r\n    animation: pubpower-line-2 400ms normal;\r\n    animation-delay: 300ms;\r\n    animation-fill-mode: forwards;\r\n    animation-play-state: var(--animfill);\r\n    animation-iteration-count: 1;\r\n    animation-timing-function: ease-in-out;\r\n    transform-origin: left center;\r\n}\r\n/* Anim Line 1 Description */\r\n#powerTopArtDescription[open] > .power-description_component > .power-ui-lines > .power-description_line2 {\r\n    --animfill: running;\r\n}\r\n#powerTopArtDescription:not([open]) > .power-description_component > .power-ui-lines > .power-description_line2 {\r\n    --animfill: paused;\r\n}\r\n@keyframes pubpower-line-2 {\r\n    0% {\r\n        transform: scaleX(0);\r\n    }\r\n    100% {\r\n        transform: scaleX(1);\r\n    }\r\n}\r\n\r\n/* Start Anim Slider Content */\r\n#powerTopArtSliderContent {\r\n    z-index: 0;\r\n}\r\n.power-slidercontent__wrapper {\r\n    /* 16:9 */\r\n    --h: 9;\r\n    --w: 16;\r\n    --z: 100;\r\n    /* z-index begin */\r\n    --animdur: var(--power-slider-anim-durtion);\r\n    /* 3 times the duration */\r\n    --animtf: ease-out;\r\n    --dist: clamp(0.75rem, 10vw, 1.5rem);\r\n    --slides: 20;\r\n    font-size: 1rem;\r\n    position: relative;\r\n    display: block;\r\n}\r\n.power-slidercontent__wrapper::before {\r\n    content: \"\";\r\n    display: block;\r\n    padding-bottom: calc(var(--h) / var(--w) * 100%);\r\n}\r\n\r\n.power-topart__frame[open] {\r\n    --animps: running;\r\n    --img-animps: running;\r\n}\r\n.power-topart__frame:not([open]) {\r\n    --animps: paused;\r\n    --img-animps: paused !important;\r\n}\r\n/* .power-topart__frame:not([open]):first-of-type {\r\n    opacity: 1;\r\n} */\r\n\r\n.power-topart__frame {\r\n    --animps: paused;\r\n    --img-animps: paused;\r\n    --index: 0;\r\n    animation: autoplay var(--animdur) infinite;\r\n    /* animation-delay: calc((var(--index) * var(--animdur)) / 3); */\r\n    animation-play-state: var(--animps);\r\n    box-sizing: border-box;\r\n    height: 100%;\r\n    margin: 0;\r\n    /* opacity: 0; */\r\n    overflow: hidden;\r\n    padding: 0;\r\n    position: absolute;\r\n    top: 0;\r\n    width: 100%;\r\n}\r\n\r\n.power-topart__img {\r\n    animation-direction: alternate;\r\n    animation-duration: var(--animdur);\r\n    /* calc(var(--animdur) / 1.5); */\r\n    animation-fill-mode: both;\r\n    animation-iteration-count: infinite;\r\n    animation-name: var(--animn);\r\n    animation-play-state: var(--img-animps);\r\n    animation-timing-function: var(--animtf);\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: cover;\r\n    object-position: var(--x, 50%) var(--y, 50%);\r\n    position: absolute;\r\n    top: 0;\r\n    will-change: transform;\r\n}\r\n\r\n.power-slidercontent__inner {\r\n    height: 100%;\r\n    position: absolute;\r\n    top: 0;\r\n    width: 100%;\r\n}\r\n\r\n@keyframes autoplay {\r\n    0.1% {\r\n        --img-animps: running;\r\n        /* opacity: 0; */\r\n        z-index: calc(var(--z) + var(--slides));\r\n    }\r\n\r\n    5% {\r\n        opacity: 1;\r\n    }\r\n\r\n    50% {\r\n        opacity: 1;\r\n    }\r\n\r\n    51% {\r\n        --img-animps: paused;\r\n    }\r\n\r\n    100% {\r\n        /* opacity: 0; */\r\n        z-index: var(--z);\r\n    }\r\n}\r\n\r\n/* Top Anim */\r\n@keyframes pubpower-top-left {\r\n    0% {\r\n        transform: scale(1) translate(0, 0);\r\n        transform-origin: 16% 16%;\r\n    }\r\n\r\n    100% {\r\n        transform: scale(1.25) translate(-20px, -15px);\r\n        transform-origin: top left;\r\n    }\r\n}\r\n\r\n@keyframes pubpower-top {\r\n    0% {\r\n        transform: scale(1) translateY(0);\r\n        transform-origin: 50% 16%;\r\n    }\r\n\r\n    100% {\r\n        transform: scale(1.25) translateY(-15px);\r\n        transform-origin: top;\r\n    }\r\n}\r\n\r\n@keyframes pubpower-top-right {\r\n    0% {\r\n        transform: scale(1) translate(0, 0);\r\n        transform-origin: 84% 16%;\r\n    }\r\n\r\n    100% {\r\n        transform: scale(1.25) translate(20px, -15px);\r\n        transform-origin: right top;\r\n    }\r\n}\r\n\r\n/* Bot Anim */\r\n@keyframes pubpower-bottom-left {\r\n    0% {\r\n        transform: scale(1) translate(0, 0);\r\n        transform-origin: 16% 84%;\r\n    }\r\n\r\n    100% {\r\n        transform: scale(1.25) translate(-20px, 15px);\r\n        transform-origin: left bottom;\r\n    }\r\n}\r\n\r\n@keyframes pubpower-bottom {\r\n    0% {\r\n        transform: scale(1) translateY(0);\r\n        transform-origin: 50% 84%;\r\n    }\r\n\r\n    100% {\r\n        transform: scale(1.25) translateY(15px);\r\n        transform-origin: bottom;\r\n    }\r\n}\r\n\r\n@keyframes pubpower-bottom-right {\r\n    0% {\r\n        transform: scale(1) translate(0, 0);\r\n        transform-origin: 84% 84%;\r\n    }\r\n\r\n    100% {\r\n        transform: scale(1.25) translate(20px, 15px);\r\n        transform-origin: right bottom;\r\n    }\r\n}\r\n\r\n/* Left Right Anim */\r\n@keyframes pubpower-left {\r\n    0% {\r\n        transform: scale(1) translate(0, 0);\r\n        transform-origin: 16% 50%;\r\n    }\r\n\r\n    100% {\r\n        transform: scale(1.25) translate(-20px, 15px);\r\n        transform-origin: left;\r\n    }\r\n}\r\n\r\n@keyframes pubpower-right {\r\n    0% {\r\n        transform: scale(1) translate(0, 0);\r\n        transform-origin: 84% 50%;\r\n    }\r\n\r\n    100% {\r\n        transform: scale(1.25) translateX(20px);\r\n        transform-origin: right;\r\n    }\r\n}\r\n/* End Anim Slider Content */\r\n\r\na {\r\n    text-decoration: none !important;\r\n}\r\n\r\n.cover-related {\r\n    width: 100%;\r\n    position: absolute;\r\n    background-color: #ffffff52;\r\n    z-index: 9;\r\n    user-select: none;\r\n    display: block;\r\n}\r\n", ""]);

            /***/ }),
        /* 48 */
        /***/ (function(module, exports) {

// Module
            var code = "<div id=\"powerVideoPlaceholder\" {{{videoPlaceholderCSS}}}> {{{topVideoConatiner}}} <div id=\"powerVideoMainPlaceholder\" class=\"power-video-placeholder power-video-container\"></div> <div id=\"playerskin2\" class=\"playerskin2-wrapper\"> <div id=\"{{{coverRelatedContent}}}\" class=\"cover-related\"></div> <div id=\"{{{sliderVideo}}}\" class=\"playerskin2-slider-wrapper parent\"> {{{contentPlayerSkin}}} </div> <div id=\"{{{sliderVideoLeft}}}\" class=\"playerskin2-arrow-wrapper left-coner\"> <svg width=\"10px\" height=\"16px\" style=\"margin-left:2px;margin-top:14px\" viewBox=\"0 0 9 16\"> <g id=\"behavior-copy\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\"> <g id=\"pause-movie\" transform=\"translate(-571.000000, -831.000000)\" fill=\"#fff\"> <g id=\"Group\" transform=\"translate(560.000000, 334.000000)\"> <g transform=\"translate(-347.000000, -131.000000)\" id=\"Playlist-\"> <g transform=\"translate(294.000000, 582.000000)\"> <g id=\"arrows\" transform=\"translate(64.000000, 45.000000)\"> <path d=\"M0.442954136,10.0615 C0.157627823,9.7775 0,9.4025 0,9.0005 C0,8.5995 0.157627823,8.2225 0.442954136,7.9405 L7.27582098,1.2925 C7.67088818,0.9025 8.30938063,0.9025 8.70444783,1.2925 C9.09851739,1.6835 9.09851739,2.3165 8.70444783,2.7065 L2.22774006,9.0005 L8.70444783,15.2945 C9.09851739,15.6845 9.09851739,16.3175 8.70444783,16.7085 C8.30938063,17.0995 7.67088818,17.0995 7.27582098,16.7085 L0.442954136,10.0615 L0.442954136,10.0615 L0.442954136,10.0615 Z\" id=\"Arrow-Left-#1-Icon\"></path> </g> </g> </g> </g> </g> </g> </svg> </div> <div id=\"{{{sliderVideoRight}}}\" class=\"playerskin2-arrow-wrapper right-coner\"> <svg width=\"10px\" height=\"16px\" style=\"margin-left:8px;margin-top:14px\" viewBox=\"0 0 10 16\"> <g id=\"behavior-copy\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\"> <g id=\"pause-movie\" transform=\"translate(-1335.000000, -830.000000)\" fill=\"#fff\"> <g id=\"Group\" transform=\"translate(560.000000, 334.000000)\"> <g transform=\"translate(-347.000000, -131.000000)\" id=\"Playlist-\"> <g transform=\"translate(294.000000, 582.000000)\"> <g id=\"arrows\" transform=\"translate(64.000000, 45.000000)\"> <path d=\"M764.5,8.0005 C764.5,7.5995 764.657628,7.2225 764.942954,6.9405 L771.775821,0.2925 C772.170888,-0.0975 772.809381,-0.0975 773.204448,0.2925 C773.598517,0.6835 773.598517,1.3165 773.204448,1.7065 L766.72774,8.0005 L773.204448,14.2945 C773.598517,14.6845 773.598517,15.3175 773.204448,15.7085 C772.809381,16.0995 772.170888,16.0995 771.775821,15.7085 L764.942954,9.0615 C764.657628,8.7775 764.5,8.4025 764.5,8.0005 Z\" id=\"Arrow-right-#1-Icon\" transform=\"translate(769.000000, 8.000875) scale(-1, 1) translate(-769.000000, -8.000875) \"> </path> </g> </g> </g> </g> </g> </g> </svg> </div> </div> </div>";
// Exports
            module.exports = code;

            /***/ }),
        /* 49 */
        /***/ (function(module, exports) {

// Module
            var code = "<div id=\"powerVideoPlaceholder\" {{{videoPlaceholderCSS}}}> {{{topVideoConatiner}}} <table id=\"powerPlayerSkin4\" style=\"border-collapse:collapse;width:100%\"> <tr> <td style=\"text-align:center;width:35px;min-width:35px\"> <div id=\"{{{coverRelatedContent}}}\" class=\"cover-related\"></div> <div id=\"{{{backVideoBtn}}}\" style=\"cursor:pointer\"> <svg width=\"25\" height=\"26\" viewBox=\"0 0 25 26\"> <g fill=\"none\" fill-rule=\"evenodd\" transform=\"matrix(-1 0 0 1 25 .527)\"> <ellipse cx=\"12.5\" cy=\"12.545\" fill=\"#00d2ff\" fill-rule=\"nonzero\" rx=\"12.5\" ry=\"12.545\"> </ellipse> <path stroke=\"#FFF\" stroke-linecap=\"round\" d=\"M10 8.029l5.455 5.018L10 18.065\"></path> </g> </svg> </div> </td> <td style=\"vertical-align:top;width:400px\"> <div style=\"max-width:400px\"> <div id=\"powerVideoMainPlaceholder\" class=\"power-video-placeholder power-video-container\"></div> </div> </td> <td style=\"vertical-align:top;padding-left:10px;padding-right:10px\"> <div id=\"playerskin4\"> <div id=\"powerVideoList\" style=\"overflow:hidden\"> {{{contentPlayerSkin}}} </div> </div> </td> <td style=\"text-align:center;width:35px;min-width:35px\"> <div id=\"{{{coverRelatedContent}}}\" class=\"cover-related\"></div> <div id=\"{{{nextVideoBtn}}}\" style=\"cursor:pointer\"> <svg width=\"25\" height=\"26\" viewBox=\"0 0 25 26\"> <g fill=\"none\" fill-rule=\"evenodd\"> <ellipse cx=\"12.5\" cy=\"12.545\" fill=\"#00d2ff\" fill-rule=\"nonzero\" rx=\"12.5\" ry=\"12.545\"> </ellipse> <path stroke=\"#FFF\" stroke-linecap=\"round\" d=\"M10 8.029l5.455 5.018L10 18.065\"></path> </g> </svg> </div> </td> </tr> </table> </div>";
// Exports
            module.exports = code;

            /***/ }),
        /* 50 */
        /***/ (function(module, exports) {

// Module
            var code = "<div id=\"powerVideoPlaceholder\" {{{videoPlaceholderCSS}}}> {{{topVideoConatiner}}} <table cellspacing=\"0\" cellpadding=\"0\" style=\"border-collapse:collapse;width:100%\"> <tr> <td id=\"playerskin67\" style=\"vertical-align:top\"> <div id=\"{{{coverRelatedContent}}}\" class=\"cover-related\"></div> <div id=\"powerVideoList\" class=\"playerskin6\" style=\"overflow-y:scroll\"> {{{contentPlayerSkin}}} </div> </td> <td style=\"vertical-align:top;width:100%\"> <div id=\"powerVideoMainPlaceholder\" class=\"power-video-placeholder power-video-container\"></div> </td> </tr> </table> </div>";
// Exports
            module.exports = code;

            /***/ }),
        /* 51 */
        /***/ (function(module, exports) {

// Module
            var code = " <div id=\"powerVideoThumbnail\" class=\"playerskin2-itemslider-wrapper\"> <div class=\"playerskin2-title {{{itemClass}}}\"> {{{itemTitle}}} </div> <div id=\"powerThumbnail\"> <img width=\"100%\" height=\"100%\" src=\"{{{itemThumb}}}\"> <div class=\"playerskin2-coverbox {{{showPlaying}}}\"></div> <div class=\"playerskin2-nowplaying {{{showPlaying}}}\"> NOW <br> PLAYING </div> <div class=\"playerskin2-playbtn-icon {{{hidePlaying}}}\"> <svg width=\" 100%\" height=\"100%\" viewBox=\"0 0 512 512\"> <path fill=\"#fff\" d=\"M256 0C114.617 0 0 114.615 0 256s114.617 256 256 256 256-114.615 256-256S397.383 0 256 0zm88.48 269.57l-128 80a16.008 16.008 0 0 1-16.238.422A15.994 15.994 0 0 1 192 336V176c0-5.82 3.156-11.172 8.242-13.992a15.957 15.957 0 0 1 16.238.422l128 80c4.676 2.93 7.52 8.055 7.52 13.57s-2.844 10.641-7.52 13.57z\"> </path> </svg> </div> </div> </div>";
// Exports
            module.exports = code;

            /***/ }),
        /* 52 */
        /***/ (function(module, exports) {

// Module
            var code = "<div id=\"powerCurVideoContent\"> <div class=\"playerskin3-title\"> {{{itemTitle}}} </div> <div style=\"height:.4em\"></div> <div class=\"playerskin3-description {{{desClass}}}\"> {{{itemDes}}} </div> </div>";
// Exports
            module.exports = code;

            /***/ }),
        /* 53 */
        /***/ (function(module, exports) {

// Module
            var code = "<div id=\"powerCurVideoContent\"> <div class=\"playerskin3-title\"> {{{itemTitle}}} </div> <div style=\"height:10px\"></div> <div class=\"playerskin3-description description-responsive-6line {{{desClass}}}\" style=\"display:block\"> {{{itemDes}}} </div> </div>";
// Exports
            module.exports = code;

            /***/ }),
        /* 54 */
        /***/ (function(module, exports) {

// Module
            var code = "<div id=\"powerCurVideoContent\"> <div class=\"playerskin3-title\"> {{{itemTitle}}} </div> <div style=\"height:.4em\"></div> <div class=\"playerskin3-description {{{desClass}}}\"> {{{itemDes}}} </div> </div> <br> <div id=\"powerPlayerSkin4\"> <div class=\"playerskin3-title\" style=\"color:#9b9b9b;font-size:15px\"> More Videos </div> <div id=\"{{{coverRelatedContent}}}\" class=\"cover-related\"></div> <div id=\"powerVideoList\" class=\"playerskin6\"> {{{powerVideoList}}} </div> </div>";
// Exports
            module.exports = code;

            /***/ }),
        /* 55 */
        /***/ (function(module, exports) {

// Module
            var code = "<div {{{clickVideoIndex}}} style=\"display:flex;margin-bottom:5px\"> <div id=\"powerThumbnail\" style=\"position:relative\"> <img src=\"{{{itemThumb}}}\" style=\"width:130px;height:73px;max-width:none!important\"> <div class=\"playerskin2-coverbox {{{showPlaying}}}\"></div> <div class=\"playerskin2-nowplaying {{{showPlaying}}}\"> NOW <br> PLAYING </div> <div class=\"playerskin5-thumbnail-playbtn {{{hidePlaying}}}\"> <svg viewBox=\"0 0 494.148 494.148\"> <path fill=\"#fff\" d=\"M405.284 201.188L130.804 13.28C118.128 4.596 105.356 0 94.74 0 74.216 0 61.52 16.472 61.52 44.044v406.124c0 27.54 12.68 43.98 33.156 43.98 10.632 0 23.2-4.6 35.904-13.308l274.608-187.904c17.66-12.104 27.44-28.392 27.44-45.884.004-17.48-9.664-33.764-27.344-45.864z\"> </path> </svg> </div> </div> <div style=\"margin-left:5px;height:73px;overflow:hidden\"> <div class=\"playerskin3-title description-responsive-2line\" style=\"font-size:13px;margin-bottom:4px;white-space:normal\"> {{{itemTitle}}} <a href=\"javascript:void(0);\" class=\"playerskin5-thumbnail-readmore\"> Watch Video </a> </div> <div class=\"playerskin3-description description-responsive-2line {{{desClass}}}\" style=\"font-size:12px\"> {{{itemDes}}} </div> </div> </div>";
// Exports
            module.exports = code;

            /***/ }),
        /* 56 */
        /***/ (function(module, exports) {

// Module
            var code = "<div id=\"powerThumbnail\" class=\"video-list\"> <img class=\"video-image\" src=\"{{{itemThumb}}}\"> <div class=\"playerskin2-coverbox {{{showPlaying}}}\"></div> <div class=\"playerskin2-nowplaying {{{showPlaying}}}\"> NOW <br> PLAYING </div> <div class=\"playerskin5-thumbnail-playbtn {{{hidePlaying}}}\"> <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 494.148 494.148\"> <path fill=\"#fff\" d=\"M405.284 201.188L130.804 13.28C118.128 4.596 105.356 0 94.74 0 74.216 0 61.5216.472 61.52 44.044v406.124c0 27.54 12.68 43.98 33.156 43.98 10.632 0 23.2-4.6 35.904-13.308l274.608-187.904c17.66-12.104 27.44-28.392 27.44-45.884.004-17.48-9.664-33.764-27.344-45.864z\"> </path> </svg> </div> </div>";
// Exports
            module.exports = code;

            /***/ }),
        /* 57 */
        /***/ (function(module, exports) {

// Module
            var code = "{{{openAtag}}} <div id=\"playerskin7\" style=\"position:relative;float:left\"> <div id=\"powerThumbnail\" style=\"position:relative;float:left\"> <div class=\"playerskin2-coverbox {{{showPlaying}}}\"></div> <div class=\"playerskin2-nowplaying {{{showPlaying}}}\"> NOW <br> PLAYING </div> <img width=\"130\" height=\"73\" src=\"{{{itemThumb}}}\"> <div class=\"playerskin5-thumbnail-playbtn {{{hidePlaying}}}\"> <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 494.148 494.148\"> <path fill=\"#fff\" d=\"M405.284 201.188L130.804 13.28C118.128 4.596 105.356 0 94.74 0 74.216 0 61.52 16.472 61.52 44.044v406.124c0 27.54 12.68 43.98 33.156 43.98 10.632 0 23.2-4.6 35.904-13.308l274.608-187.904c17.66-12.104 27.44-28.392 27.44-45.884.004-17.48-9.664-33.764-27.344-45.864z\"> </path> </svg> </div> </div> <div id=\"powerContent\" style=\"margin-left:7px;float:left;width:130px;height:73px;display:flex;flex-direction:column\"> <div class=\"playerskin3-title\" style=\"font-size:14px;margin-bottom:5px\"> {{{itemTitle}}} </div> <div class=\"playerskin3-description description-responsive {{{desClass}}}\" style=\"font-size:13px\"> {{{itemDes}}} </div> </div> </div> {{{closeAtag}}}";
// Exports
            module.exports = code;

            /***/ }),
        /* 58 */
        /***/ (function(module, exports) {

// Module
            var code = "<power id=\"powerVideoPlaceholder\" {{{videoPlaceholderCSS}}}> <power class=\"power-video-container\"> <power id=\"powerVideoMainPlaceholder\" class=\"power-video-placeholder\"></power> </power> <power class=\"power-toparticles-placeholder power-postion-full\"> <power id=\"powerTopArtOverlay\" class=\"power-postion-full power-toparticles_overlay\"> </power> <power class=\"play-pause-btn_wapper\"> <power id=\"powerTopArtPlayBtn\" class=\"play-pause-btn\"> <button type=\"button\"> <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 512 512\"> <path fill=\"#fff\" d=\"M256 0C114.617 0 0 114.615 0 256s114.617 256 256 256 256-114.615 256-256S397.383 0 256 0zm88.48 269.57l-128 80a16.008 16.008 0 0 1-16.238.422A15.994 15.994 0 0 1 192 336V176c0-5.82 3.156-11.172 8.242-13.992a15.957 15.957 0 0 1 16.238.422l128 80c4.676 2.93 7.52 8.055 7.52 13.57s-2.844 10.641-7.52 13.57z\"> </path> </svg> </button> </power> </power> <power id=\"powerTopArtMainContent\" class=\"power-content\" style=\"width:100%;height:100%;position:relative\"> <power class=\"video-controller\"> <power class=\"power-ui-ps-head\"> <power id=\"powerTopArtSliderIndex\" class=\"power_grid_wapper\"> {{{sliderIndex}}} </power> <power class=\"power-logo-title_wrapper\"> <power class=\"power-logo-title\"> <a id=\"{{{iconController}}}\" class=\"img-logo\" href=\"{{{logoClickThrough}}}\" target=\"_blank\"> <img id=\"publisherLogo\" class=\"{{{logoOn}}}\" src=\"{{{logoCustomLink}}}\"> </a> <power id=\"powerTopArtTitle\" class=\"power-top-title\"> {{{mainTitle}}} </power> </power> <power class=\"logo-brand\"> <a class=\"img-logo\" href=\"{{{logoClickThrough}}}\" target=\"_blank\"> <img src=\"https://ms.pubpowerplatform.io/assets/pubpower-white-100x18.png\" style=\"width:100%\"/> </a> </power> </power> </power> <power class=\"power-ui-toparticles-controls\"> <power id=\"powerTopArtPrevBtn\" class=\"power-btn-container\"> <svg viewBox=\"0 0 24 24\" style=\"transform:scale(-1)\"> <path fill=\"white\" d=\"M18 21h3V3h-3v18zM3 21l14-9L3 3v18z\" fill-rule=\"evenodd\"></path> </svg> </power> <power id=\"powerTopArtPlayPauseBtn\" class=\"power-btn-container\"> <svg viewBox=\"0 0 24 24\"> <path fill=\"white\" d=\"M5 4v16l16-8z\" fill-rule=\"evenodd\"></path> </svg> <svg class=\"power-hidden\" viewBox=\"0 0 24 24\"> <path fill=\"white\" d=\"M9 21H3V3h6v18zm12 0h-6V3h6v18z\" fill-rule=\"evenodd\"></path> </svg> </power> <power id=\"powerTopArtNextBtn\" class=\"power-btn-container\"> <svg viewBox=\"0 0 24 24\"> <path fill=\"white\" d=\"M18 21h3V3h-3v18zM3 21l14-9L3 3v18z\" fill-rule=\"evenodd\"></path> </svg> </power> </power> </power> <power id=\"powerTopArtSliderContent\" class=\"power-slidercontent__wrapper\"> <power class=\"power-slidercontent__inner\"> {{{contentPlayerSkin}}} </power> </power> </power> <power class=\"power-description_wrapper\"> <power class=\"power-description_content\"> <a id=\"powerTopArtDescription\" href=\"https://pubpower.io\" target=\"_blank\"> <power class=\"power-description_component\"> <power class=\"power-vertical-line\"></power> <power class=\"power-ui-lines\"> <power class=\"power-description-line_wrapper power-description_line1\"> Line 1 </power> <power class=\"power-description-line_wrapper power-description_line2\"> Line 2 </power> </power> </power> </a> </power> </power> </power> <power id=\"{{{coverRelatedContent}}}\" class=\"cover-related\"></power> </power>";
// Exports
            module.exports = code;

            /***/ }),
        /* 59 */
        /***/ (function(module, exports) {

// Module
            var code = "<power class=\"power_slider_index\"> <power id=\"{{{topArtSliderIndexID}}}\" {{{dataSliderIndex}}} class=\"power_bar_container\"> <power class=\"power_progress_bg\"></power> <power class=\"power_progress_fill\"></power> </power> </power>";
// Exports
            module.exports = code;

            /***/ }),
        /* 60 */
        /***/ (function(module, exports) {

// Module
            var code = "<power class=\"power-topart__frame\" {{{itemAnim}}}> <img class=\"power-topart__img\" src=\"{{{itemImg}}}\"/> <power class=\"power-readmore_wrapper\"> <a href=\"{{{itemLink}}}\" target=\"_blank\"> <power class=\"power-readmore-container\"> <power class=\"power-readmore-text\">READ MORE</power> <power class=\"power-arrow-btn\"> <svg viewBox=\"0 0 20 12\"> <polygon points=\"0 5 16.17 5 12.59 1.41 14 0 20 6 14 12 12.59 10.59 16.17 7 0 7 0 5\"> </polygon> </svg> </power> </power> </a> </power> </power>";
// Exports
            module.exports = code;

            /***/ }),
        /* 61 */
        /***/ (function(module, exports, __webpack_require__) {

            exports = module.exports = __webpack_require__(7)();
            exports.push([module.i, ".power-ad-controls-top {\r\n  width: 32px;\r\n  height: 32px;\r\n  justify-content: center;\r\n  align-items: center;\r\n  display: flex !important;\r\n\r\n  background: rgba(53, 53, 53, 0);\r\n  border-radius: 40px;\r\n  transition: background-color 0.3s, box-shadow 0.3s;\r\n  opacity: 0;\r\n\r\n  -webkit-box-shadow: 0 0 0 1px rgb(0 0 0 / 0%);\r\n  -moz-box-shadow: 0 0 0 1px rgba(0, 0, 0, 0);\r\n  box-shadow: 0 0 0 1px rgb(0 0 0 / 0%);\r\n  margin-right: 10px;\r\n}\r\n\r\n.power-ad-controls-top.power-hover-control {\r\n  opacity: 1;\r\n  background: rgba(53, 53, 53, 0.22);\r\n  -webkit-box-shadow: 0 0 0 1px rgb(0 0 0 / 22%);\r\n  -moz-box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.22);\r\n  box-shadow: 0 0 0 1px rgb(0 0 0 / 22%);\r\n}\r\n\r\n.power-ad-controls-top:hover {\r\n  opacity: 1;\r\n  -webkit-box-shadow: 0 0 0 1px rgba(56, 15, 15, 0.87);\r\n  -moz-box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.87);\r\n  box-shadow: 0 0 0 1px rgb(0 0 0 / 87%);\r\n  background: rgba(53, 53, 53, 0.87);\r\n}\r\n\r\n.power-ad-controls-icon {\r\n  height: 20px;\r\n  width: 20px;\r\n  stroke: transparent !important;\r\n  fill: #fff;\r\n  background-color: transparent !important;\r\n  display: block;\r\n}\r\n\r\n.power-controls-wrapper-ad {\r\n  bottom: -27px !important;\r\n}\r\n\r\n.power-small-device .power-controls-wrapper-ad{\r\n  bottom: -16px !important;\r\n}\r\n\r\n.sound_on .power-ad-controls-icon.power-ad-mute-icon-svg,\r\n.sound_off .power-ad-controls-icon.power-ad-unmute-icon-svg {\r\n  display: none;\r\n}\r\n\r\n.power-play-status .power-ad-controls-icon.power-ad-play-icon-svg,\r\n.power-pause-status .power-ad-controls-icon.power-ad-pause-icon-svg {\r\n  display: none;\r\n}\r\n\r\npower .power-progress-bar.power-ad-progress-bar {\r\n  padding: 0;\r\n  position: absolute;\r\n  bottom: -38px;\r\n  height: 3px;\r\n  cursor: default;\r\n  display: none;\r\n}\r\n\r\n/* .power-float-position power .power-progress-bar.power-ad-progress-bar {\r\n  bottom: -35px;\r\n} */\r\n\r\n.power-small-device power .power-progress-bar.power-ad-progress-bar {\r\n  bottom: -25px;\r\n}\r\n\r\npower .power-progress-bar.power-ad-progress-bar .power-progress-mini {\r\n  background-color: #ffc800!important;\r\n  transition: all 500ms linear 0s;\r\n  -webkit-transition: all 500ms linear 0s;\r\n}\r\n", ""]);

            /***/ }),
        /* 62 */
        /***/ (function(module, exports) {

// Module
            var code = "<power id=\"{{{toggleVolume}}}\" class=\"power-controls-wrapper-ad\" style=\"display:none\"> <power style=\"display:flex\"> <power id=\"{{{playPauseTopArt2}}}\" class=\"{{{classAdControlsTop}}} {{{classStatus}}}\">{{{pausePower}}}{{{playPower}}}</power> <power id=\"{{{volumeTopArt2}}}\" class=\"{{{classAdControlsTop}}} {{{classVol}}}\">{{{mutePower}}}{{{unMutePower}}}</power> </power> </power> ";
// Exports
            module.exports = code;

            /***/ }),
        /* 63 */
        /***/ (function(module, exports) {

// Module
            var code = "<svg markup-inline=\"\" class=\"power-ad-controls-icon {{{class}}}\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"> <title>Unmute</title> <path d=\"M11 2L8.25 4.25 11 7zM0 7v9h5l6 5v-6.5L3.85 7zm17 4.5c0-1.965-1.2-3.735-3-4.5v3l2.8 2.8a3.73 3.73 0 00.2-1.3zm3.4 7.45l-1.85-1.85-2.65-2.6-1.9-1.95-3-3-4.15-4.1-4.95-5L1.45 0 0 1.45 17.15 18.6 19 20.4l3.55 3.6L24 22.55zM14 23a11.83 11.83 0 003.65-1.55l-1.25-1.3c-.747.498-1.553.902-2.4 1.2V23zm9-11.5A11.77 11.77 0 0014 0v1.6A10.53 10.53 0 0120 16l1.45 1.45A11.99 11.99 0 0023 11.5z\"></path> </svg> ";
// Exports
            module.exports = code;

            /***/ }),
        /* 64 */
        /***/ (function(module, exports) {

// Module
            var code = "<svg markup-inline=\"\" class=\"power-ad-controls-icon {{{class}}}\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"> <title>Mute</title> <path d=\"M0 7.913v7.913h4.946l5.935 5.045V1.978L4.946 7.913zm16.815 3.957a5.476 5.476 0 00-2.967-4.946v9.9a5.475 5.475 0 002.967-4.945zM13.848 0v2.077a10.39 10.39 0 010 19.585v2.077a12.05 12.05 0 008.9-11.87A12.05 12.05 0 0013.848 0z\"></path> </svg> ";
// Exports
            module.exports = code;

            /***/ }),
        /* 65 */
        /***/ (function(module, exports) {

// Module
            var code = "<power class=\"{{{classHolderAdFloat}}} power-hidden-exist\"><power class=\"power-ad-float-text\">AD</power></power> {{{closeInAd}}} <power {{{styleVideoWrapper}}} class=\"{{{classPowerVideoWrapper}}}\"> {{{powerLoading}}} {{{video}}} <power class=\"{{{classHeaderWrapper}}}\"> {{{powerProgess}}} {{{powerFooter}}} </power> <power class=\"{{{classHeaderText}}}\"> {{{powerHeader}}} <power class=\"{{{classAboutButton}}} pw-cursor-pointer\"> {{{threeDots}}} <power class=\"{{{classAboutInfo}}} power-hidden-exist\">{{{brandNameAd}}}</power> </power> <power class=\"{{{classAboutButton}}} {{{closeClass}}} pw-cursor-pointer pw-ml-0--\"> {{{xButton}}} </power> </power> <a href=\"{{{powerFooterTitle}}}\"> <power class=\"{{{classFooterText}}} run-animation pw-cursor-pointer\" title=\"{{{powerFooterTitle}}}\" data-index=\"0\">{{{powerFooterText}}}</power> </a> <power class=\"{{{adPlaceHolderClass}}}\"></power> </power> <power class=\"power-holder-float\"></power> <power class=\"{{{classOverlay}}} power-pulsate-overlay\"> <power class=\"{{{classOverlayBtt}}}\"><power class=\"power-overlay-slot\"> {{{playOverlay}}}</power></power> </power> ";
// Exports
            module.exports = code;

            /***/ }),
        /* 66 */
        /***/ (function(module, exports) {

// Module
            var code = "<video class=\"{{{classVideo}}}\" width=\"100%\" muted=\"\" loop=\"\" playsinline></video>";
// Exports
            module.exports = code;

            /***/ }),
        /* 67 */
        /***/ (function(module, exports) {

// Module
            var code = "<power class=\"pw-cursor-pointer {{{closeClass}}}\">{{{closeBtt}}}</power> ";
// Exports
            module.exports = code;

            /***/ }),
        /* 68 */
        /***/ (function(module, exports) {

// Module
            var code = "<power class=\"{{{classLoading}}}\"> <svg class=\"circle\" width=\"70\" height=\"70\"> <circle cx=\"35\" cy=\"35\" r=\"32\"></circle> </svg> <svg class=\"circle active\" width=\"70\" height=\"70\"> <circle cx=\"35\" cy=\"35\" r=\"32\"></circle> </svg> </power>";
// Exports
            module.exports = code;

            /***/ }),
        /* 69 */
        /***/ (function(module, exports) {

// Module
            var code = "{{{powerLogoImg}}} <power class=\"power-text-menu\"> {{{powerText}}} {{{powerTextBy}}} </power>";
// Exports
            module.exports = code;

            /***/ }),
        /* 70 */
        /***/ (function(module, exports) {

// Module
            var code = "<power class=\"power-logo-img pw-cursor-pointer\"> <img class=\"power-logo-img-src\" src=\"{{{logo}}}\"/></power>";
// Exports
            module.exports = code;

            /***/ }),
        /* 71 */
        /***/ (function(module, exports) {

// Module
            var code = "<power class=\"power-text pw-700-w\">{{{logoLeft}}}</power>";
// Exports
            module.exports = code;

            /***/ }),
        /* 72 */
        /***/ (function(module, exports) {

// Module
            var code = "<power class=\"power-text-by\"><power class=\"pw-700-w power-text-powered\">{{{text}}}</power></power>";
// Exports
            module.exports = code;

            /***/ }),
        /* 73 */
        /***/ (function(module, exports) {

// Module
            var code = "<power class=\"{{{classFooterWrapper}}}\"> <power class=\"{{{classControlsWrapper}}}\"> <power class=\"{{{classWrapperButton}}} pw-cursor-pointer {{{classPrev}}}\"> {{{prevBtt}}} </power> <power class=\"{{{classWrapperButton}}} pw-cursor-pointer {{{classPlay}}}\"> {{{playBtt}}} </power> <power class=\"{{{classWrapperButton}}} pw-cursor-pointer {{{classPause}}}\"> {{{pauseBtt}}} </power> <power class=\"{{{classWrapperButton}}} pw-cursor-pointer {{{classNext}}}\"> {{{nextBtt}}} </power> </power> <a class=\"{{{classReadMore}}} pw-cursor-pointer\" href=\"{{{linkAd}}}\" title=\"{{{powerFooterText}}}\" data-index=\"0\"> <power class=\"pw-700-w\"> {{{readMoreText}}} </power> </a> </power>";
// Exports
            module.exports = code;

            /***/ }),
        /* 74 */
        /***/ (function(module, exports) {

// Module
            var code = "<svg class=\"{{{classAboutIcon}}}\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 22 22\"> <path d=\"M11 7c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"></path> </svg> ";
// Exports
            module.exports = code;

            /***/ }),
        /* 75 */
        /***/ (function(module, exports) {

// Module
            var code = "<svg {{{classXButton}}} viewBox=\"0 0 22 22\" class=\"cnx-color-icon\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"> <path d=\"M18 5.4L16.6 4 11 9.6 5.4 4 4 5.4 9.6 11 4 16.6 5.4 18l5.6-5.6 5.6 5.6 1.4-1.4-5.6-5.6z\"></path> </svg> ";
// Exports
            module.exports = code;

            /***/ }),
        /* 76 */
        /***/ (function(module, exports) {

// Module
            var code = "<svg markup-inline=\"\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"power-svg-play-overlay\"> <path d=\"M5 1v22l18-11.083z\"></path> </svg> ";
// Exports
            module.exports = code;

            /***/ }),
        /* 77 */
        /***/ (function(module, exports) {

// Module
            var code = "<power class=\"{{{classHolderCloseAdFloat}}} power-hidden-exist pw-cursor-pointer\">{{{closeBtt}}}</power>";
// Exports
            module.exports = code;

            /***/ }),
        /* 78 */
        /***/ (function(module, exports, __webpack_require__) {

            exports = module.exports = __webpack_require__(7)();
            exports.push([module.i, ".power-container-wrapper power {\r\n\tdisplay: block;\r\n\tline-height: normal;\r\n\tfont-weight: normal;\r\n}\r\n\r\npower .pw-700-w {\r\n\tfont-weight: 700;\r\n}\r\n\r\npower .pw-cursor-pointer {\r\n\tcursor: pointer;\r\n}\r\n\r\npower .power-video-wrapper {\r\n\tposition: relative !important;\r\n\t/* padding-bottom: 6.5px !important; */\r\n\tz-index: 1 !important;\r\n}\r\n\r\npower.power-top-wrapper {\r\n\tfont-family: \"Source Sans Pro\", Helvetica, Arial, sans-serif !important;\r\n\tposition: relative !important;\r\n\tjustify-content: center !important;\r\n\tfont-size: 15px !important;\r\n\tbox-sizing: border-box !important;\r\n\t-ms-text-size-adjust: 100%;\r\n\t-webkit-text-size-adjust: 100%;\r\n\tz-index: 1;\r\n\tmin-width: 256px;\r\n\twidth: 100% !important;\r\n\tbackground-color: white;\r\n}\r\n\r\n@media only screen and (max-width: 601px) {\r\n\tpower .power-top-wrapper {\r\n\t\tfont-size: 13px !important;\r\n\t}\r\n}\r\n\r\n@media only screen and (max-width: 321px) {\r\n\tpower .power-top-wrapper {\r\n\t\tfont-size: 10px !important;\r\n\t}\r\n}\r\n\r\npower .top-place-holder {\r\n\theight: 100%;\r\n\twidth: 100%;\r\n\tposition: absolute !important;\r\n\tleft: 0;\r\n\ttop: 0;\r\n}\r\n\r\npower .power-header-wrapper {\r\n\tposition: absolute !important;\r\n\ttop: 0;\r\n\tleft: 0;\r\n\tdisplay: flex !important;\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tflex-wrap: wrap;\r\n\tpadding: 0px 10px;\r\n\tbox-sizing: border-box;\r\n}\r\n\r\npower .power-progress-bar {\r\n\tflex-basis: 0;\r\n\t-webkit-box-flex: 1;\r\n\t-ms-flex-positive: 1;\r\n\tflex-grow: 1;\r\n\tmax-width: 100%;\r\n\theight: 10px;\r\n\tline-height: 10px;\r\n}\r\n\r\npower .power-header-text {\r\n\tposition: absolute !important;\r\n\ttop: 26px;\r\n\twidth: 100%;\r\n\tdisplay: flex !important;\r\n\tpadding-left: 20px;\r\n\tpadding-right: 17px;\r\n\tbox-sizing: border-box;\r\n\tz-index: 3;\r\n}\r\n\r\npower .power-progress-bar {\r\n\tpadding: 12px 1px;\r\n\twidth: 100%;\r\n\tbox-sizing: border-box;\r\n\tz-index: 3;\r\n}\r\n\r\npower .power-progress-section {\r\n\twidth: 100%;\r\n\tbackground-color: rgba(255, 255, 255, 0.4);\r\n\tdisplay: flex !important;\r\n}\r\n\r\npower .power-progress-mini {\r\n\twidth: 0%;\r\n\theight: 3px;\r\n\tbackground-color: #212529;\r\n}\r\n\r\npower .power-about-button {\r\n\tmargin-left: auto;\r\n\talign-items: center;\r\n\tdisplay: flex !important;\r\n\tjustify-content: center;\r\n\tposition: relative !important;\r\n}\r\n\r\npower .power-about-icon {\r\n\theight: 24px;\r\n\twidth: 24px;\r\n\tstroke: transparent !important;\r\n\tfill: #fff;\r\n\tbackground-color: transparent !important;\r\n}\r\n\r\npower .power-footer-wrapper {\r\n\tposition: absolute !important;\r\n\tbottom: 12%;\r\n\tz-index: 3;\r\n\twidth: 100%;\r\n\tdisplay: flex !important;\r\n}\r\n\r\n/* .power-float-position power .power-footer-wrapper, */\r\n.power-small-device power .power-footer-wrapper {\r\n\tbottom: 20px !important;\r\n}\r\n\r\npower .power-footer-read-more {\r\n\tfont-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, sans-serif;\r\n\tmargin-left: auto;\r\n\tmargin-right: 20px;\r\n\ttext-transform: uppercase;\r\n\tbackground-color: #000000;\r\n\tpadding: 8px 18px;\r\n\tborder-radius: 28px;\r\n\tfont-size: 15px;\r\n\tletter-spacing: 0.16px;\r\n\tborder: 2px solid transparent;\r\n\ttext-decoration: none;\r\n}\r\n\r\n/* .power-float-position power .power-footer-read-more, */\r\n.power-small-device power .power-footer-read-more {\r\n\tfont-size: 12px;\r\n\tpadding: 6px 12px;\r\n}\r\n\r\npower .power-footer-read-more,\r\npower .power-footer-read-more a {\r\n\tcolor: #ffffff;\r\n}\r\n\r\npower .power-footer-read-more a {\r\n\ttext-decoration: none;\r\n}\r\n\r\npower .power-footer-read-more:hover {\r\n\tborder-color: #ffffff;\r\n}\r\n\r\npower .power-controls-wrapper {\r\n\tdisplay: flex !important;\r\n\tpadding-left: 20px;\r\n\talign-items: center;\r\n\tdisplay: flex !important;\r\n\tjustify-content: center;\r\n}\r\n\r\npower .power-prev-btt {\r\n\ttransform: scaleX(-1);\r\n}\r\n\r\npower .power-hidden-exist {\r\n\tdisplay: none !important;\r\n\topacity: 0 !important;\r\n}\r\n\r\npower .power-controls-wrapper svg {\r\n\theight: 24px;\r\n\twidth: 24px;\r\n\tstroke: transparent !important;\r\n\tfill: #fff;\r\n\tbackground-color: transparent !important;\r\n\tdisplay: block;\r\n\tmargin: 3px;\r\n\tborder: 5px solid transparent;\r\n\tborder-radius: 100%;\r\n\tbox-sizing: content-box;\r\n}\r\n\r\n/* .power-float-position power .power-controls-wrapper svg, */\r\n.power-small-device power .power-controls-wrapper svg {\r\n\theight: 20px;\r\n\twidth: 20px;\r\n\tmargin: 0px;\r\n}\r\n\r\npower .power-wrapper-btt,\r\npower .power-about-button {\r\n\tposition: relative !important;\r\n\theight: 38.4px;\r\n\twidth: 38.4px;\r\n}\r\n\r\n.power-small-device power .power-wrapper-btt,\r\n.power-small-device power .power-about-button {\r\n\theight: 30.4px;\r\n\twidth: 30.4px;\r\n}\r\n\r\npower .power-wrapper-btt::before,\r\npower .power-about-button::before {\r\n\ttransform: scale(0);\r\n\tcontent: \"\";\r\n\theight: 100%;\r\n\topacity: 0;\r\n\twidth: 100% !important;\r\n\tbackground-color: #fff;\r\n\tborder-radius: 100%;\r\n\tdisplay: block;\r\n\tposition: absolute;\r\n}\r\n\r\npower .power-wrapper-btt:hover::before,\r\npower .power-about-button:hover::before {\r\n\topacity: 0.4;\r\n\ttransform: scale(1);\r\n\ttransition: all 0.1s ease-in-out;\r\n}\r\n\r\npower .power-about-button.power-click-animation:hover::before {\r\n\topacity: 0;\r\n\ttransform: scale(3);\r\n\ttransition: all 0.15s ease;\r\n}\r\n\r\npower .power-about-info:not(.power-hidden-exist) {\r\n\ttop: 32px;\r\n\tright: 32px;\r\n\tborder: 1px solid black;\r\n\tbackground-color: rgba(13, 25, 45, 0.98);\r\n\tdisplay: flex !important;\r\n\toverflow: hidden;\r\n\tpadding: 5px;\r\n\tpointer-events: all;\r\n\tposition: absolute;\r\n\ttransition: opacity 0.2s ease-in-out;\r\n\twidth: 140px;\r\n\tfont-size: 14px;\r\n\tcolor: white;\r\n}\r\n\r\npower .power-about-img {\r\n\twidth: 18px;\r\n\tmargin-right: 5px;\r\n\tobject-fit: contain;\r\n}\r\n\r\n/* .power-float-position power .power-about-img, */\r\n.power-small-device power .power-about-img {\r\n\twidth: 13px;\r\n}\r\n\r\n/* .power-float-position power .power-about-info, */\r\n.power-small-device power .power-about-info {\r\n\tpadding: 2px;\r\n\twidth: 125px;\r\n\tfont-size: 10px;\r\n}\r\n\r\npower .power-holder-float {\r\n\theight: 71px;\r\n}\r\n\r\npower .power-holder-float.power-active-exist {\r\n\theight: 35px;\r\n\tdisplay: block !important;\r\n}\r\n\r\n.power-small-device power.power-holder-float.power-active-exist {\r\n\theight: 25px;\r\n}\r\n\r\n.power-small-device power .power-holder-float:not(.power-active-exist) {\r\n\theight: 50px;\r\n}\r\n\r\npower .power-video-top {\r\n\tposition: relative !important;\r\n\tz-index: 2 !important;\r\n}\r\n\r\n/* .power-float-position power .power-text, */\r\n.power-small-device power .power-text {\r\n\tfont-size: 12px !important;\r\n}\r\n\r\npower .power-text-by {\r\n\tmargin-top: 2px;\r\n\tfont-size: 13px;\r\n\twidth: fit-content;\r\n}\r\n\r\npower .power-text-powered {\r\n\tdisplay: inline-block !important;\r\n}\r\n\r\n/* .power-float-position power .power-text-by, */\r\n.power-small-device power .power-text-by {\r\n\tfont-size: 10px;\r\n}\r\n\r\npower .vPlayerLoading {\r\n\tborder-radius: inherit;\r\n\tbottom: 0;\r\n\tleft: 0;\r\n\toverflow: hidden;\r\n\tposition: absolute !important;\r\n\tright: 0;\r\n\ttop: 0;\r\n\tz-index: 9999;\r\n\tbackground-color: #060606;\r\n}\r\n\r\npower .power-logo-img {\r\n\tmargin-right: 2px;\r\n\talign-items: center;\r\n\tdisplay: flex !important;\r\n\tjustify-content: center;\r\n}\r\n\r\npower .power-logo-img-src {\r\n\twidth: 40px;\r\n}\r\n\r\n/* .power-float-position power .power-logo-img-src, */\r\n.power-small-device power .power-logo-img-src {\r\n\twidth: 20px;\r\n}\r\n\r\npower .power-text-menu {\r\n\tdisplay: flex !important;\r\n\tflex-direction: column;\r\n\tjustify-content: center;\r\n}\r\n\r\npower .power-text,\r\npower .power-text-by {\r\n\tcolor: #ffffff;\r\n\tbackground: #000000;\r\n\tpadding: 1px 5px;\r\n\ttext-align: center;\r\n}\r\n\r\npower .power-footer-text:not(.power-hidden-exist) {\r\n\tdisplay: -webkit-box !important;\r\n}\r\n\r\npower .power-footer-text {\r\n\tbackground: #ffffff;\r\n\tcolor: #000000;\r\n\tposition: absolute;\r\n\ttop: 92.5%;\r\n\tz-index: 3;\r\n\tmargin-right: 20px;\r\n\tmargin-left: 20px;\r\n\tfont-size: 20px;\r\n\tfont-weight: 700;\r\n\tfont-family: \"Source Serif Pro\", georgia, times, \"Times New Roman\", serif !important;\r\n\tborder-left: thick solid #000000;\r\n\tpadding: 4px 10px 6px;\r\n\t-webkit-line-clamp: 2;\r\n\t-webkit-box-orient: vertical;\r\n\toverflow: hidden;\r\n\tmax-height: 68px;\r\n\tline-height: 1.6;\r\n\ttext-align: left;\r\n}\r\n\r\n/* .power-float-position power .power-footer-text {\r\n\ttop: 97.5%;\r\n} */\r\n\r\npower .run-animation {\r\n\ttransform: scale(0);\r\n\tanimation: pubpower-line-1 500ms normal;\r\n\tanimation-delay: 200ms;\r\n\tanimation-fill-mode: forwards;\r\n\tanimation-play-state: running;\r\n\tanimation-iteration-count: 1;\r\n\tanimation-timing-function: ease-in-out;\r\n\ttransform-origin: left center;\r\n}\r\n\r\npower .run-animation.power-top-wrapper {\r\n\tanimation-delay: 200ms;\r\n\ttransform-origin: right center;\r\n}\r\n\r\n.power-float-position .power-top-wrapper {\r\n\ttransform: translateX(110%);\r\n}\r\n\r\n.power-float-position .power-top-left-wrapper.power-top-wrapper {\r\n\ttransform: translateX(-110%);\r\n}\r\n\r\n.power-float-position .power-top-wrapper.power-slider-animation {\r\n\ttransform: translateX(0%);\r\n\ttransition: all ease 0.4s;\r\n}\r\n\r\n@keyframes pubpower-line-1 {\r\n\t0% {\r\n\t\ttransform: scaleX(0);\r\n\t}\r\n\r\n\t100% {\r\n\t\ttransform: scaleX(1);\r\n\t}\r\n}\r\n\r\n/* .power-float-position power .power-footer-text, */\r\n.power-small-device power .power-footer-text {\r\n\tfont-size: 13px;\r\n\tmax-height: 38px;\r\n\tbox-sizing: content-box !important;\r\n}\r\n\r\npower .power-footer-text:hover {\r\n\tbackground-color: hsl(0, 0%, 80%);\r\n}\r\n\r\npower .power-about-button.power-floating-close {\r\n\tdisplay: none !important;\r\n}\r\n\r\npower .power-floating-close.power-active-exist {\r\n\tdisplay: flex !important;\r\n}\r\n\r\npower .power-overlay-pause {\r\n\tposition: absolute !important;\r\n\ttop: 0;\r\n\tbackground-color: rgba(0, 0, 0, 0.3);\r\n\tz-index: 1;\r\n\theight: 100%;\r\n\twidth: 100%;\r\n}\r\n\r\n.power-float-position power .power-overlay-slot {\r\n\theight: 50px;\r\n\twidth: 50px;\r\n}\r\n\r\n.power-small-device power .power-overlay-slot {\r\n\theight: 38px;\r\n\twidth: 38px;\r\n}\r\n\r\npower .power-overlay-pause:hover {\r\n\tbackground-color: rgba(0, 0, 0, 0.5);\r\n}\r\n\r\npower .power-pulsate-overlay:hover::after {\r\n\tdisplay: flex;\r\n\t/* background: rgb(255, 255, 255, 0.8); */\r\n\tborder-radius: 300px;\r\n\theight: 75px;\r\n\twidth: 75px;\r\n\tanimation: pulsate 1.5s ease;\r\n\tanimation-iteration-count: infinite;\r\n\topacity: 0;\r\n\tcontent: \"\";\r\n\tz-index: -1;\r\n\tmargin: auto;\r\n\tposition: absolute;\r\n\ttop: -20%;\r\n\tleft: 0;\r\n\tright: 0;\r\n\tbottom: 0;\r\n\tborder: 2px solid white;\r\n}\r\n\r\n/* .power-float-position power .power-pulsate-overlay:hover::after, */\r\n.power-small-device power .power-pulsate-overlay:hover::after {\r\n\theight: 55px;\r\n\twidth: 55px;\r\n}\r\n\r\npower .power-overlay-icon-btt {\r\n\tleft: 50%;\r\n\tposition: absolute;\r\n\ttop: 40%;\r\n\ttransform: translateY(-50%) translateX(-50%);\r\n}\r\n\r\npower .power-overlay-slot {\r\n\tbackground: #fff;\r\n\tborder-radius: 42px;\r\n\tdisplay: flex;\r\n\tflex-direction: row;\r\n\theight: 68px;\r\n\twidth: 68px;\r\n\talign-items: center;\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n}\r\n\r\n@keyframes pulsate {\r\n\t0% {\r\n\t\ttransform: scale(0.1, 0.1);\r\n\t\topacity: 0.3;\r\n\t}\r\n\r\n\t30% {\r\n\t\topacity: 0.6;\r\n\t}\r\n\r\n\t60% {\r\n\t\ttransform: scale(0.8, 0.8);\r\n\t\topacity: 0.8;\r\n\t}\r\n\r\n\t100% {\r\n\t\ttransform: scale(1.2, 1.2);\r\n\t\topacity: 0.3;\r\n\t}\r\n}\r\n\r\npower .power-svg-play-overlay {\r\n\tfill: #000000;\r\n\tcolor: #ffffff;\r\n\tstroke: #000000;\r\n\tbackground: transparent !important;\r\n\theight: 24px;\r\n\ttransition: transform 0.2s ease-in-out;\r\n\twidth: 24px;\r\n\toverflow: hidden;\r\n\tvertical-align: middle;\r\n}\r\n\r\npower .power-none-hidden {\r\n\tdisplay: none !important;\r\n}\r\n\r\npower .pw-ml-0-- {\r\n\tmargin-left: 0 !important;\r\n}\r\n\r\npower .power-holder-ad-float {\r\n\theight: 36px;\r\n\tdisplay: flex;\r\n}\r\n\r\n.power-small-device power .power-holder-ad-float {\r\n\theight: 25px;\r\n}\r\n\r\npower .power-ad-float-text {\r\n\twidth: 32px;\r\n\theight: 22px;\r\n\tline-height: 22px;\r\n\tbackground-color: #ffc800;\r\n\tfont-size: 16px;\r\n\ttext-align: center;\r\n\tfont-weight: 500;\r\n\tvertical-align: middle;\r\n\tborder-radius: 0 0 8px 0;\r\n\tfont-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, sans-serif;\r\n}\r\n\r\npower .power-holder-close-ad-float {\r\n\tposition: absolute;\r\n\tright: 0;\r\n\ttop: 0;\r\n\tborder-radius: 0 0 0 12px;\r\n\twidth: 25px;\r\n\theight: 25px;\r\n\tbackground: rgba(53, 53, 53, 0.33);\r\n\t-webkit-box-shadow: 0 0 0 1px rgb(0 0 0 / 33%);\r\n\t-moz-box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.33);\r\n\tbox-shadow: 0 0 0 1px rgb(0 0 0 / 33%);\r\n\ttransition: background-color 0.3s, box-shadow 0.3s;\r\n\tdisplay: none;\r\n}\r\n\r\npower .power-holder-close-ad-float:hover {\r\n\tbackground: rgba(0, 0, 0, .56);\r\n\t-webkit-box-shadow: 0 0 0 1px rgb(0 0 0 / 87%);\r\n\t-moz-box-shadow: 0 0 0 1px rgba(0, 0, 0, .87);\r\n\tbox-shadow: 0 0 0 1px rgb(0 0 0 / 87%);\r\n}\r\n\r\n.power-float-position power .power-holder-close-ad-float:not(.power-hidden-exist) {\r\n\tdisplay: block;\r\n}", ""]);

            /***/ }),
        /* 79 */
        /***/ (function(module, exports) {

            function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
                try {
                    var info = gen[key](arg);
                    var value = info.value;
                } catch (error) {
                    reject(error);
                    return;
                }

                if (info.done) {
                    resolve(value);
                } else {
                    Promise.resolve(value).then(_next, _throw);
                }
            }

            function _asyncToGenerator(fn) {
                return function () {
                    var self = this,
                        args = arguments;
                    return new Promise(function (resolve, reject) {
                        var gen = fn.apply(self, args);

                        function _next(value) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
                        }

                        function _throw(err) {
                            asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
                        }

                        _next(undefined);
                    });
                };
            }

            module.exports = _asyncToGenerator;
            module.exports["default"] = module.exports, module.exports.__esModule = true;

            /***/ }),
        /* 80 */
        /***/ (function(module, exports) {

// Module
            var code = "<div> <div id=\"{{{relatedzoneWrapperID}}}\" class=\"relatedzone__wrapper flex_wrap_row\" {{{backgroundStyle}}}> <div class=\"releatedWrapper\"> <div id=\"relatedZone1ID\" class=\"relatedzone\"> <div class=\"relatedzone_title\" {{{titleStyle}}}>{{{mainTitle}}} </div> <div class=\"relatedzone_main__wrapper\"> {{{relatedZoneDetail}}} </div> <div id=\"footerRelated1ID\" class=\"footerContent\"> Powered by <a href=\"{{{brandHomepage}}}\" target=\"_blank\">{{{brandName}}}</a> </div> </div> <div id=\"relatedZone2ID\" class=\"relatedzone\"> <div class=\"relatedzone_title hide_class\" {{{titleStyle}}}> {{{mainTitle}}} </div> <div class=\"relatedzone_main__wrapper\"> {{{relatedZoneDetail2}}} </div> <div id=\"footerRelated1ID\" class=\"footerContent\"> Powered by <a href=\"{{{brandHomepage}}}\" target=\"_blank\">{{{brandName}}}</a> </div> </div> </div> </div> <div id=\"adsPlaceholderWrapperAllID\" class=\"adsPlaceholderWrapper\"> <div id=\"adsPlaceholderWrapper1\" class=\"adsPlaceholder1 hide_border\"> <span class=\"adsTitle adsTitle_center\">Featured Advertising</span> <div id=\"adsPlaceholder1\" style=\"min-width:300px;min-height:250px;width:300px;height:250px;margin:0 auto\"> </div> </div> <div id=\"adsPlaceholderWrapper2\" class=\"max_width adsPlaceholder2_horizontal hide_border\"> <span class=\"adsTitle adsTitle_center\">Featured Advertising</span> <div id=\"adsPlaceholder2\" style=\"min-width:300px;min-height:250px;width:300px;height:250px;margin:0 auto\"> </div> </div> </div> </div>";
// Exports
            module.exports = code;

            /***/ }),
        /* 81 */
        /***/ (function(module, exports) {

// Module
            var code = "<div class=\"wrapper_all\" style=\"align-items:unset;flex-wrap:wrap\"> <div id=\"{{{relatedzoneWrapperID}}}\" class=\"relatedzone__wrapper\" {{{backgroundStyle}}}> <div id=\"relatedZone1ID\" class=\"relatedzone\"> <div class=\"relatedzone_title\" {{{titleStyle}}}>{{{mainTitle}}} </div> <div class=\"relatedzone_main__wrapper\" style=\"height:100%\"> {{{relatedZoneDetail}}} </div> <div id=\"footerRelated1ID\" class=\"footerContent\" style=\"margin-top:unset\"> Powered by <a href=\"{{{brandHomepage}}}\" target=\"_blank\">{{{brandName}}}</a> </div> </div> </div> <div id=\"adsPlaceholderWrapperAllID\"> <div id=\"adsPlaceholderWrapper1\" class=\"adsPlaceholder2_horizontal_noborder\"> <div id=\"adsPlaceholder1\" style=\"min-width:300px;min-height:250px;width:300px;height:250px;margin:0 auto\"> </div> </div> <span class=\"adsTitle adsTitle_center adsTitle_temp3_top adsTitle_temp3_bot\">Featured Advertising</span> <div id=\"adsPlaceholderWrapper2\" class=\"adsPlaceholder2_horizontal_noborder\"> <div id=\"adsPlaceholder2\" style=\"min-width:300px;min-height:250px;width:300px;height:250px;margin:0 auto\"> </div> </div> </div> </div>";
// Exports
            module.exports = code;

            /***/ }),
        /* 82 */
        /***/ (function(module, exports) {

// Module
            var code = "<div> <div id=\"{{{relatedzoneWrapperID}}}\" class=\"quizz__wrapper\"> <div class=\"pp_quizz_wrapper\"> <div class=\"pp_quizz_container\"> <div class=\"pp_quizz_content active\"> <div class=\"pp_content__wrapper\"> <div class=\"pp_quizz_header\"> <div class=\"inner\"> <div class=\"pp_header txt_quizz\"> <span class=\"txt\">Quiz</span> </div> <div class=\"pp_header logo_quizz\"> <a class=\"logo\" href=\"https://crooksandliars.com/\" target=\"_blank\" style=\"background-image:url({{{logoBrand}}})\"> </a> </div> </div> </div> <div class=\"pp_quizz_body_wrapper\" style=\"padding:2.5em 1.25em 2.1875em\"> <div class=\"pp_quizz_body\"> <div class=\"quizz_body\"> <div class=\"pp_result_wrapper\"> <div id=\"progressbarID\" class=\"pp_progressbar progressbar\"> <div class=\"pp_progressindicator progressindicator\"> </div> </div> <div class=\"pp_feedback_wrapper\"> <div id=\"feedBackUnLikeID\" class=\"pp_feedback rewardsfeedback\" style=\"display:none\"> <span class=\"icon\"> <span class=\"value\"> <span class=\"number\">👎</span> </span> </span> <span class=\"text\" style=\"margin-bottom:.5em\">Incorrect!</span> </div> <div id=\"feedBackLikeID\" class=\"pp_feedback rewardsfeedback\" style=\"display:none\"> <span class=\"icon\"> <span class=\"value\"> <span class=\"number\">👍</span> </span> </span> <span class=\"text\">Correct!</span> </div> </div> </div> <div id=\"questionID\" class=\"pp_question\"> <h3 class=\"text\"> Which president made Christmas a national holiday? </h3> </div> <div id=\"answerID\" class=\"pp_answer\"></div> </div> </div> </div> <div class=\"pp_quizz_footer\"> <div class=\"inner\"> <a class=\"quizz_footer\" href=\"{{{poweredByURL}}}\" target=\"_blank\"> <span class=\"poweredby\">powered by </span> {{{poweredByLogo}}} </a> </div> <button id=\"skipBtnID\" class=\"footer_skip\"> <div class=\"skipinner\"> <div>Skip</div> </div> </button> </div> <div id=\"imgBgID\" class=\"pp_quizz_imgbg_wrapper\"> <div class=\"pp_quizz_fade\" {{{backgroundStyle}}}></div> <div class=\"pp_quizz_img\"></div> </div> </div> </div> </div> </div> </div> <div id=\"adsPlaceholderWrapperAllID\" class=\"adsPlaceholderWrapper\"> <div id=\"adsPlaceholderWrapper1\" class=\"adsPlaceholder1 hide_border\"> <span class=\"adsTitle adsTitle_center\">Featured Advertising</span> <div id=\"adsPlaceholder1\" style=\"min-width:300px;min-height:250px;width:300px;height:250px;margin:0 auto\"> </div> </div> <div id=\"adsPlaceholderWrapper2\" class=\"max_width adsPlaceholder2_horizontal hide_border\"> <span class=\"adsTitle adsTitle_center\">Featured Advertising</span> <div id=\"adsPlaceholder2\" style=\"min-width:300px;min-height:250px;width:300px;height:250px;margin:0 auto\"> </div> </div> </div> </div>";
// Exports
            module.exports = code;

            /***/ }),
        /* 83 */
        /***/ (function(module, exports) {

// Module
            var code = "<li id=\"{{{askID}}}\" class=\"answer_wrapper answer\"> <span class=\"pp_wrapper\"> <span class=\"answer_desc\"> <span class=\"icon\"></span> <span class=\"text\"> {{{txtAsk}}} </span> </span> <span id=\"{{{percentBarID}}}\" class=\"pp_percentagebar\"> <span class=\"foreground\"></span> <span class=\"background\"></span> <span class=\"percent\"></span> </span> </span> </li>";
// Exports
            module.exports = code;

            /***/ }),
        /* 84 */
        /***/ (function(module, exports) {

// Module
            var code = "<li id=\"{{{askID}}}\" class=\"answer_wrapper answer_quizpic\"> <span class=\"quizzpic_img_wrapper\"> <span class=\"quizzpic_img graphic\" style=\"background-image:url({{{imgAsk}}})\"> <span class=\"fade\"></span> </span> <span class=\"quizzpic_desc desc\"> <span class=\"text\">{{{txtAsk}}}</span> </span> </span> <span class=\"pp_percentagebar bar_vertical\" style=\"display:none\"> <span id=\"{{{percentBarID}}}\" class=\"quizzpic_vertical_wrapper\"> <span class=\"foreground_vertical\"></span> <span class=\"percent_vertical\">0%</span> </span> </span> </li>";
// Exports
            module.exports = code;

            /***/ }),
        /* 85 */
        /***/ (function(module, exports, __webpack_require__) {

            exports = module.exports = __webpack_require__(7)();
            exports.push([module.i, "*,\r\n*:before,\r\n*:after {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\n.wrapper_all {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n.relatedzone__wrapper {\r\n    background-color: white;\r\n    box-shadow: 0 2px 8px 0 rgba(0, 23, 57, 0.2);\r\n    border-radius: 6px;\r\n    padding: 12px 15px 12px 15px;\r\n    font-family: 'Source Sans Pro', sans-serif;\r\n    border: 1px solid #e5e7eb;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    min-width: 300px;\r\n}\r\n\r\n.releatedWrapper {\r\n    display: flex;\r\n    width: 100%;\r\n}\r\n\r\n.relatedzone {\r\n    width: 100%;\r\n    min-width: 170px;\r\n    padding-left: 5px;\r\n    padding-right: 5px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n}\r\n\r\n.relatedzone_vertical {\r\n    padding-left: 0px;\r\n    padding-right: 0px;\r\n    padding-bottom: 5px;\r\n}\r\n\r\n.relatedzone_title {\r\n    min-height: 25px;\r\n    font-size: 15px;\r\n    color: rgb(51, 51, 51);\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;\r\n}\r\n\r\n.relatedzone_main__wrapper {\r\n    padding: 0px;\r\n    height: 220px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-evenly;\r\n\r\n    /* position: relative;\r\n    padding-bottom: 56.25%;  */\r\n    /* 16:9 */\r\n}\r\n\r\n.relatedzone_main__wrapper a {\r\n    text-decoration: none;\r\n    display: flex;\r\n    height: 60px;\r\n}\r\n\r\n.relatedzone_main__wrapper img {\r\n    object-fit: cover;\r\n    height: 60px;\r\n    width: 60px;\r\n    border-radius: 6px;\r\n}\r\n\r\n.descContent {\r\n    color: initial;\r\n    margin-left: 10px;\r\n    display: block;\r\n    max-height: 55px;\r\n    overflow: hidden;\r\n    line-height: 18px;\r\n    font-size: 13px;\r\n}\r\n\r\n.footerContent {\r\n    font-family: 'TT Commons', sans-serif;\r\n    display: block;\r\n    text-align: right;\r\n    font-size: 8px;\r\n    line-height: 14px;\r\n    letter-spacing: 0.4px;\r\n    margin-top: -10px;\r\n    /* margin-right: 5px; */\r\n}\r\n\r\n.adsTitle {\r\n    display: block;\r\n    margin-bottom: 12px;\r\n    margin-top: -2px;\r\n    font-size: 12px;\r\n    color: rgba(0, 0, 0, 0.5);\r\n}\r\n\r\n.adsTitle_center {\r\n    display: inline-block;\r\n    position: relative;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n}\r\n\r\n.adsTitle_temp3_top {\r\n    margin-top: 15px;\r\n}\r\n\r\n.adsTitle_temp3_bot {\r\n    margin-bottom: 15px;\r\n}\r\n\r\n.adsPlaceholderWrapper {\r\n    display: flex;\r\n    width: 100%;\r\n    padding-top: 15px;\r\n}\r\n\r\n.adsPlaceholder1 {\r\n    width: 100%;\r\n    padding-right: 15px;\r\n    border-right: 1px solid #e5e7eb;\r\n}\r\n\r\n.adsPlaceholder_temp3 {\r\n    padding-top: 15px;\r\n}\r\n\r\n.adsPlaceholder2_horizontal {\r\n    padding-left: 15px;\r\n    border-left: 1px solid #e5e7eb;\r\n}\r\n\r\n.adsPlaceholder2_horizontal_noborder {\r\n    padding-left: 15px;\r\n}\r\n\r\n.adsPlaceholder2_vertical {\r\n    padding-top: 15px;\r\n    border-top: 1px solid #e5e7eb;\r\n}\r\n\r\n.max_width {\r\n    width: 100%;\r\n}\r\n\r\n.hide_class {\r\n    opacity: 0 !important;\r\n}\r\n\r\n.hide_border {\r\n    border: unset !important;\r\n    padding-left: unset !important;\r\n    padding-right: unset !important;\r\n}\r\n\r\n.flex_wrap_row {\r\n    flex-wrap: wrap;\r\n}\r\n\r\n.margin_center {\r\n    margin: 0 auto;\r\n}\r\n\r\n.power-video-iframe {\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    top: 0;\r\n    left: 0;\r\n    bottom: 0;\r\n    right: 0;\r\n}\r\n\r\n/* Quizz */\r\n.quizz__wrapper {\r\n    background-color: white;\r\n    box-shadow: 0 2px 8px 0 rgba(0, 23, 57, 0.2);\r\n    border-radius: 6px;\r\n    /* padding: 12px 15px 12px 15px; */\r\n    font-family: 'Source Sans Pro', sans-serif;\r\n    border: 1px solid #e5e7eb;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    min-width: 300px;\r\n}\r\n\r\n.pp_quizz_wrapper {\r\n    width: 100%;\r\n    margin: 0 auto;\r\n    height: 100%;\r\n    display: table;\r\n    /* padding: 10px 0 10px 0; */\r\n    position: relative;\r\n    overflow: hidden;\r\n}\r\n\r\n.pp_quizz_container {\r\n    width: 100%;\r\n    height: 100%;\r\n    margin: 0 auto;\r\n    position: relative;\r\n    overflow: auto;\r\n    background: radial-gradient(ellipse at center, rgba(82, 83, 84, 0.85) 0%, rgba(0, 10, 10, 0.9) 100%);\r\n    border-radius: 0.625em;\r\n}\r\n\r\n.pp_quizz_content {\r\n    top: 0;\r\n    flex: 1;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    opacity: 0;\r\n    position: absolute;\r\n    border-radius: 0.625em;\r\n}\r\n\r\n.pp_quizz_content.active {\r\n    z-index: 1;\r\n    opacity: 1;\r\n    transition-timing-function: ease-in;\r\n}\r\n\r\n.pp_quizz_content:not(.overlay) {\r\n    transition: all .5s ease-out 0s;\r\n}\r\n\r\n.pp_content__wrapper {\r\n    color: #fff;\r\n    width: 100%;\r\n    height: 100%;\r\n    overflow: hidden;\r\n    position: relative;\r\n    border-radius: inherit;\r\n}\r\n\r\n/* .pp_content__wrapper .uniquecontent {\r\n    width: 100%;\r\n    height: 100%;\r\n    position: relative;\r\n} */\r\n\r\n.c0030 {\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n.pp_quizz_header {\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 2.5em;\r\n    padding: 0em 1.25em;\r\n    z-index: 4;\r\n    position: absolute;\r\n}\r\n\r\n.pp_quizz_header .inner {\r\n    width: 100%;\r\n    height: 100%;\r\n    display: table;\r\n}\r\n\r\n.pp_header {\r\n    display: table-cell;\r\n    vertical-align: middle;\r\n}\r\n\r\n.txt_quizz {\r\n    text-align: left;\r\n}\r\n\r\n.logo_quizz {\r\n    text-align: right;\r\n}\r\n\r\n.txt_quizz .txt {\r\n    font-size: 0.875em;\r\n    font-weight: bold;\r\n    text-transform: capitalize;\r\n}\r\n\r\n.logo_quizz .logo {\r\n    width: 6.875em;\r\n    height: 2.5em;\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n    background-size: contain;\r\n    background-color: transparent;\r\n    background-repeat: no-repeat;\r\n    background-position: 100% 50%;\r\n}\r\n\r\na {\r\n    color: #568db2;\r\n}\r\n\r\n.pp_quizz_body_wrapper {\r\n    width: 100%;\r\n    height: 100%;\r\n    z-index: 3;\r\n    position: relative;\r\n    text-align: left;\r\n}\r\n\r\n/* .c0011 {\r\n    width: 100%;\r\n    height: 100%;\r\n} */\r\n\r\n.pp_quizz_body {\r\n    width: 100%;\r\n    height: 100%;\r\n    display: flex;\r\n    position: relative;\r\n    align-items: flex-end;\r\n    flex-direction: column;\r\n}\r\n\r\n.quizz_body {\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n.quizz_body .pp_result_wrapper {\r\n    top: 0em;\r\n    width: 100%;\r\n    height: 0;\r\n    z-index: 2;\r\n    position: absolute;\r\n}\r\n\r\n.pp_feedback_wrapper {\r\n    width: 100%;\r\n    display: table;\r\n    font-size: 100%;\r\n}\r\n\r\n.pp_feedback_wrapper .rewardsfeedback {\r\n    text-align: left;\r\n    display: table-cell;\r\n    vertical-align: middle;\r\n}\r\n\r\n.quizz_body .rewardsfeedback .icon,\r\n.quizz_body .rewardsfeedback .text {\r\n    opacity: 0;\r\n    transform: translateX(-300%);\r\n}\r\n\r\n.pp_feedback .icon {\r\n    width: 3.125em;\r\n    height: 3.125em;\r\n    position: relative;\r\n    /* background: #e8aa0c; */\r\n    /* transition: background .2s linear 0s; */\r\n    text-align: center;\r\n    margin-right: 0.25em;\r\n    border-radius: 50%;\r\n}\r\n\r\n.pp_feedback .icon,\r\n.pp_feedback .text {\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n}\r\n\r\n.pp_feedback .icon .value {\r\n    top: 50%;\r\n    left: 50%;\r\n    color: #ffffff;\r\n    position: absolute;\r\n    transform: translate(-50%, -50%);\r\n}\r\n\r\n.pp_feedback .icon .value .number {\r\n    display: block;\r\n    font-size: 1.375em;\r\n    font-weight: 600;\r\n    line-height: 1;\r\n}\r\n\r\n.pp_feedback .text {\r\n    color: #ffffff;\r\n    font-size: 1em;\r\n}\r\n\r\n.pp_feedback .icon,\r\n.pp_feedback .text {\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n}\r\n\r\n.pp_question {\r\n    height: 35%;\r\n}\r\n\r\n.pp_question .text {\r\n    font-size: 2.1vh;\r\n    /* font-size: 1.125em; */\r\n    line-height: 1.1;\r\n    padding-top: 0.9375em;\r\n}\r\n\r\nh1,\r\nh2,\r\nh3,\r\nh4,\r\nh5 {\r\n    font-weight: normal;\r\n}\r\n\r\n.pp_quizz_body .pp_answer {\r\n    width: 100%;\r\n    position: relative;\r\n    padding-bottom: 0.4375em;\r\n    height: 65%;\r\n}\r\n\r\n.quizz_body .pp_answer ul {\r\n    top: 50%;\r\n    left: 50%;\r\n    width: 100%;\r\n    height: auto;\r\n    position: absolute;\r\n    transform: translate(-50%, -50%);\r\n}\r\n\r\n.quizz_body .pp_answer .answer:nth-child(1) {\r\n    animation-delay: .9s;\r\n}\r\n\r\n.quizz_body .pp_answer .answer:nth-child(2) {\r\n    animation-delay: 1.1s;\r\n}\r\n\r\n.quizz_body .pp_answer .answer:nth-child(3) {\r\n    animation-delay: 1.3s;\r\n}\r\n\r\n.quizz_body .pp_answer .answer:nth-child(4) {\r\n    animation-delay: 1.5s;\r\n}\r\n\r\n.quizz_body .pp_answer .answer {\r\n    display: block;\r\n    transform: translate3d(-150%, 0, 0);\r\n    margin-left: -1.25em;\r\n    margin-right: -1.25em;\r\n    margin-bottom: 0.375rem;\r\n    animation-name: slideInLeft;\r\n    animation-delay: 0s;\r\n    animation-duration: .3s;\r\n    animation-fill-mode: forwards;\r\n}\r\n\r\n.answer_wrapper {\r\n    cursor: pointer;\r\n    margin: 0;\r\n    padding: 0;\r\n    position: relative;\r\n    list-style: none;\r\n}\r\n\r\n/* Quiz Pic */\r\n.pp_quizpic_ask {\r\n    width: 100%;\r\n    position: relative;\r\n    padding-bottom: 0.4375em;\r\n    height: 65%;\r\n}\r\n\r\n.pp_quizpic_ask ul {\r\n    width: 100% !important;\r\n    height: 85% !important;\r\n    text-align: center !important;\r\n}\r\n\r\n.answer_wrapper.answer_quizpic {\r\n    width: 46%;\r\n    height: 100%;\r\n    display: inline-block;\r\n    text-align: center;\r\n    margin-right: 1%;\r\n    vertical-align: top;\r\n}\r\n\r\n.quizzpic_img_wrapper {\r\n    top: 50%;\r\n    left: 50%;\r\n    position: absolute;\r\n    transform: translate(-50%, -50%);\r\n    transition: all .3s linear 0s;\r\n}\r\n\r\n.quizzpic_img {\r\n    width: 5em;\r\n    height: 5em;\r\n    display: inline-block;\r\n    position: relative;\r\n    overflow: hidden;\r\n    border-radius: 50%;\r\n    background-size: cover;\r\n    background-color: #808080;\r\n    background-repeat: no-repeat;\r\n    background-position: 50% 50%;\r\n    font-size: 110%;\r\n}\r\n\r\n.quizzpic_img .fade {\r\n    top: 50%;\r\n    left: 50%;\r\n    width: 100%;\r\n    height: 100%;\r\n    display: block;\r\n    opacity: 0;\r\n    position: absolute;\r\n    transform: translate(-50%, -50%);\r\n    border-color: #808080;\r\n    border-width: 0.0625em;\r\n    border-style: solid;\r\n    border-radius: 50%;\r\n}\r\n\r\n.quizzpic_img.graphic {\r\n    opacity: 0;\r\n    animation-name: fadeIn;\r\n    animation-delay: 0s;\r\n    animation-duration: .3s;\r\n    animation-fill-mode: forwards;\r\n}\r\n\r\n.answer_wrapper.answer_quizpic:nth-child(1) .graphic {\r\n    animation-delay: .9s;\r\n}\r\n\r\n.answer_wrapper.answer_quizpic:nth-child(2) .graphic {\r\n    animation-delay: 1.1s;\r\n}\r\n\r\n.quizzpic_desc {\r\n    width: 90%;\r\n    margin: 0.4375em auto 0 auto;\r\n    height: 1.875em;\r\n    display: table;\r\n    background: rgba(255, 255, 255, 0.30);\r\n    text-align: center;\r\n    border-radius: 1.5625em;\r\n}\r\n\r\n.quizzpic_desc .text {\r\n    height: 100%;\r\n    display: table-cell;\r\n    font-size: 0.75em;\r\n    font-family: Helvetica;\r\n    line-height: 1.1;\r\n    vertical-align: middle;\r\n}\r\n\r\n.answer_wrapper .quizzpic_desc.desc {\r\n    opacity: 0;\r\n    animation-name: fadeInDown;\r\n    animation-delay: 0s;\r\n    animation-duration: .3s;\r\n    animation-fill-mode: forwards;\r\n}\r\n\r\n.answer_wrapper .quizzpic_desc.answer_quizpic:nth-child(1) .desc {\r\n    animation-delay: 1.5s;\r\n}\r\n\r\n.answer_wrapper .quizzpic_desc.answer_quizpic:nth-child(2) .desc {\r\n    animation-delay: 1.8s;\r\n}\r\n\r\n\r\n.bar_vertical {\r\n    width: 60%;\r\n    height: 47%;\r\n}\r\n\r\n.quizzpic_vertical_wrapper {\r\n    width: 100%;\r\n    height: 100%;\r\n    display: block;\r\n}\r\n\r\n.foreground_vertical {\r\n    left: 50%;\r\n    width: 3.125em;\r\n    bottom: 0.625em;\r\n    height: 0%;\r\n    display: block;\r\n    position: absolute;\r\n    margin-left: -1.5625em;\r\n    border-radius: 0.4375em 0.4375em 0em 0em;\r\n    background: #D8D8D8;\r\n    transition: height .8s linear .5s, background .3s linear .5s;\r\n}\r\n\r\n.quizzpic_vertical_wrapper.selected-true.correct-true .foreground_vertical {\r\n    background: #4EA808;\r\n}\r\n\r\n.quizzpic_vertical_wrapper.selected-true .foreground_vertical {\r\n    background: rgba(219, 3, 3, 1);\r\n}\r\n\r\n.percent_vertical {\r\n    opacity: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    bottom: -0.9375em;\r\n    position: absolute;\r\n    font-size: 0.875em;\r\n    text-align: center;\r\n    transition: opacity .5s linear 0s;\r\n}\r\n\r\n.quizzpic_vertical_wrapper.finished-true .percent_vertical {\r\n    opacity: 1;\r\n}\r\n\r\n.answer_quizpic.finished-true .quizzpic_desc {\r\n    display: none;\r\n}\r\n\r\n.pp_wrapper {\r\n    width: 100%;\r\n    display: table;\r\n    position: relative;\r\n    background: rgba(255, 255, 255, 0.30);\r\n    /* transition: background .2s linear 0s; */\r\n}\r\n\r\n.answer_desc {\r\n    color: #fff;\r\n    height: 1.875em;\r\n    margin: 0 auto;\r\n    display: flex;\r\n    z-index: 2;\r\n    padding: 0em 0.625em;\r\n    position: relative;\r\n    align-items: center;\r\n    line-height: 0;\r\n    justify-content: space-evenly;\r\n}\r\n\r\n.answer_desc .icon {\r\n    width: 0.625em;\r\n    height: 0.625em;\r\n    background: rgba(255, 255, 255, 0.20);\r\n    border-radius: 50%;\r\n}\r\n\r\n.answer_desc .text {\r\n    font-size: 2vh;\r\n    /* font-size: 1em; */\r\n    line-height: 1em;\r\n}\r\n\r\n.answer_desc .text {\r\n    width: 90%;\r\n    word-break: break-all;\r\n}\r\n\r\n.pp_quizz_footer {\r\n    left: 0px;\r\n    width: 100%;\r\n    padding: 0em 1.25em;\r\n    z-index: 4;\r\n    display: flex;\r\n    position: absolute;\r\n    align-items: center;\r\n    height: 2.1875em;\r\n    bottom: 0em;\r\n}\r\n\r\n.pp_quizz_footer .inner {\r\n    width: 100%;\r\n    display: flex;\r\n    position: relative;\r\n    line-height: 0;\r\n    align-items: center;\r\n}\r\n\r\n.quizz_footer {\r\n    display: inline-block;\r\n    line-height: 0;\r\n    text-decoration: none;\r\n}\r\n\r\n.quizz_footer .poweredby {\r\n    color: #ffffff;\r\n    display: inline-block;\r\n    font-size: 0.625em;\r\n    font-weight: 600;\r\n    line-height: 0;\r\n    margin-right: 0.375em;\r\n    margin-bottom: -0.125em;\r\n    /* vertical-align: middle; */\r\n    text-decoration: none;\r\n}\r\n\r\n.pp_quizz_footer .inner .logo.insticator .logoimage {\r\n    font-size: 115%;\r\n}\r\n\r\n.quizz_footer .logoimage {\r\n    width: 5em;\r\n    height: 0.75em;\r\n    /* width: 4.5em;\r\n    height: 0.65em; */\r\n    display: inline-block;\r\n    line-height: 0;\r\n    vertical-align: middle;\r\n    background-size: contain;\r\n    background-color: transparent;\r\n    /* background-image: url(https://ms.pubpowerplatform.io/assets/pubpower-white-100x18.png); */\r\n    background-repeat: no-repeat;\r\n    /* background-position: 50%; */\r\n}\r\n\r\n.logoimageVli {\r\n    font-size: 1.9vh;\r\n    display: unset;\r\n    color: white;\r\n}\r\n\r\n.accessibility {\r\n    display: none;\r\n}\r\n\r\n.footer_skip {\r\n    color: #ececec;\r\n    height: fit-content;\r\n    border: none;\r\n    cursor: pointer;\r\n    outline: none;\r\n    z-index: 10;\r\n    font-size: 0.9166666666666666em;\r\n    transform: translate3d(200%, 0, 0);\r\n    background: transparent;\r\n    transition: all .2s linear 0s;\r\n    line-height: 1;\r\n    margin-bottom: 0.125em;\r\n    border-radius: 0.1875em;\r\n    animation-name: fadeInRight;\r\n    animation-delay: .2s;\r\n    animation-duration: .4s;\r\n    animation-fill-mode: forwards;\r\n}\r\n\r\n.footer_skip.hidden-true {\r\n    animation-name: fadeOutRight;\r\n    animation-delay: .1s;\r\n    animation-duration: .4s;\r\n    animation-fill-mode: forwards;\r\n}\r\n\r\n.footer_skip .skipinner {\r\n    width: 100%;\r\n    display: flex;\r\n    padding: 0.3125em;\r\n    align-items: center;\r\n    justify-content: flex-end;\r\n}\r\n\r\n.footer_skip i {\r\n    font-size: 0.75em;\r\n    margin-left: 0.3125em;\r\n}\r\n\r\n.fa-chevron-right:before {\r\n    content: \"\\f054\";\r\n}\r\n\r\n.pp_quizz_imgbg_wrapper {\r\n    top: 50%;\r\n    left: 50%;\r\n    width: 100%;\r\n    height: 100%;\r\n    z-index: 1;\r\n    position: absolute;\r\n    transform: translate(-50%, -50%);\r\n}\r\n\r\n.pp_quizz_fade {\r\n    top: 50%;\r\n    left: 50%;\r\n    width: 100%;\r\n    height: 100%;\r\n    z-index: 2;\r\n    position: absolute;\r\n    transform: translate(-50%, -50%);\r\n    background: rgba(48, 48, 48, 0.8);\r\n}\r\n\r\n.pp_quizz_img {\r\n    top: 50%;\r\n    left: 50%;\r\n    width: 100%;\r\n    height: 100%;\r\n    z-index: 1;\r\n    position: absolute;\r\n    transform: translate(-50%, -50%);\r\n    transition: background-image .5s ease-in 0s;\r\n    background-size: cover;\r\n    background-color: #000;\r\n    background-repeat: no-repeat;\r\n    background-position: 50% 50%;\r\n}\r\n\r\n.pp_progressbar {\r\n    width: 100%;\r\n    height: 0.3125em;\r\n    position: relative;\r\n    border-radius: 0.625em;\r\n    margin-bottom: 0.4375em;\r\n    background-color: #555;\r\n}\r\n\r\n.pp_progressbar.result_next_ques .progressindicator {\r\n    background-color: #092e77;\r\n}\r\n\r\n.pp_progressbar.result_next_ques {\r\n    background-color: #D8D8D8;\r\n}\r\n\r\n.pp_progressbar:not(.result_next_ques) {\r\n    opacity: 0;\r\n    transform: translateY(-300%);\r\n}\r\n\r\n.pp_progressindicator {\r\n    top: 0px;\r\n    left: 0px;\r\n    width: 0%;\r\n    height: 100%;\r\n    position: absolute;\r\n    /* transition: width 2600ms linear 0s; */\r\n    border-radius: inherit;\r\n    background-color: rgb(255, 255, 255);\r\n}\r\n\r\n.quizz_body .progressbar.result_next_ques,\r\n.quizz_body .facebook,\r\n.quizz_body .twitter {\r\n    opacity: 0;\r\n    transform: translateY(-300%);\r\n}\r\n\r\n.pp_percentagebar {\r\n    left: 50%;\r\n    width: 100%;\r\n    height: 100%;\r\n    bottom: 0;\r\n    display: block;\r\n    z-index: 1;\r\n    position: absolute;\r\n    transform: translateX(-50%);\r\n    border-radius: inherit;\r\n}\r\n\r\n.background {\r\n    left: 0;\r\n    width: 100%;\r\n    bottom: 0;\r\n    height: 100%;\r\n    display: block;\r\n    z-index: 1;\r\n    position: absolute;\r\n    transition: width .8s linear 0s, background .3s linear 0s;\r\n}\r\n\r\n.foreground {\r\n    left: 0;\r\n    width: 0%;\r\n    bottom: 0;\r\n    height: 100%;\r\n    display: block;\r\n    z-index: 2;\r\n    position: absolute;\r\n    transition: width .8s linear 0s, background .3s linear 0s;\r\n}\r\n\r\n.percent {\r\n    opacity: 0;\r\n    top: 50%;\r\n    right: 0.9375em;\r\n    z-index: 3;\r\n    position: absolute;\r\n    font-size: 80%;\r\n    transform: translateY(-50%);\r\n    transition: opacity .5s linear 0s;\r\n}\r\n\r\n.pp_percentagebar.finished-true .percent {\r\n    opacity: 1;\r\n}\r\n\r\n.pp_percentagebar .foreground {\r\n    background: rgba(25, 25, 25, 0.70);\r\n}\r\n\r\n.pp_percentagebar.selected-false.correct-true .background {\r\n    opacity: .3;\r\n    background: #25661b;\r\n    transition-delay: 1.6s;\r\n}\r\n\r\n.pp_percentagebar.selected-false.correct-true .foreground {\r\n    background: #63913f;\r\n    transition-delay: 1.6s;\r\n}\r\n\r\n.pp_percentagebar.selected-true.correct-true .background {\r\n    opacity: .3;\r\n    background: #25661b;\r\n}\r\n\r\n.pp_percentagebar.selected-true.correct-true .foreground {\r\n    background: #63913f;\r\n}\r\n\r\n.pp_percentagebar.selected-true.correct-false .background {\r\n    opacity: .3;\r\n    background: #872323;\r\n}\r\n\r\n.pp_percentagebar.selected-true.correct-false .foreground {\r\n    background: #a53636;\r\n}\r\n\r\n@media only screen and (min-width: 35em) {\r\n    .bar_vertical {\r\n        height: 44%;\r\n    }\r\n\r\n    .txt_quizz {\r\n        font-size: 105%;\r\n    }\r\n\r\n    .logo_quizz {\r\n        font-size: 105%;\r\n    }\r\n\r\n    .quizz_body .pp_answer {\r\n        font-size: 105%;\r\n    }\r\n\r\n    .pp_quizz_footer {\r\n        font-size: 110%;\r\n    }\r\n}\r\n\r\n@keyframes slideInLeft {\r\n    from {\r\n        transform: translate3d(-100%, 0, 0);\r\n        visibility: visible;\r\n    }\r\n\r\n    to {\r\n        transform: translate3d(0, 0, 0);\r\n    }\r\n}\r\n\r\n@keyframes slideOutLeft {\r\n    from {\r\n        transform: translate3d(0, 0, 0);\r\n    }\r\n\r\n    to {\r\n        transform: translate3d(-100%, 0, 0);\r\n        visibility: hidden;\r\n    }\r\n}\r\n\r\n@keyframes fadeInRight {\r\n    from {\r\n        opacity: 0;\r\n        transform: translate3d(100%, 0, 0);\r\n    }\r\n\r\n    to {\r\n        opacity: 1;\r\n        transform: none;\r\n    }\r\n}\r\n\r\n@keyframes fadeOutRight {\r\n    from {\r\n        opacity: 1;\r\n    }\r\n\r\n    to {\r\n        opacity: 0;\r\n        transform: translate3d(100%, 0, 0);\r\n    }\r\n}\r\n\r\n@keyframes fadeInDown {\r\n    from {\r\n        opacity: 0;\r\n        transform: translate3d(0, -100%, 0);\r\n    }\r\n\r\n    to {\r\n        opacity: 1;\r\n        transform: none;\r\n    }\r\n}\r\n\r\n@keyframes fadeInLeft {\r\n    from {\r\n        opacity: 0;\r\n        transform: translate3d(-100%, 0, 0);\r\n    }\r\n\r\n    to {\r\n        opacity: 1;\r\n        transform: none;\r\n    }\r\n}\r\n\r\n@keyframes leftToRight {\r\n    from {\r\n        width: 0%;\r\n    }\r\n\r\n    to {\r\n        width: 100%;\r\n    }\r\n}\r\n\r\n@keyframes fadeIn {\r\n    from {\r\n        opacity: 0;\r\n    }\r\n\r\n    to {\r\n        opacity: 1;\r\n    }\r\n}\r\n\r\n@keyframes fadeInDown {\r\n    from {\r\n        opacity: 0;\r\n        transform: translate3d(0, -100%, 0);\r\n    }\r\n\r\n    to {\r\n        opacity: 1;\r\n        transform: none;\r\n    }\r\n}\r\n\r\n.quizz_body .pp_result_wrapper .rewardsfeedback.show .icon {\r\n    animation-name: fadeInDown;\r\n    animation-delay: 1.8s;\r\n    animation-duration: .2s;\r\n    animation-fill-mode: forwards;\r\n}\r\n\r\n.quizz_body .pp_result_wrapper .rewardsfeedback.show .text {\r\n    animation-name: fadeInLeft;\r\n    animation-delay: 2.3s;\r\n    animation-duration: .2s;\r\n    animation-fill-mode: forwards;\r\n}\r\n\r\n.quizz_body .pp_result_wrapper .progressbar.result_next_ques {\r\n    animation-name: fadeInDown;\r\n    animation-delay: 1.3s;\r\n    animation-duration: .3s;\r\n    animation-fill-mode: forwards;\r\n}\r\n\r\n.quizz_body .pp_result_wrapper .pp_progressindicator.progressindicator.direc_leftToRight {\r\n    width: 100%;\r\n    transition-property: width;\r\n    transition-duration: 2.6s;\r\n    transition-delay: 1.6s;\r\n    transition-timing-function: linear;\r\n}\r\n\r\n.quizz_body .pp_question {\r\n    transform: translate3d(-100%, 0, 0);\r\n    animation-name: slideInLeft;\r\n    animation-delay: .1s;\r\n    animation-duration: .3s;\r\n    animation-fill-mode: forwards;\r\n}\r\n\r\n.quizz_body .pp_question.hide_question {\r\n    animation-name: slideOutLeft;\r\n    animation-delay: .1s;\r\n    animation-duration: .3s;\r\n    animation-fill-mode: forwards;\r\n}", ""]);

            /***/ }),
        /* 86 */
        /***/ (function(module, exports) {

            function _arrayWithHoles(arr) {
                if (Array.isArray(arr)) return arr;
            }

            module.exports = _arrayWithHoles;
            module.exports["default"] = module.exports, module.exports.__esModule = true;

            /***/ }),
        /* 87 */
        /***/ (function(module, exports) {

            function _iterableToArrayLimit(arr, i) {
                if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
                var _arr = [];
                var _n = true;
                var _d = false;
                var _e = undefined;

                try {
                    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                        _arr.push(_s.value);

                        if (i && _arr.length === i) break;
                    }
                } catch (err) {
                    _d = true;
                    _e = err;
                } finally {
                    try {
                        if (!_n && _i["return"] != null) _i["return"]();
                    } finally {
                        if (_d) throw _e;
                    }
                }

                return _arr;
            }

            module.exports = _iterableToArrayLimit;
            module.exports["default"] = module.exports, module.exports.__esModule = true;

            /***/ }),
        /* 88 */
        /***/ (function(module, exports, __webpack_require__) {

            var arrayLikeToArray = __webpack_require__(89);

            function _unsupportedIterableToArray(o, minLen) {
                if (!o) return;
                if (typeof o === "string") return arrayLikeToArray(o, minLen);
                var n = Object.prototype.toString.call(o).slice(8, -1);
                if (n === "Object" && o.constructor) n = o.constructor.name;
                if (n === "Map" || n === "Set") return Array.from(o);
                if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
            }

            module.exports = _unsupportedIterableToArray;
            module.exports["default"] = module.exports, module.exports.__esModule = true;

            /***/ }),
        /* 89 */
        /***/ (function(module, exports) {

            function _arrayLikeToArray(arr, len) {
                if (len == null || len > arr.length) len = arr.length;

                for (var i = 0, arr2 = new Array(len); i < len; i++) {
                    arr2[i] = arr[i];
                }

                return arr2;
            }

            module.exports = _arrayLikeToArray;
            module.exports["default"] = module.exports, module.exports.__esModule = true;

            /***/ }),
        /* 90 */
        /***/ (function(module, exports) {

            function _nonIterableRest() {
                throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
            }

            module.exports = _nonIterableRest;
            module.exports["default"] = module.exports, module.exports.__esModule = true;

            /***/ }),
        /* 91 */
        /***/ (function(module, exports, __webpack_require__) {

            __webpack_require__(92);
            var entryUnbind = __webpack_require__(119);

            module.exports = entryUnbind('Array', 'find');


            /***/ }),
        /* 92 */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var $ = __webpack_require__(93);
            var $find = __webpack_require__(103).find;
            var addToUnscopables = __webpack_require__(118);

            var FIND = 'find';
            var SKIPS_HOLES = true;

// Shouldn't skip holes
            if (FIND in []) Array(1)[FIND](function () { SKIPS_HOLES = false; });

// `Array.prototype.find` method
// https://tc39.es/ecma262/#sec-array.prototype.find
            $({ target: 'Array', proto: true, forced: SKIPS_HOLES }, {
                find: function find(callbackfn /* , that = undefined */) {
                    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
                }
            });

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
            addToUnscopables(FIND);


            /***/ }),
        /* 93 */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var global = __webpack_require__(6);
            var getOwnPropertyDescriptor = __webpack_require__(95).f;
            var isForced = __webpack_require__(99);
            var path = __webpack_require__(32);
            var bind = __webpack_require__(33);
            var createNonEnumerableProperty = __webpack_require__(34);
            var has = __webpack_require__(17);

            var wrapConstructor = function (NativeConstructor) {
                var Wrapper = function (a, b, c) {
                    if (this instanceof NativeConstructor) {
                        switch (arguments.length) {
                            case 0: return new NativeConstructor();
                            case 1: return new NativeConstructor(a);
                            case 2: return new NativeConstructor(a, b);
                        } return new NativeConstructor(a, b, c);
                    } return NativeConstructor.apply(this, arguments);
                };
                Wrapper.prototype = NativeConstructor.prototype;
                return Wrapper;
            };

            /*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
*/
            module.exports = function (options, source) {
                var TARGET = options.target;
                var GLOBAL = options.global;
                var STATIC = options.stat;
                var PROTO = options.proto;

                var nativeSource = GLOBAL ? global : STATIC ? global[TARGET] : (global[TARGET] || {}).prototype;

                var target = GLOBAL ? path : path[TARGET] || (path[TARGET] = {});
                var targetPrototype = target.prototype;

                var FORCED, USE_NATIVE, VIRTUAL_PROTOTYPE;
                var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;

                for (key in source) {
                    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
                    // contains in native
                    USE_NATIVE = !FORCED && nativeSource && has(nativeSource, key);

                    targetProperty = target[key];

                    if (USE_NATIVE) if (options.noTargetGet) {
                        descriptor = getOwnPropertyDescriptor(nativeSource, key);
                        nativeProperty = descriptor && descriptor.value;
                    } else nativeProperty = nativeSource[key];

                    // export native or implementation
                    sourceProperty = (USE_NATIVE && nativeProperty) ? nativeProperty : source[key];

                    if (USE_NATIVE && typeof targetProperty === typeof sourceProperty) continue;

                    // bind timers to global for call from export context
                    if (options.bind && USE_NATIVE) resultProperty = bind(sourceProperty, global);
                    // wrap global constructors for prevent changs in this version
                    else if (options.wrap && USE_NATIVE) resultProperty = wrapConstructor(sourceProperty);
                    // make static versions for prototype methods
                    else if (PROTO && typeof sourceProperty == 'function') resultProperty = bind(Function.call, sourceProperty);
                    // default case
                    else resultProperty = sourceProperty;

                    // add a flag to not completely full polyfills
                    if (options.sham || (sourceProperty && sourceProperty.sham) || (targetProperty && targetProperty.sham)) {
                        createNonEnumerableProperty(resultProperty, 'sham', true);
                    }

                    target[key] = resultProperty;

                    if (PROTO) {
                        VIRTUAL_PROTOTYPE = TARGET + 'Prototype';
                        if (!has(path, VIRTUAL_PROTOTYPE)) {
                            createNonEnumerableProperty(path, VIRTUAL_PROTOTYPE, {});
                        }
                        // export virtual prototype methods
                        path[VIRTUAL_PROTOTYPE][key] = sourceProperty;
                        // export real prototype methods
                        if (options.real && targetPrototype && !targetPrototype[key]) {
                            createNonEnumerableProperty(targetPrototype, key, sourceProperty);
                        }
                    }
                }
            };


            /***/ }),
        /* 94 */
        /***/ (function(module, exports) {

            var g;

// This works in non-strict mode
            g = (function() {
                return this;
            })();

            try {
                // This works if eval is allowed (see CSP)
                g = g || new Function("return this")();
            } catch (e) {
                // This works if the window reference is available
                if (typeof window === "object") g = window;
            }

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

            module.exports = g;


            /***/ }),
        /* 95 */
        /***/ (function(module, exports, __webpack_require__) {

            var DESCRIPTORS = __webpack_require__(9);
            var propertyIsEnumerableModule = __webpack_require__(96);
            var createPropertyDescriptor = __webpack_require__(26);
            var toIndexedObject = __webpack_require__(97);
            var toPrimitive = __webpack_require__(29);
            var has = __webpack_require__(17);
            var IE8_DOM_DEFINE = __webpack_require__(31);

// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
            var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
            exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
                O = toIndexedObject(O);
                P = toPrimitive(P, true);
                if (IE8_DOM_DEFINE) try {
                    return $getOwnPropertyDescriptor(O, P);
                } catch (error) { /* empty */ }
                if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
            };


            /***/ }),
        /* 96 */
        /***/ (function(module, exports, __webpack_require__) {

            "use strict";

            var $propertyIsEnumerable = {}.propertyIsEnumerable;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
            var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
            var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
            exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
                var descriptor = getOwnPropertyDescriptor(this, V);
                return !!descriptor && descriptor.enumerable;
            } : $propertyIsEnumerable;


            /***/ }),
        /* 97 */
        /***/ (function(module, exports, __webpack_require__) {

// toObject with fallback for non-array-like ES3 strings
            var IndexedObject = __webpack_require__(27);
            var requireObjectCoercible = __webpack_require__(28);

            module.exports = function (it) {
                return IndexedObject(requireObjectCoercible(it));
            };


            /***/ }),
        /* 98 */
        /***/ (function(module, exports, __webpack_require__) {

            var global = __webpack_require__(6);
            var isObject = __webpack_require__(10);

            var document = global.document;
// typeof document.createElement is 'object' in old IE
            var EXISTS = isObject(document) && isObject(document.createElement);

            module.exports = function (it) {
                return EXISTS ? document.createElement(it) : {};
            };


            /***/ }),
        /* 99 */
        /***/ (function(module, exports, __webpack_require__) {

            var fails = __webpack_require__(8);

            var replacement = /#|\.prototype\./;

            var isForced = function (feature, detection) {
                var value = data[normalize(feature)];
                return value == POLYFILL ? true
                    : value == NATIVE ? false
                        : typeof detection == 'function' ? fails(detection)
                            : !!detection;
            };

            var normalize = isForced.normalize = function (string) {
                return String(string).replace(replacement, '.').toLowerCase();
            };

            var data = isForced.data = {};
            var NATIVE = isForced.NATIVE = 'N';
            var POLYFILL = isForced.POLYFILL = 'P';

            module.exports = isForced;


            /***/ }),
        /* 100 */
        /***/ (function(module, exports) {

            module.exports = function (it) {
                if (typeof it != 'function') {
                    throw TypeError(String(it) + ' is not a function');
                } return it;
            };


            /***/ }),
        /* 101 */
        /***/ (function(module, exports, __webpack_require__) {

            var DESCRIPTORS = __webpack_require__(9);
            var IE8_DOM_DEFINE = __webpack_require__(31);
            var anObject = __webpack_require__(102);
            var toPrimitive = __webpack_require__(29);

// eslint-disable-next-line es/no-object-defineproperty -- safe
            var $defineProperty = Object.defineProperty;

// `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty
            exports.f = DESCRIPTORS ? $defineProperty : function defineProperty(O, P, Attributes) {
                anObject(O);
                P = toPrimitive(P, true);
                anObject(Attributes);
                if (IE8_DOM_DEFINE) try {
                    return $defineProperty(O, P, Attributes);
                } catch (error) { /* empty */ }
                if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
                if ('value' in Attributes) O[P] = Attributes.value;
                return O;
            };


            /***/ }),
        /* 102 */
        /***/ (function(module, exports, __webpack_require__) {

            var isObject = __webpack_require__(10);

            module.exports = function (it) {
                if (!isObject(it)) {
                    throw TypeError(String(it) + ' is not an object');
                } return it;
            };


            /***/ }),
        /* 103 */
        /***/ (function(module, exports, __webpack_require__) {

            var bind = __webpack_require__(33);
            var IndexedObject = __webpack_require__(27);
            var toObject = __webpack_require__(30);
            var toLength = __webpack_require__(104);
            var arraySpeciesCreate = __webpack_require__(106);

            var push = [].push;

// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterOut }` methods implementation
            var createMethod = function (TYPE) {
                var IS_MAP = TYPE == 1;
                var IS_FILTER = TYPE == 2;
                var IS_SOME = TYPE == 3;
                var IS_EVERY = TYPE == 4;
                var IS_FIND_INDEX = TYPE == 6;
                var IS_FILTER_OUT = TYPE == 7;
                var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
                return function ($this, callbackfn, that, specificCreate) {
                    var O = toObject($this);
                    var self = IndexedObject(O);
                    var boundFunction = bind(callbackfn, that, 3);
                    var length = toLength(self.length);
                    var index = 0;
                    var create = specificCreate || arraySpeciesCreate;
                    var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_OUT ? create($this, 0) : undefined;
                    var value, result;
                    for (;length > index; index++) if (NO_HOLES || index in self) {
                        value = self[index];
                        result = boundFunction(value, index, O);
                        if (TYPE) {
                            if (IS_MAP) target[index] = result; // map
                            else if (result) switch (TYPE) {
                                case 3: return true;              // some
                                case 5: return value;             // find
                                case 6: return index;             // findIndex
                                case 2: push.call(target, value); // filter
                            } else switch (TYPE) {
                                case 4: return false;             // every
                                case 7: push.call(target, value); // filterOut
                            }
                        }
                    }
                    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
                };
            };

            module.exports = {
                // `Array.prototype.forEach` method
                // https://tc39.es/ecma262/#sec-array.prototype.foreach
                forEach: createMethod(0),
                // `Array.prototype.map` method
                // https://tc39.es/ecma262/#sec-array.prototype.map
                map: createMethod(1),
                // `Array.prototype.filter` method
                // https://tc39.es/ecma262/#sec-array.prototype.filter
                filter: createMethod(2),
                // `Array.prototype.some` method
                // https://tc39.es/ecma262/#sec-array.prototype.some
                some: createMethod(3),
                // `Array.prototype.every` method
                // https://tc39.es/ecma262/#sec-array.prototype.every
                every: createMethod(4),
                // `Array.prototype.find` method
                // https://tc39.es/ecma262/#sec-array.prototype.find
                find: createMethod(5),
                // `Array.prototype.findIndex` method
                // https://tc39.es/ecma262/#sec-array.prototype.findIndex
                findIndex: createMethod(6),
                // `Array.prototype.filterOut` method
                // https://github.com/tc39/proposal-array-filtering
                filterOut: createMethod(7)
            };


            /***/ }),
        /* 104 */
        /***/ (function(module, exports, __webpack_require__) {

            var toInteger = __webpack_require__(105);

            var min = Math.min;

// `ToLength` abstract operation
// https://tc39.es/ecma262/#sec-tolength
            module.exports = function (argument) {
                return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
            };


            /***/ }),
        /* 105 */
        /***/ (function(module, exports) {

            var ceil = Math.ceil;
            var floor = Math.floor;

// `ToInteger` abstract operation
// https://tc39.es/ecma262/#sec-tointeger
            module.exports = function (argument) {
                return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
            };


            /***/ }),
        /* 106 */
        /***/ (function(module, exports, __webpack_require__) {

            var isObject = __webpack_require__(10);
            var isArray = __webpack_require__(107);
            var wellKnownSymbol = __webpack_require__(108);

            var SPECIES = wellKnownSymbol('species');

// `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
            module.exports = function (originalArray, length) {
                var C;
                if (isArray(originalArray)) {
                    C = originalArray.constructor;
                    // cross-realm fallback
                    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
                    else if (isObject(C)) {
                        C = C[SPECIES];
                        if (C === null) C = undefined;
                    }
                } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
            };


            /***/ }),
        /* 107 */
        /***/ (function(module, exports, __webpack_require__) {

            var classof = __webpack_require__(16);

// `IsArray` abstract operation
// https://tc39.es/ecma262/#sec-isarray
// eslint-disable-next-line es/no-array-isarray -- safe
            module.exports = Array.isArray || function isArray(arg) {
                return classof(arg) == 'Array';
            };


            /***/ }),
        /* 108 */
        /***/ (function(module, exports, __webpack_require__) {

            var global = __webpack_require__(6);
            var shared = __webpack_require__(109);
            var has = __webpack_require__(17);
            var uid = __webpack_require__(113);
            var NATIVE_SYMBOL = __webpack_require__(35);
            var USE_SYMBOL_AS_UID = __webpack_require__(117);

            var WellKnownSymbolsStore = shared('wks');
            var Symbol = global.Symbol;
            var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;

            module.exports = function (name) {
                if (!has(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == 'string')) {
                    if (NATIVE_SYMBOL && has(Symbol, name)) {
                        WellKnownSymbolsStore[name] = Symbol[name];
                    } else {
                        WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
                    }
                } return WellKnownSymbolsStore[name];
            };


            /***/ }),
        /* 109 */
        /***/ (function(module, exports, __webpack_require__) {

            var IS_PURE = __webpack_require__(110);
            var store = __webpack_require__(111);

            (module.exports = function (key, value) {
                return store[key] || (store[key] = value !== undefined ? value : {});
            })('versions', []).push({
                version: '3.11.1',
                mode: IS_PURE ? 'pure' : 'global',
                copyright: '© 2021 Denis Pushkarev (zloirock.ru)'
            });


            /***/ }),
        /* 110 */
        /***/ (function(module, exports) {

            module.exports = true;


            /***/ }),
        /* 111 */
        /***/ (function(module, exports, __webpack_require__) {

            var global = __webpack_require__(6);
            var setGlobal = __webpack_require__(112);

            var SHARED = '__core-js_shared__';
            var store = global[SHARED] || setGlobal(SHARED, {});

            module.exports = store;


            /***/ }),
        /* 112 */
        /***/ (function(module, exports, __webpack_require__) {

            var global = __webpack_require__(6);
            var createNonEnumerableProperty = __webpack_require__(34);

            module.exports = function (key, value) {
                try {
                    createNonEnumerableProperty(global, key, value);
                } catch (error) {
                    global[key] = value;
                } return value;
            };


            /***/ }),
        /* 113 */
        /***/ (function(module, exports) {

            var id = 0;
            var postfix = Math.random();

            module.exports = function (key) {
                return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
            };


            /***/ }),
        /* 114 */
        /***/ (function(module, exports, __webpack_require__) {

            var classof = __webpack_require__(16);
            var global = __webpack_require__(6);

            module.exports = classof(global.process) == 'process';


            /***/ }),
        /* 115 */
        /***/ (function(module, exports, __webpack_require__) {

            var global = __webpack_require__(6);
            var userAgent = __webpack_require__(116);

            var process = global.process;
            var versions = process && process.versions;
            var v8 = versions && versions.v8;
            var match, version;

            if (v8) {
                match = v8.split('.');
                version = match[0] + match[1];
            } else if (userAgent) {
                match = userAgent.match(/Edge\/(\d+)/);
                if (!match || match[1] >= 74) {
                    match = userAgent.match(/Chrome\/(\d+)/);
                    if (match) version = match[1];
                }
            }

            module.exports = version && +version;


            /***/ }),
        /* 116 */
        /***/ (function(module, exports, __webpack_require__) {

            var getBuiltIn = __webpack_require__(36);

            module.exports = getBuiltIn('navigator', 'userAgent') || '';


            /***/ }),
        /* 117 */
        /***/ (function(module, exports, __webpack_require__) {

            /* eslint-disable es/no-symbol -- required for testing */
            var NATIVE_SYMBOL = __webpack_require__(35);

            module.exports = NATIVE_SYMBOL
                && !Symbol.sham
                && typeof Symbol.iterator == 'symbol';


            /***/ }),
        /* 118 */
        /***/ (function(module, exports) {

            module.exports = function () { /* empty */ };


            /***/ }),
        /* 119 */
        /***/ (function(module, exports, __webpack_require__) {

            var getBuiltIn = __webpack_require__(36);

            module.exports = getBuiltIn;


            /***/ }),
        /* 120 */
        /***/ (function(module) {

            module.exports = JSON.parse("{\"1ad4good\":{\"param\":\"cpm\",\"type\":\"decimal\"},\"adspend\":{\"param\":\"bidfloor\",\"type\":\"float\"},\"adlivetech\":{\"param\":\"bidFloor\",\"type\":\"float\"},\"adrelevantis\":{\"param\":\"cpm\",\"type\":\"decimal\"},\"apacdex\":{\"param\":\"floorPrice\",\"type\":\"float\"},\"aol\":{\"param\":\"bidFloor\",\"type\":\"string\"},\"appnexus\":{\"param\":\"reserve\",\"type\":\"float\"},\"beachfront\":{\"param\":\"bidfloor\",\"type\":\"float\"},\"bidfluence\":{\"param\":\"reservePrice\",\"type\":\"string\"},\"brightcom\":{\"param\":\"bidFloor\",\"type\":\"float\"},\"cedato\":{\"param\":\"bidfloor\",\"type\":\"integer\"},\"connectad\":{\"param\":\"bidfloor\",\"type\":\"integer\"},\"conversant\":{\"param\":\"bidfloor\",\"type\":\"float\"},\"cosmos\":{\"param\":\"bidFloor\",\"type\":\"float\"},\"dailyhunt\":{\"param\":\"bidfloor\",\"type\":\"float\"},\"districtmDMX\":{\"param\":\"floor\",\"type\":\"string\"},\"emx_digital\":{\"param\":\"bidfloor\",\"type\":\"string\"},\"ebdr\":{\"param\":\"bidfloor\",\"type\":\"string\"},\"eywamedia\":{\"param\":\"bidFloor\",\"type\":\"string\"},\"fidelity\":{\"param\":\"floor\",\"type\":\"float\"},\"getintent\":{\"param\":\"floor\",\"type\":\"float\"},\"goldbach\":{\"param\":\"reserve\",\"type\":\"float\"},\"gumgum\":{\"param\":\"bidfloor\",\"type\":\"float\"},\"improvedigital\":{\"param\":\"bidFloor\",\"type\":\"float\"},\"iqm\":{\"param\":\"bidfloor\",\"type\":\"float\"},\"ironsource\":{\"param\":\"floorPrice\",\"type\":\"float\"},\"kobler\":{\"param\":\"floorPrice\",\"type\":\"float\"},\"kumma\":{\"param\":\"bidFloor\",\"type\":\"string\"},\"lemma\":{\"param\":\"bidFloor\",\"type\":\"float\"},\"madvertise\":{\"param\":\"floor\",\"type\":\"float\"},\"medianet\":{\"param\":\"bidfloor\",\"type\":\"float\"},\"mediaforce\":{\"param\":\"bidfloor\",\"type\":\"float\"},\"mgid\":{\"param\":\"bidFloor\",\"type\":\"float\"},\"mobsmart\":{\"param\":\"floorPrice\",\"type\":\"integer\"},\"mytarget\":{\"param\":\"bidfloor\",\"type\":\"integer\"},\"nafdigital\":{\"param\":\"bidFloor\",\"type\":\"float\"},\"newborntownWeb\":{\"param\":\"bidfloor\",\"type\":\"float\"},\"nextroll\":{\"param\":\"bidfloor\",\"type\":\"float\"},\"onedisplay\":{\"param\":\"bidFloor\",\"type\":\"string\"},\"onomagic\":{\"param\":\"bidFloor\",\"type\":\"float\"},\"openx\":{\"param\":\"customFloor\",\"type\":\"float\"},\"optimatic\":{\"param\":\"bidfloor\",\"type\":\"float\"},\"orbidder\":{\"param\":\"bidfloor\",\"type\":\"float\"},\"otm\":{\"param\":\"bidfloor\",\"type\":\"integer\"},\"platformio\":{\"param\":\"bidFloor\",\"type\":\"string\"},\"playwire\":{\"param\":\"bidFloor\",\"type\":\"float\"},\"pubmatic\":{\"param\":\"kadfloor\",\"type\":\"string\"},\"pwbid\":{\"param\":\"bidFloor\",\"type\":\"float\"},\"pulsepoint\":{\"param\":\"bidfloor\",\"type\":\"float\"},\"quantumdex\":{\"param\":\"floorPrice\",\"type\":\"float\"},\"readpeak\":{\"param\":\"bidfloor\",\"type\":\"float\"},\"revcontent\":{\"param\":\"bidfloor\",\"type\":\"float\"},\"richaudience\":{\"param\":\"bidfloor\",\"type\":\"float\"},\"rise\":{\"param\":\"floorPrice\",\"type\":\"float\"},\"rtbdemand\":{\"param\":\"floor\",\"type\":\"float\"},\"rtbhouse\":{\"param\":\"bidfloor\",\"type\":\"float\"},\"rubicon\":{\"param\":\"floor\",\"type\":\"float\"},\"sharethrough\":{\"param\":\"bidfloor\",\"type\":\"float\"},\"smartadserver\":{\"param\":\"bidfloor\",\"type\":\"float\"},\"smartx\":{\"param\":\"bidfloor\",\"type\":\"float\"},\"sonobi\":{\"param\":\"floor\",\"type\":\"float\"},\"sortable\":{\"param\":\"floor\",\"type\":\"float\"},\"sovrn\":{\"param\":\"bidfloor\",\"type\":\"string\"},\"spotx\":{\"param\":\"price_floor\",\"type\":\"float\"},\"synacormedia\":{\"param\":\"bidfloor\",\"type\":\"float\"},\"grid\":{\"param\":\"bidFloor\",\"type\":\"float\"},\"gridNM\":{\"param\":\"floorcpm\",\"type\":\"float\"},\"tim\":{\"param\":\"bidfloor\",\"type\":\"float\"},\"tremor\":{\"param\":\"floor\",\"type\":\"string\"},\"triplelift\":{\"param\":\"floor\",\"type\":\"float\"},\"triplelift_native\":{\"param\":\"floor\",\"type\":\"float\"},\"truereach\":{\"param\":\"bidfloor\",\"type\":\"float\"},\"vertoz\":{\"param\":\"cpmFloor\",\"type\":\"float\"},\"vi\":{\"param\":\"bidFloor\",\"type\":\"float\"},\"vidazoo\":{\"param\":\"bidFloor\",\"type\":\"float\"},\"videonow\":{\"param\":\"bidFloor\",\"type\":\"string\"},\"vuble\":{\"param\":\"floorPrice\",\"type\":\"float\"},\"waardex\":{\"param\":\"bidfloor\",\"type\":\"float\"},\"widespace\":{\"param\":\"bidFloor\",\"type\":\"string\"},\"windtalker\":{\"param\":\"bidFloor\",\"type\":\"string\"},\"yieldmo\":{\"param\":\"bidFloor\",\"type\":\"float\"},\"valueimpression\":{\"param\":\"floorPrice\",\"type\":\"float\"}}");

            /***/ }),
        /* 121 */
        /***/ (function(module) {

            module.exports = JSON.parse("{\"horizontal\":[[970,250],[970,90],[728,90],[468,60],[320,100],[320,50],[300,50]],\"square\":[[336,280],[300,250]],\"vertical\":[[300,600],[160,600],[120,600]]}");

            /***/ }),
        /* 122 */
        /***/ (function(module, exports, __webpack_require__) {

            /**
             * Copyright (c) 2014-present, Facebook, Inc.
             *
             * This source code is licensed under the MIT license found in the
             * LICENSE file in the root directory of this source tree.
             */

            var runtime = (function (exports) {
                "use strict";

                var Op = Object.prototype;
                var hasOwn = Op.hasOwnProperty;
                var undefined; // More compressible than void 0.
                var $Symbol = typeof Symbol === "function" ? Symbol : {};
                var iteratorSymbol = $Symbol.iterator || "@@iterator";
                var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
                var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

                function define(obj, key, value) {
                    Object.defineProperty(obj, key, {
                        value: value,
                        enumerable: true,
                        configurable: true,
                        writable: true
                    });
                    return obj[key];
                }
                try {
                    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
                    define({}, "");
                } catch (err) {
                    define = function(obj, key, value) {
                        return obj[key] = value;
                    };
                }

                function wrap(innerFn, outerFn, self, tryLocsList) {
                    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
                    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
                    var generator = Object.create(protoGenerator.prototype);
                    var context = new Context(tryLocsList || []);

                    // The ._invoke method unifies the implementations of the .next,
                    // .throw, and .return methods.
                    generator._invoke = makeInvokeMethod(innerFn, self, context);

                    return generator;
                }
                exports.wrap = wrap;

                // Try/catch helper to minimize deoptimizations. Returns a completion
                // record like context.tryEntries[i].completion. This interface could
                // have been (and was previously) designed to take a closure to be
                // invoked without arguments, but in all the cases we care about we
                // already have an existing method we want to call, so there's no need
                // to create a new function object. We can even get away with assuming
                // the method takes exactly one argument, since that happens to be true
                // in every case, so we don't have to touch the arguments object. The
                // only additional allocation required is the completion record, which
                // has a stable shape and so hopefully should be cheap to allocate.
                function tryCatch(fn, obj, arg) {
                    try {
                        return { type: "normal", arg: fn.call(obj, arg) };
                    } catch (err) {
                        return { type: "throw", arg: err };
                    }
                }

                var GenStateSuspendedStart = "suspendedStart";
                var GenStateSuspendedYield = "suspendedYield";
                var GenStateExecuting = "executing";
                var GenStateCompleted = "completed";

                // Returning this object from the innerFn has the same effect as
                // breaking out of the dispatch switch statement.
                var ContinueSentinel = {};

                // Dummy constructor functions that we use as the .constructor and
                // .constructor.prototype properties for functions that return Generator
                // objects. For full spec compliance, you may wish to configure your
                // minifier not to mangle the names of these two functions.
                function Generator() {}
                function GeneratorFunction() {}
                function GeneratorFunctionPrototype() {}

                // This is a polyfill for %IteratorPrototype% for environments that
                // don't natively support it.
                var IteratorPrototype = {};
                IteratorPrototype[iteratorSymbol] = function () {
                    return this;
                };

                var getProto = Object.getPrototypeOf;
                var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
                if (NativeIteratorPrototype &&
                    NativeIteratorPrototype !== Op &&
                    hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
                    // This environment has a native %IteratorPrototype%; use it instead
                    // of the polyfill.
                    IteratorPrototype = NativeIteratorPrototype;
                }

                var Gp = GeneratorFunctionPrototype.prototype =
                    Generator.prototype = Object.create(IteratorPrototype);
                GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
                GeneratorFunctionPrototype.constructor = GeneratorFunction;
                GeneratorFunction.displayName = define(
                    GeneratorFunctionPrototype,
                    toStringTagSymbol,
                    "GeneratorFunction"
                );

                // Helper for defining the .next, .throw, and .return methods of the
                // Iterator interface in terms of a single ._invoke method.
                function defineIteratorMethods(prototype) {
                    ["next", "throw", "return"].forEach(function(method) {
                        define(prototype, method, function(arg) {
                            return this._invoke(method, arg);
                        });
                    });
                }

                exports.isGeneratorFunction = function(genFun) {
                    var ctor = typeof genFun === "function" && genFun.constructor;
                    return ctor
                        ? ctor === GeneratorFunction ||
                        // For the native GeneratorFunction constructor, the best we can
                        // do is to check its .name property.
                        (ctor.displayName || ctor.name) === "GeneratorFunction"
                        : false;
                };

                exports.mark = function(genFun) {
                    if (Object.setPrototypeOf) {
                        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
                    } else {
                        genFun.__proto__ = GeneratorFunctionPrototype;
                        define(genFun, toStringTagSymbol, "GeneratorFunction");
                    }
                    genFun.prototype = Object.create(Gp);
                    return genFun;
                };

                // Within the body of any async function, `await x` is transformed to
                // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
                // `hasOwn.call(value, "__await")` to determine if the yielded value is
                // meant to be awaited.
                exports.awrap = function(arg) {
                    return { __await: arg };
                };

                function AsyncIterator(generator, PromiseImpl) {
                    function invoke(method, arg, resolve, reject) {
                        var record = tryCatch(generator[method], generator, arg);
                        if (record.type === "throw") {
                            reject(record.arg);
                        } else {
                            var result = record.arg;
                            var value = result.value;
                            if (value &&
                                typeof value === "object" &&
                                hasOwn.call(value, "__await")) {
                                return PromiseImpl.resolve(value.__await).then(function(value) {
                                    invoke("next", value, resolve, reject);
                                }, function(err) {
                                    invoke("throw", err, resolve, reject);
                                });
                            }

                            return PromiseImpl.resolve(value).then(function(unwrapped) {
                                // When a yielded Promise is resolved, its final value becomes
                                // the .value of the Promise<{value,done}> result for the
                                // current iteration.
                                result.value = unwrapped;
                                resolve(result);
                            }, function(error) {
                                // If a rejected Promise was yielded, throw the rejection back
                                // into the async generator function so it can be handled there.
                                return invoke("throw", error, resolve, reject);
                            });
                        }
                    }

                    var previousPromise;

                    function enqueue(method, arg) {
                        function callInvokeWithMethodAndArg() {
                            return new PromiseImpl(function(resolve, reject) {
                                invoke(method, arg, resolve, reject);
                            });
                        }

                        return previousPromise =
                            // If enqueue has been called before, then we want to wait until
                            // all previous Promises have been resolved before calling invoke,
                            // so that results are always delivered in the correct order. If
                            // enqueue has not been called before, then it is important to
                            // call invoke immediately, without waiting on a callback to fire,
                            // so that the async generator function has the opportunity to do
                            // any necessary setup in a predictable way. This predictability
                            // is why the Promise constructor synchronously invokes its
                            // executor callback, and why async functions synchronously
                            // execute code before the first await. Since we implement simple
                            // async functions in terms of async generators, it is especially
                            // important to get this right, even though it requires care.
                            previousPromise ? previousPromise.then(
                                callInvokeWithMethodAndArg,
                                // Avoid propagating failures to Promises returned by later
                                // invocations of the iterator.
                                callInvokeWithMethodAndArg
                            ) : callInvokeWithMethodAndArg();
                    }

                    // Define the unified helper method that is used to implement .next,
                    // .throw, and .return (see defineIteratorMethods).
                    this._invoke = enqueue;
                }

                defineIteratorMethods(AsyncIterator.prototype);
                AsyncIterator.prototype[asyncIteratorSymbol] = function () {
                    return this;
                };
                exports.AsyncIterator = AsyncIterator;

                // Note that simple async functions are implemented on top of
                // AsyncIterator objects; they just return a Promise for the value of
                // the final result produced by the iterator.
                exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
                    if (PromiseImpl === void 0) PromiseImpl = Promise;

                    var iter = new AsyncIterator(
                        wrap(innerFn, outerFn, self, tryLocsList),
                        PromiseImpl
                    );

                    return exports.isGeneratorFunction(outerFn)
                        ? iter // If outerFn is a generator, return the full iterator.
                        : iter.next().then(function(result) {
                            return result.done ? result.value : iter.next();
                        });
                };

                function makeInvokeMethod(innerFn, self, context) {
                    var state = GenStateSuspendedStart;

                    return function invoke(method, arg) {
                        if (state === GenStateExecuting) {
                            throw new Error("Generator is already running");
                        }

                        if (state === GenStateCompleted) {
                            if (method === "throw") {
                                throw arg;
                            }

                            // Be forgiving, per 25.3.3.3.3 of the spec:
                            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
                            return doneResult();
                        }

                        context.method = method;
                        context.arg = arg;

                        while (true) {
                            var delegate = context.delegate;
                            if (delegate) {
                                var delegateResult = maybeInvokeDelegate(delegate, context);
                                if (delegateResult) {
                                    if (delegateResult === ContinueSentinel) continue;
                                    return delegateResult;
                                }
                            }

                            if (context.method === "next") {
                                // Setting context._sent for legacy support of Babel's
                                // function.sent implementation.
                                context.sent = context._sent = context.arg;

                            } else if (context.method === "throw") {
                                if (state === GenStateSuspendedStart) {
                                    state = GenStateCompleted;
                                    throw context.arg;
                                }

                                context.dispatchException(context.arg);

                            } else if (context.method === "return") {
                                context.abrupt("return", context.arg);
                            }

                            state = GenStateExecuting;

                            var record = tryCatch(innerFn, self, context);
                            if (record.type === "normal") {
                                // If an exception is thrown from innerFn, we leave state ===
                                // GenStateExecuting and loop back for another invocation.
                                state = context.done
                                    ? GenStateCompleted
                                    : GenStateSuspendedYield;

                                if (record.arg === ContinueSentinel) {
                                    continue;
                                }

                                return {
                                    value: record.arg,
                                    done: context.done
                                };

                            } else if (record.type === "throw") {
                                state = GenStateCompleted;
                                // Dispatch the exception by looping back around to the
                                // context.dispatchException(context.arg) call above.
                                context.method = "throw";
                                context.arg = record.arg;
                            }
                        }
                    };
                }

                // Call delegate.iterator[context.method](context.arg) and handle the
                // result, either by returning a { value, done } result from the
                // delegate iterator, or by modifying context.method and context.arg,
                // setting context.delegate to null, and returning the ContinueSentinel.
                function maybeInvokeDelegate(delegate, context) {
                    var method = delegate.iterator[context.method];
                    if (method === undefined) {
                        // A .throw or .return when the delegate iterator has no .throw
                        // method always terminates the yield* loop.
                        context.delegate = null;

                        if (context.method === "throw") {
                            // Note: ["return"] must be used for ES3 parsing compatibility.
                            if (delegate.iterator["return"]) {
                                // If the delegate iterator has a return method, give it a
                                // chance to clean up.
                                context.method = "return";
                                context.arg = undefined;
                                maybeInvokeDelegate(delegate, context);

                                if (context.method === "throw") {
                                    // If maybeInvokeDelegate(context) changed context.method from
                                    // "return" to "throw", let that override the TypeError below.
                                    return ContinueSentinel;
                                }
                            }

                            context.method = "throw";
                            context.arg = new TypeError(
                                "The iterator does not provide a 'throw' method");
                        }

                        return ContinueSentinel;
                    }

                    var record = tryCatch(method, delegate.iterator, context.arg);

                    if (record.type === "throw") {
                        context.method = "throw";
                        context.arg = record.arg;
                        context.delegate = null;
                        return ContinueSentinel;
                    }

                    var info = record.arg;

                    if (! info) {
                        context.method = "throw";
                        context.arg = new TypeError("iterator result is not an object");
                        context.delegate = null;
                        return ContinueSentinel;
                    }

                    if (info.done) {
                        // Assign the result of the finished delegate to the temporary
                        // variable specified by delegate.resultName (see delegateYield).
                        context[delegate.resultName] = info.value;

                        // Resume execution at the desired location (see delegateYield).
                        context.next = delegate.nextLoc;

                        // If context.method was "throw" but the delegate handled the
                        // exception, let the outer generator proceed normally. If
                        // context.method was "next", forget context.arg since it has been
                        // "consumed" by the delegate iterator. If context.method was
                        // "return", allow the original .return call to continue in the
                        // outer generator.
                        if (context.method !== "return") {
                            context.method = "next";
                            context.arg = undefined;
                        }

                    } else {
                        // Re-yield the result returned by the delegate method.
                        return info;
                    }

                    // The delegate iterator is finished, so forget it and continue with
                    // the outer generator.
                    context.delegate = null;
                    return ContinueSentinel;
                }

                // Define Generator.prototype.{next,throw,return} in terms of the
                // unified ._invoke helper method.
                defineIteratorMethods(Gp);

                define(Gp, toStringTagSymbol, "Generator");

                // A Generator should always return itself as the iterator object when the
                // @@iterator function is called on it. Some browsers' implementations of the
                // iterator prototype chain incorrectly implement this, causing the Generator
                // object to not be returned from this call. This ensures that doesn't happen.
                // See https://github.com/facebook/regenerator/issues/274 for more details.
                Gp[iteratorSymbol] = function() {
                    return this;
                };

                Gp.toString = function() {
                    return "[object Generator]";
                };

                function pushTryEntry(locs) {
                    var entry = { tryLoc: locs[0] };

                    if (1 in locs) {
                        entry.catchLoc = locs[1];
                    }

                    if (2 in locs) {
                        entry.finallyLoc = locs[2];
                        entry.afterLoc = locs[3];
                    }

                    this.tryEntries.push(entry);
                }

                function resetTryEntry(entry) {
                    var record = entry.completion || {};
                    record.type = "normal";
                    delete record.arg;
                    entry.completion = record;
                }

                function Context(tryLocsList) {
                    // The root entry object (effectively a try statement without a catch
                    // or a finally block) gives us a place to store values thrown from
                    // locations where there is no enclosing try statement.
                    this.tryEntries = [{ tryLoc: "root" }];
                    tryLocsList.forEach(pushTryEntry, this);
                    this.reset(true);
                }

                exports.keys = function(object) {
                    var keys = [];
                    for (var key in object) {
                        keys.push(key);
                    }
                    keys.reverse();

                    // Rather than returning an object with a next method, we keep
                    // things simple and return the next function itself.
                    return function next() {
                        while (keys.length) {
                            var key = keys.pop();
                            if (key in object) {
                                next.value = key;
                                next.done = false;
                                return next;
                            }
                        }

                        // To avoid creating an additional object, we just hang the .value
                        // and .done properties off the next function object itself. This
                        // also ensures that the minifier will not anonymize the function.
                        next.done = true;
                        return next;
                    };
                };

                function values(iterable) {
                    if (iterable) {
                        var iteratorMethod = iterable[iteratorSymbol];
                        if (iteratorMethod) {
                            return iteratorMethod.call(iterable);
                        }

                        if (typeof iterable.next === "function") {
                            return iterable;
                        }

                        if (!isNaN(iterable.length)) {
                            var i = -1, next = function next() {
                                while (++i < iterable.length) {
                                    if (hasOwn.call(iterable, i)) {
                                        next.value = iterable[i];
                                        next.done = false;
                                        return next;
                                    }
                                }

                                next.value = undefined;
                                next.done = true;

                                return next;
                            };

                            return next.next = next;
                        }
                    }

                    // Return an iterator with no values.
                    return { next: doneResult };
                }
                exports.values = values;

                function doneResult() {
                    return { value: undefined, done: true };
                }

                Context.prototype = {
                    constructor: Context,

                    reset: function(skipTempReset) {
                        this.prev = 0;
                        this.next = 0;
                        // Resetting context._sent for legacy support of Babel's
                        // function.sent implementation.
                        this.sent = this._sent = undefined;
                        this.done = false;
                        this.delegate = null;

                        this.method = "next";
                        this.arg = undefined;

                        this.tryEntries.forEach(resetTryEntry);

                        if (!skipTempReset) {
                            for (var name in this) {
                                // Not sure about the optimal order of these conditions:
                                if (name.charAt(0) === "t" &&
                                    hasOwn.call(this, name) &&
                                    !isNaN(+name.slice(1))) {
                                    this[name] = undefined;
                                }
                            }
                        }
                    },

                    stop: function() {
                        this.done = true;

                        var rootEntry = this.tryEntries[0];
                        var rootRecord = rootEntry.completion;
                        if (rootRecord.type === "throw") {
                            throw rootRecord.arg;
                        }

                        return this.rval;
                    },

                    dispatchException: function(exception) {
                        if (this.done) {
                            throw exception;
                        }

                        var context = this;
                        function handle(loc, caught) {
                            record.type = "throw";
                            record.arg = exception;
                            context.next = loc;

                            if (caught) {
                                // If the dispatched exception was caught by a catch block,
                                // then let that catch block handle the exception normally.
                                context.method = "next";
                                context.arg = undefined;
                            }

                            return !! caught;
                        }

                        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                            var entry = this.tryEntries[i];
                            var record = entry.completion;

                            if (entry.tryLoc === "root") {
                                // Exception thrown outside of any try block that could handle
                                // it, so set the completion value of the entire function to
                                // throw the exception.
                                return handle("end");
                            }

                            if (entry.tryLoc <= this.prev) {
                                var hasCatch = hasOwn.call(entry, "catchLoc");
                                var hasFinally = hasOwn.call(entry, "finallyLoc");

                                if (hasCatch && hasFinally) {
                                    if (this.prev < entry.catchLoc) {
                                        return handle(entry.catchLoc, true);
                                    } else if (this.prev < entry.finallyLoc) {
                                        return handle(entry.finallyLoc);
                                    }

                                } else if (hasCatch) {
                                    if (this.prev < entry.catchLoc) {
                                        return handle(entry.catchLoc, true);
                                    }

                                } else if (hasFinally) {
                                    if (this.prev < entry.finallyLoc) {
                                        return handle(entry.finallyLoc);
                                    }

                                } else {
                                    throw new Error("try statement without catch or finally");
                                }
                            }
                        }
                    },

                    abrupt: function(type, arg) {
                        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                            var entry = this.tryEntries[i];
                            if (entry.tryLoc <= this.prev &&
                                hasOwn.call(entry, "finallyLoc") &&
                                this.prev < entry.finallyLoc) {
                                var finallyEntry = entry;
                                break;
                            }
                        }

                        if (finallyEntry &&
                            (type === "break" ||
                                type === "continue") &&
                            finallyEntry.tryLoc <= arg &&
                            arg <= finallyEntry.finallyLoc) {
                            // Ignore the finally entry if control is not jumping to a
                            // location outside the try/catch block.
                            finallyEntry = null;
                        }

                        var record = finallyEntry ? finallyEntry.completion : {};
                        record.type = type;
                        record.arg = arg;

                        if (finallyEntry) {
                            this.method = "next";
                            this.next = finallyEntry.finallyLoc;
                            return ContinueSentinel;
                        }

                        return this.complete(record);
                    },

                    complete: function(record, afterLoc) {
                        if (record.type === "throw") {
                            throw record.arg;
                        }

                        if (record.type === "break" ||
                            record.type === "continue") {
                            this.next = record.arg;
                        } else if (record.type === "return") {
                            this.rval = this.arg = record.arg;
                            this.method = "return";
                            this.next = "end";
                        } else if (record.type === "normal" && afterLoc) {
                            this.next = afterLoc;
                        }

                        return ContinueSentinel;
                    },

                    finish: function(finallyLoc) {
                        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                            var entry = this.tryEntries[i];
                            if (entry.finallyLoc === finallyLoc) {
                                this.complete(entry.completion, entry.afterLoc);
                                resetTryEntry(entry);
                                return ContinueSentinel;
                            }
                        }
                    },

                    "catch": function(tryLoc) {
                        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                            var entry = this.tryEntries[i];
                            if (entry.tryLoc === tryLoc) {
                                var record = entry.completion;
                                if (record.type === "throw") {
                                    var thrown = record.arg;
                                    resetTryEntry(entry);
                                }
                                return thrown;
                            }
                        }

                        // The context.catch method must only be called with a location
                        // argument that corresponds to a known catch block.
                        throw new Error("illegal catch attempt");
                    },

                    delegateYield: function(iterable, resultName, nextLoc) {
                        this.delegate = {
                            iterator: values(iterable),
                            resultName: resultName,
                            nextLoc: nextLoc
                        };

                        if (this.method === "next") {
                            // Deliberately forget the last sent value so that we don't
                            // accidentally pass it on to the delegate.
                            this.arg = undefined;
                        }

                        return ContinueSentinel;
                    }
                };

                // Regardless of whether this script is executing as a CommonJS module
                // or not, return the runtime object so that we can declare the variable
                // regeneratorRuntime in the outer scope, which allows this module to be
                // injected easily by `bin/regenerator --include-runtime script.js`.
                return exports;

            }(
                // If this script is executing as a CommonJS module, use module.exports
                // as the regeneratorRuntime namespace. Otherwise create a new empty
                // object. Either way, the resulting object will be used to initialize
                // the regeneratorRuntime variable at the top of this file.
                true ? module.exports : undefined
            ));

            try {
                regeneratorRuntime = runtime;
            } catch (accidentalStrictMode) {
                // This module should not be running in strict mode, so the above
                // assignment should always work unless something is misconfigured. Just
                // in case runtime.js accidentally runs in strict mode, we can escape
                // strict mode using a global Function call. This could conceivably fail
                // if a Content Security Policy forbids using Function, but in that case
                // the proper solution is to fix the accidental strict mode problem. If
                // you've misconfigured your bundler to force strict mode and applied a
                // CSP to forbid Function, and you're not willing to fix either of those
                // problems, please detail your unique predicament in a GitHub issue.
                Function("r", "regeneratorRuntime = r")(runtime);
            }


            /***/ }),
        /* 123 */
        /***/ (function(module, __webpack_exports__, __webpack_require__) {

            "use strict";
// ESM COMPAT FLAG
            __webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/slicedToArray.js
            var slicedToArray = __webpack_require__(2);
            var slicedToArray_default = /*#__PURE__*/__webpack_require__.n(slicedToArray);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/typeof.js
            var helpers_typeof = __webpack_require__(1);
            var typeof_default = /*#__PURE__*/__webpack_require__.n(helpers_typeof);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
            var defineProperty = __webpack_require__(0);
            var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
            var classCallCheck = __webpack_require__(3);
            var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
            var createClass = __webpack_require__(4);
            var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// CONCATENATED MODULE: ./src/plugins/helper/Log.js






            var CONSTANTS = __webpack_require__(5);

            var LOG_ENDPOINT = "https://lgs.pubpowerplatform.io/als";

            var Log_Log = /*#__PURE__*/function () {
                function Log() {
                    classCallCheck_default()(this, Log);
                }

                createClass_default()(Log, [{
                    key: "info",
                    value: function info(message, fields) {
                        this.pushLog({
                            level: "info",
                            message: message
                        }, fields);
                    }
                }, {
                    key: "warning",
                    value: function warning(message, fields) {
                        this.pushLog({
                            level: "warning",
                            message: message
                        }, fields);
                    }
                }, {
                    key: "error",
                    value: function error(message, fields) {
                        this.pushLog({
                            level: "error",
                            message: message
                        }, fields);
                    }
                }, {
                    key: "alert",
                    value: function alert(message, fields) {
                        this.pushLog({
                            level: "alert",
                            message: message
                        }, fields);
                    }
                }, {
                    key: "emerg",
                    value: function emerg(message, fields) {
                        this.pushLog({
                            level: "emerg",
                            message: message
                        }, fields);
                    }
                }, {
                    key: "pushLog",
                    value: function pushLog(data, fields) {
                        try {
                            if (typeof data.message !== "string") {
                                vilog("Log message must be a string");
                                return;
                            }

                            if (typeof_default()(fields) === "object") {
                                data = Object.assign(data, fields);
                            }

                            data.domainId = Configs.domainID;
                            data.domain = window.location.hostname;
                            data.pageUrl = window.location.href;
                            data.jsVer = CONSTANTS.JS_VERSION;
                            data.cacheTime = Configs.cacheTime;
                            data.device = Configs.device;
                            data.userAgent = navigator.userAgent;
                            ajaxRequest(LOG_ENDPOINT, "POST", "json", 2000, false, JSON.stringify(data));
                        } catch (e) {
                            vilog(e);
                        }
                    }
                }]);

                return Log;
            }();

            var Logging = new Log_Log();
            /* harmony default export */ var helper_Log = (Logging);
// EXTERNAL MODULE: ./node_modules/core-js-pure/features/array/find.js
            var find = __webpack_require__(37);
            var find_default = /*#__PURE__*/__webpack_require__.n(find);

// CONCATENATED MODULE: ./src/plugins/helper/cpmBucketManager.js


            var _defaultPrecision = 2;
            var _densePriceConfig = {
                'buckets': [{
                    'max': 3,
                    'increment': 0.01
                }, {
                    'max': 8,
                    'increment': 0.05
                }, {
                    'max': 20,
                    'increment': 0.5
                }]
            };

            function getPriceBucketString(cpm, customConfig) {
                var granularityMultiplier = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
                var cpmFloat = parseFloat(cpm);

                if (isNaN(cpmFloat)) {
                    cpmFloat = '';
                }

                return {
                    dense: cpmFloat === '' ? '' : getCpmStringValue(cpm, _densePriceConfig, granularityMultiplier),
                    custom: cpmFloat === '' ? '' : getCpmStringValue(cpm, customConfig, granularityMultiplier)
                };
            }

            function getCpmStringValue(cpm, config, granularityMultiplier) {
                var cpmStr = '';

                if (!isValidPriceConfig(config)) {
                    return cpmStr;
                }

                var cap = config.buckets.reduce(function (prev, curr) {
                    if (prev.max > curr.max) {
                        return prev;
                    }

                    return curr;
                }, {
                    'max': 0
                });
                var bucketFloor = 0;
                var bucket = find_default()(config.buckets, function (bucket) {
                    if (cpm > cap.max * granularityMultiplier) {
                        // cpm exceeds cap, just return the cap.
                        var precision = bucket.precision;

                        if (typeof precision === 'undefined') {
                            precision = _defaultPrecision;
                        }

                        cpmStr = (bucket.max * granularityMultiplier).toFixed(precision);
                    } else if (cpm <= bucket.max * granularityMultiplier && cpm >= bucketFloor * granularityMultiplier) {
                        bucket.min = bucketFloor;
                        return bucket;
                    } else {
                        bucketFloor = bucket.max;
                    }
                });

                if (bucket) {
                    cpmStr = getCpmTarget(cpm, bucket, granularityMultiplier);
                }

                return cpmStr;
            }

            function isValidPriceConfig(config) {
                if (isEmpty(config) || !config.buckets || !Array.isArray(config.buckets)) {
                    return false;
                }

                var isValid = true;
                config.buckets.forEach(function (bucket) {
                    if (!bucket.max || !bucket.increment) {
                        isValid = false;
                    }
                });
                return isValid;
            }

            function getCpmTarget(cpm, bucket, granularityMultiplier) {
                var precision = typeof bucket.precision !== 'undefined' ? bucket.precision : _defaultPrecision;
                var increment = bucket.increment * granularityMultiplier;
                var bucketMin = bucket.min * granularityMultiplier; // start increments at the bucket min and then add bucket min back to arrive at the correct rounding
                // note - we're padding the values to avoid using decimals in the math prior to flooring
                // this is done as JS can return values slightly below the expected mark which would skew the price bucket target
                //   (eg 4.01 / 0.01 = 400.99999999999994)
                // min precison should be 2 to move decimal place over.

                var pow = Math.pow(10, precision + 2);
                var cpmToFloor = (cpm * pow - bucketMin * pow) / (increment * pow);
                var cpmTarget = Math.floor(cpmToFloor) * increment + bucketMin; // force to 10 decimal places to deal with imprecise decimal/binary conversions
                //    (for example 0.1 * 3 = 0.30000000000000004)

                cpmTarget = Number(cpmTarget.toFixed(10));
                return cpmTarget.toFixed(precision);
            }


// CONCATENATED MODULE: ./src/plugins/helper/pixel.js





            var AdUnitManager = newAdUnitsManager();

            var pixel_CONSTANTS = __webpack_require__(5);

            var DEVICE = deviceDetect();
            var REPORT_PATH = {
                "IMPRESSION": "/imp-v7/cc.jpeg",
                "IMPRESSION_VIEWABLE": "/iv-v7/cc.jpeg",
                "BID_REQUEST": "/bi-v7/cc.jpeg",
                "BID_RESPONSE": "/br-v7/cc.jpeg",
                "BID_WIN": "/bw-v7/cc.jpeg",
                "VIDEO_ANALYTICS": "/vi-v7/cc.jpeg",
                "BID_TIMEOUT": "/tmo-v7/cc.jpeg",
                "PAGE_VIEW": "/tf-v1.jpeg",
                "QUIZ_EVENT": "/qz-v1.jpeg"
            };
            var pixelSetCmpData = [REPORT_PATH.IMPRESSION, REPORT_PATH.BID_REQUEST, REPORT_PATH.BID_RESPONSE, REPORT_PATH.BID_WIN];

            var pixel_PixelManager = /*#__PURE__*/function () {
                function PixelManager(adSlot) {
                    classCallCheck_default()(this, PixelManager);

                    if (!adSlot.tagId || !adSlot.slotId || !Array.isArray(adSlot.adUnits) || !adSlot.viewPortDetect) {
                        throw new Error('[PixelManager] Missing input');
                    }

                    this.slotId = adSlot.slotId;
                    this.tagId = adSlot.tagId;
                    this.floorPrice = adSlot.floorPrice;
                    this.dynamicFloor = adSlot.dynamicFloor ? adSlot.dynamicFloor : 0;
                    this.floorType = adSlot.floorType;
                    this.floorInTesting = adSlot.floorInTesting;
                    this.testTime = adSlot.testTime;
                    this.testCaseId = adSlot.testCaseId;
                    this.abTestId = adSlot.abTestId;
                    this.adUnits = adSlot.adUnits;
                    this.viewPortDetect = adSlot.viewPortDetect;
                    this.adWidth = adSlot.adWidth;
                    this.adHeight = adSlot.adHeight;
                    this.adRenderEndedTime = 0;
                    this.lastBidWon = null;
                    this.sourceType = adSlot.sourceType;
                    this.bidResponseIsCounted = 0; // dùng để đánh dấu xem đã đếm bid response hay chưa đếm để xử lý đếm khi google render ads xong

                    this.bidRequestIsCounted = 0; // dùng để đánh dấu xem đã đếm bid request hay chưa đếm để xử lý đếm khi google render ads xong.. bidResponseIsCounted và bidRequestIsCounted khác value vì bid response của google được đếm trong link impression

                    this.init();
                }

                createClass_default()(PixelManager, [{
                    key: "init",
                    value: function init() {
                        var _this = this;

                        googletag.cmd.push(function () {
                            googletag.pubads().addEventListener('slotRenderEnded', _this.onSlotRenderEnded.bind(_this));
                            googletag.pubads().addEventListener('slotRequested', _this.onSlotRequested.bind(_this));
                        });

                        _addEventListener("AD_RENDER_EDNED", function (data) {
                            if (data.slotId != _this.slotId) {
                                return;
                            }

                            _this.markAdRenderOnAdSlot();
                        });

                        _addEventListener("AD_START_RENDER", function (data) {
                            if (data.slotId != _this.slotId) {
                                return;
                            }

                            callPixel(_this.getBidWinPixel(_this.lastBidWon));
                        });

                        var impViewAbleChecking = null;
                        this.viewPortDetect.inViewPort(function () {
                            if (impViewAbleChecking !== null) {
                                return;
                            }

                            impViewAbleChecking = setInterval(function () {
                                var currTime = Math.round(new Date().getTime() / 1000);

                                if (_this.adRenderEndedTime > 0 && currTime - _this.adRenderEndedTime >= 1) {
                                    _this.adRenderEndedTime = 0;

                                    try {
                                        callPixel(_this.getImpressionViewAblePixel(_this.lastBidWon));
                                        _this.lastBidWon = null;
                                    } catch (e) {
                                        captureException(e, "[pixelManager - viewPortDetect.inViewPort]");
                                    }
                                }
                            }, 1000);
                        });
                        this.viewPortDetect.outViewPort(function () {
                            clearInterval(impViewAbleChecking);
                            impViewAbleChecking = null;
                        });
                    }
                }, {
                    key: "indexOf",
                    value: function indexOf(adUnitCode) {
                        for (var i = 0; i < this.adUnits.length; i++) {
                            if (this.adUnits[i].code === adUnitCode) {
                                return true;
                            }
                        }

                        return false;
                    }
                }, {
                    key: "setBidWon",
                    value: function setBidWon(bidWon) {
                        this.lastBidWon = bidWon;
                    }
                }, {
                    key: "clearBidWon",
                    value: function clearBidWon() {
                        this.lastBidWon = null;
                    }
                }, {
                    key: "resetBidReponseCountedFlag",
                    value: function resetBidReponseCountedFlag() {
                        this.bidResponseIsCounted = 0;
                    }
                }, {
                    key: "resetBidRequestCountedFlag",
                    value: function resetBidRequestCountedFlag() {
                        this.adUnits.forEach(function (adUnitItem) {
                            try {
                                AdUnitManager.get(adUnitItem.code).resetBidRequestCountedFlag();
                            } catch (e) {
                                vilog(e);
                            }
                        });
                    }
                }, {
                    key: "flagBidRequestIsCounted",
                    value: function flagBidRequestIsCounted() {
                        this.adUnits.forEach(function (adUnitItem) {
                            try {
                                AdUnitManager.get(adUnitItem.code).flagBidRequestIsCounted();
                            } catch (e) {
                                vilog(e);
                            }
                        });
                    }
                }, {
                    key: "markAdRenderOnAdSlot",
                    value: function markAdRenderOnAdSlot() {
                        this.adRenderEndedTime = Math.round(new Date().getTime() / 1000);
                    }
                }, {
                    key: "onSlotRenderEnded",
                    value: function onSlotRenderEnded(data) {
                        var TARGET_KEYS = pixel_CONSTANTS.TARGET_KEYS;
                        var slot = data.slot;

                        if (slot.getSlotElementId() != this.slotId || data.isEmpty === true) {
                            return;
                        }

                        var bidderCode = "";
                        var cpm = 0; // let adSize = "";

                        var isPrebidCreativeId = data.sourceAgnosticCreativeId && Configs.creativeIds.includes(data.sourceAgnosticCreativeId) ? true : false;

                        if (data.lineItemId !== null && isPrebidCreativeId && slot.getTargeting(TARGET_KEYS.IS_EMPTY_ADS).length > 0) {
                            // trường hợp gửi floor lên GAM và google không bid -> vào line prebid nhưng không có ad content
                            return;
                        }

                        if (data.lineItemId !== null && isPrebidCreativeId && slot.getTargeting(TARGET_KEYS.IS_EMPTY_ADS).length == 0 && slot.getTargeting(TARGET_KEYS.BIDDER).length > 0) {
                            // demand win
                            try {
                                bidderCode = slot.getTargeting(TARGET_KEYS.BIDDER)[0];
                                cpm = slot.getTargeting(TARGET_KEYS.REAL_CPM)[0]; // adSize = `${slot.getTargeting(TARGET_KEYS.AD_WIDTH)[0]}x${slot.getTargeting(TARGET_KEYS.AD_HEIGHT)[0]}`;

                                if (slot.getTargeting(TARGET_KEYS.SPECIAL_BID).length == 0) {
                                    // không đánh dấu là ads đã render khi bid win là special bid vì special bid được render qua postbid
                                    callPixel(this.getBidWinPixel(this.lastBidWon));
                                    this.markAdRenderOnAdSlot();
                                }
                            } catch (e) {
                                captureException(e, "[pixelManager - onSlotRenderEnded - demand win]");
                            }
                        } else {
                            // google win hoặc response trả về 1 line item nào đó do pub tự set trên GAM
                            try {
                                bidderCode = slot.getTargeting(TARGET_KEYS.ACCOUNT)[0];
                                cpm = slot.getTargeting(TARGET_KEYS.PRICE_BUCKET).length > 0 ? slot.getTargeting(TARGET_KEYS.PRICE_BUCKET)[0] : 0; // adSize = Array.isArray(data.size) ? data.size.join("x") : this.getAdSlotSize();

                                this.lastBidWon = {
                                    bidderCode: bidderCode,
                                    mediaType: "banner",
                                    cpm: 0,
                                    size: "1x1",
                                    demandType: "google",
                                    floorType: this.floorType,
                                    bidResponseIsCounted: this.bidResponseIsCounted // 1 nếu bid response đã được đếm từ demand prebid, 0 nếu chưa có demand nào win

                                };
                                callPixel(this.getImpressionPixel(this.lastBidWon));
                                this.markAdRenderOnAdSlot();
                            } catch (e) {
                                captureException(e, "[pixelManager - onSlotRenderEnded - google win]");
                            }
                        }
                    }
                }, {
                    key: "onSlotRequested",
                    value: function onSlotRequested(data) {
                        try {
                            var TARGET_KEYS = pixel_CONSTANTS.TARGET_KEYS;
                            var slot = data.slot;
                            var targetSLot = ""; // sử dụng để đếm bid request google cho định dạng interstitial, impression và active view không tự đếm mà get từ dfp

                            try {
                                targetSLot = slot.getTargeting(TARGET_KEYS.PW_SLOT)[0];
                            } catch (e) {}

                            if (slot.getSlotElementId() != this.slotId && targetSLot != this.slotId || slot.getTargeting(TARGET_KEYS.ACCOUNT).length == 0) {
                                return;
                            }

                            this.logBidRequestGoogle(slot.googleTagRequestSizes.filter(function (item) {
                                return item == "" ? false : true;
                            }), "banner", slot.getTargeting(TARGET_KEYS.ACCOUNT)[0]);
                        } catch (e) {
                            captureException(e, "[pixelManager - onSlotRequested]");
                        }
                    }
                }, {
                    key: "logBidResponse",
                    value: function logBidResponse(bidResponses) {
                        var pixelBuilder = {};
                        var issetBidWithTagSize = false;
                        bidResponses.forEach(function (bid) {
                            try {
                                if (bid.cpm <= 0) {
                                    return;
                                }

                                if (!pixelBuilder[bid.adUnitCode]) {
                                    pixelBuilder[bid.adUnitCode] = [];
                                }

                                var pixelData = {
                                    bidderCode: bid.bidderCode,
                                    cpm: bid.cpm,
                                    size: this.getBidSize(bid),
                                    mediaType: this.getBidMediaType(bid),
                                    timeToRespond: typeof bid.timeToRespond === "number" ? bid.timeToRespond : 0,
                                    blocked: bid.validate && bid.validate.status ? bid.validate.status : ""
                                };
                                pixelBuilder[bid.adUnitCode].push(pixelData);

                                if (pixelData.size == AdUnitManager.get(bid.adUnitCode).tagSize.join("x")) {
                                    issetBidWithTagSize = true;
                                }
                            } catch (e) {
                                vilog(e);
                            }
                        }, this);

                        for (var adUnitCode in pixelBuilder) {
                            try {
                                if (issetBidWithTagSize) {
                                    this.bidResponseIsCounted = 2; // đánh dấu lượt bid này đã đếm bid response cho tag đó và có ít nhất 1 bid response với size = tag size, khi đếm impression google không cần đếm bid respone by tag + by size
                                } else {
                                    this.bidResponseIsCounted = 1; // đánh dấu lượt bid này đã đếm bid response cho tag đó nhưng chưa có bid response nào khớp với tag size, khi đếm impression google không cần đếm bid respone by tag
                                }

                                var adUnit = AdUnitManager.get(adUnitCode);
                                var pixel = {
                                    tm: generateUUID(),
                                    sz: adUnit.adPrimarySize,
                                    mt: adUnit.mediaType,
                                    auc: adUnitCode,
                                    floor: this.floorPrice,
                                    dynf: this.dynamicFloor,
                                    flt: this.floorType,
                                    fit: this.floorInTesting,
                                    ftt: this.testTime,
                                    tsc: this.testCaseId,
                                    abid: this.abTestId,
                                    br: pixelBuilder[adUnitCode].map(function (bid) {
                                        return "".concat(bid.bidderCode, "|").concat(bid.cpm, "|").concat(bid.size, "|").concat(bid.mediaType, "|").concat(bid.timeToRespond, "|").concat(bid.blocked);
                                    }).join(","),
                                    bad: pixelBuilder[adUnitCode].filter(function (item) {
                                        return item.blocked == "BLOCKED_BY_AD_DOMAIN" ? true : false;
                                    }).map(function (bid) {
                                        return "".concat(bid.bidderCode, "|").concat(bid.cpm, "|").concat(bid.validate.adDomain);
                                    }).join(",")
                                };
                                callPixel(this.buildPixelUrl(REPORT_PATH.BID_RESPONSE, pixel));
                            } catch (e) {
                                vilog(e);
                            }
                        }
                    }
                }, {
                    key: "addPixelToBid",
                    value: function addPixelToBid(bid) {
                        var newPixel = this.getImpressionPixel(bid); // add impression pixel url to bidwon ad content (banner and native)

                        if (bid.mediaType === "banner" || bid.mediaType === "native") {
                            try {
                                bid.ad += "<img src=\"".concat(newPixel, "\" width=\"0\" height=\"0\" style=\"display:none\" />");
                            } catch (e) {
                                captureException(e, "[pixelManager - addPixelToBid - banner]");
                            }
                        }
                    }
                }, {
                    key: "getBidWinPixel",
                    value: function getBidWinPixel(bid) {
                        if (!bid || typeof_default()(bid) !== "object" || !bid.bidderCode) {
                            return "";
                        }

                        return this.buildPixelUrl(REPORT_PATH.BID_WIN, {
                            tm: generateUUID(),
                            auc: bid.adUnitCode,
                            b: bid.bidderCode,
                            p: bid.cpm,
                            sz: this.getBidSize(bid),
                            mt: this.getBidMediaType(bid),
                            floor: bid.usedFloor ? bid.usedFloor : 0,
                            dynf: bid.dynamicFloor ? bid.dynamicFloor : 0,
                            flt: bid.floorType ? bid.floorType : "",
                            fit: this.floorInTesting,
                            ftt: this.testTime,
                            tsc: this.testCaseId,
                            abid: this.abTestId
                        });
                    }
                }, {
                    key: "getImpressionPixel",
                    value: function getImpressionPixel(bid) {
                        if (!bid || typeof_default()(bid) !== "object" || !bid.bidderCode) {
                            return "";
                        }

                        try {
                            bid.token = generateUUID();
                            var bidImpression = {
                                tm: bid.token,
                                b: bid.bidderCode,
                                auc: bid.adUnitCode ? bid.adUnitCode : "",
                                p: bid.cpm,
                                sz: this.getBidSize(bid),
                                mt: this.getBidMediaType(bid),
                                dmt: bid.demandType ? bid.demandType : "",
                                brp: typeof bid.bidResponseIsCounted !== "undefined" ? bid.bidResponseIsCounted : "",
                                // đánh dấu để xử lý đếm bid response theo tag khi đếm impression
                                floor: bid.usedFloor ? bid.usedFloor : 0,
                                dynf: bid.dynamicFloor ? bid.dynamicFloor : 0,
                                flt: bid.floorType ? bid.floorType : "",
                                fit: this.floorInTesting,
                                ftt: this.testTime,
                                tsc: this.testCaseId,
                                abid: this.abTestId
                            };
                            return this.buildPixelUrl(REPORT_PATH.IMPRESSION, bidImpression);
                        } catch (e) {
                            return "";
                        }
                    }
                }, {
                    key: "buildPixelUrl",
                    value: function buildPixelUrl(urlPath, pixelData) {
                        pixelData.z = this.tagId;
                        pixelData.sc = this.sourceType;
                        return _buildPixelUrl(urlPath, pixelData);
                    }
                }, {
                    key: "getImpressionViewAblePixel",
                    value: function getImpressionViewAblePixel(bidWon) {
                        if (!bidWon || typeof_default()(bidWon) !== "object") {
                            return "";
                        }

                        return this.buildPixelUrl(REPORT_PATH.IMPRESSION_VIEWABLE, {
                            tm: "iv-".concat(bidWon.token),
                            b: bidWon.bidderCode,
                            p: bidWon.cpm ? bidWon.cpm : 0,
                            sz: this.getBidSize(bidWon),
                            mt: this.getBidMediaType(bidWon),
                            dmt: bidWon.demandType ? bidWon.demandType : ""
                        });
                    }
                }, {
                    key: "logBidVideo",
                    value: function logBidVideo() {
                        var _this2 = this;

                        var token = generateUUID();
                        return {
                            requested: function requested(useVastDfp, googleBidderCode, bidWon) {
                                if (!useVastDfp && bidWon != null) {
                                    callPixel(_this2.getBidWinPixel(bidWon)); // Đếm bid win khi vast requested
                                }

                                if (googleBidderCode == "" || !useVastDfp) {
                                    return;
                                }

                                _this2.logBidRequestGoogle([640, 480], "video instream", googleBidderCode);
                            },
                            impression: function impression(googleIsWinner, bidWon, googleBidderCode) {
                                if (googleIsWinner) {
                                    try {
                                        _this2.lastBidWon = {
                                            bidderCode: googleBidderCode,
                                            mediaType: "video instream",
                                            cpm: 0,
                                            demandType: "google",
                                            bidResponseIsCounted: _this2.bidResponseIsCounted,
                                            // đánh dấu là true để server đếm bid response theo tag vì trước đó không có demand nào win nên bid response chưa được đếm
                                            usedFloor: _this2.floorPrice,
                                            dynf: _this2.dynamicFloor,
                                            floorType: _this2.floorType
                                        };
                                        callPixel(_this2.getImpressionPixel(_this2.lastBidWon));

                                        _this2.markAdRenderOnAdSlot();
                                    } catch (e) {}
                                } else {
                                    if (bidWon !== null) {
                                        callPixel(_this2.getImpressionPixel(bidWon));

                                        _this2.markAdRenderOnAdSlot(); // không gọi markAdRenderOnAdSlot ngoài if else vì còn trường hợp sử dụng custom vast => không có bid nào win

                                    }
                                }
                            },
                            started: function started(googleIsWinner, bidWon, googleBidderCode) {
                                try {
                                    _this2.callVideoPixel(googleIsWinner ? {
                                        bidderCode: googleBidderCode
                                    } : bidWon, "start", token);
                                } catch (e) {}
                            },
                            skip: function skip(googleIsWinner, bidWon, googleBidderCode) {
                                try {
                                    _this2.callVideoPixel(googleIsWinner ? {
                                        bidderCode: googleBidderCode
                                    } : bidWon, "skip", "skip-".concat(token));
                                } catch (e) {}
                            },
                            firstQuartile: function firstQuartile(googleIsWinner, bidWon, googleBidderCode) {
                                try {
                                    _this2.callVideoPixel(googleIsWinner ? {
                                        bidderCode: googleBidderCode
                                    } : bidWon, "25p", "25p-".concat(token));
                                } catch (e) {}
                            },
                            midpoint: function midpoint(googleIsWinner, bidWon, googleBidderCode) {
                                try {
                                    _this2.callVideoPixel(googleIsWinner ? {
                                        bidderCode: googleBidderCode
                                    } : bidWon, "50p", "50p-".concat(token));
                                } catch (e) {}
                            },
                            thirdQuartile: function thirdQuartile(googleIsWinner, bidWon, googleBidderCode) {
                                try {
                                    _this2.callVideoPixel(googleIsWinner ? {
                                        bidderCode: googleBidderCode
                                    } : bidWon, "75p", "75p-".concat(token));
                                } catch (e) {}
                            },
                            complete: function complete(googleIsWinner, bidWon, googleBidderCode) {
                                try {
                                    _this2.callVideoPixel(googleIsWinner ? {
                                        bidderCode: googleBidderCode
                                    } : bidWon, "100p", "100p-".concat(token));
                                } catch (e) {}
                            },
                            click: function click(googleIsWinner, bidWon, googleBidderCode) {
                                try {
                                    _this2.callVideoPixel(googleIsWinner ? {
                                        bidderCode: googleBidderCode
                                    } : bidWon, "click", "click-".concat(token));
                                } catch (e) {}
                            },
                            error: function error(errorCode, googleBidderCode, creativeId) {// try {
                                //     this.logVideoError(
                                //         errorCode,
                                //         googleBidderCode,
                                //         creativeId
                                //     )
                                // } catch (e) {}
                            }
                        };
                    }
                }, {
                    key: "callVideoPixel",
                    value: function callVideoPixel(bid, action, token) {
                        callPixel(this.buildPixelUrl(REPORT_PATH.VIDEO_ANALYTICS, {
                            tm: token,
                            ac: action,
                            type: bid === null ? "passback" : "paid" // b: bid && bid.bidderCode ? bid.bidderCode : "",
                            // sz: bid && bid.size ? bid.size : ""

                        }));
                    }
                }, {
                    key: "logVideoError",
                    value: function logVideoError(errorCode, bidderCode, creativeId) {
                        // không log error khi vast empty ( trường hợp google không mua )
                        if (parseInt(errorCode) == 1009) {
                            return;
                        }

                        callPixel(this.buildPixelUrl(REPORT_PATH.VIDEO_ANALYTICS, {
                            tm: generateUUID(),
                            ac: "error",
                            errCode: errorCode,
                            cr: creativeId,
                            b: bidderCode
                        }));
                    }
                }, {
                    key: "logBidRequestGoogle",
                    value: function logBidRequestGoogle(adRequestSizes, mediaType, googleBidderCode) {
                        if (!Array.isArray(adRequestSizes) || adRequestSizes.length == 0) {
                            return;
                        }

                        try {
                            callPixel(this.buildPixelUrl(REPORT_PATH.BID_REQUEST, {
                                tm: generateUUID(),
                                mt: mediaType,
                                bs: googleBidderCode,
                                // rqz: mapRequestSizes(adRequestSizes).join(","),
                                dmt: "google",
                                brq: this.bidRequestIsCounted,
                                floor: this.floorPrice,
                                dynf: this.dynamicFloor,
                                flt: this.floorType,
                                fit: this.floorInTesting,
                                ftt: this.testTime,
                                tsc: this.testCaseId,
                                abid: this.abTestId
                            }));
                            this.flagBidRequestIsCounted();
                        } catch (e) {
                            vilog(e);
                        }
                    }
                }, {
                    key: "logBidRequestAMZ",
                    value: function logBidRequestAMZ(amzSlots) {
                        var _this3 = this;

                        amzSlots.forEach(function (slot) {
                            try {
                                var adUnit = AdUnitManager.get(slot.adunitCode);
                                var adReqSizes = slot.sizes.filter(function (item) {
                                    return true;
                                });
                                adReqSizes.push(adUnit.tagSize);
                                var rqz = mapRequestSizes(adReqSizes);
                                callPixel(_this3.buildPixelUrl(REPORT_PATH.BID_REQUEST, {
                                    tm: generateUUID(),
                                    mt: adUnit.mediaType,
                                    sz: adUnit.adPrimarySize,
                                    bs: slot.bidderCode,
                                    rqz: rqz.join(","),
                                    reqz: adUnit.getRequestSizes(rqz),
                                    // đếm request size by tag
                                    dmt: "amazon",
                                    brq: adUnit.bidRequestIsCounted,
                                    floor: adUnit.floorPrice,
                                    dynf: adUnit.dynamicFloor,
                                    flt: adUnit.floorType,
                                    fit: adUnit.floorInTesting,
                                    ftt: adUnit.testTime,
                                    tsc: adUnit.testCaseId,
                                    abid: adUnit.abTestId
                                }));
                                adUnit.flagBidRequestIsCounted();
                            } catch (e) {
                                vilog(e);
                            }
                        });
                    }
                }, {
                    key: "getBidMediaType",
                    value: function getBidMediaType(bid) {
                        try {
                            return bid.mediaType == "video" ? AdUnitManager.get(bid.adUnitCode).mediaType : bid.mediaType;
                        } catch (error) {
                            vilog(e);
                            return "";
                        }
                    }
                }, {
                    key: "getBidSize",
                    value: function getBidSize(bid) {
                        try {
                            if (bid.mediaType == "native") {
                                return "auto";
                            }

                            var adUnit = AdUnitManager.get(bid.adUnitCode);
                            var bidSize = bid.size ? bid.size : "".concat(bid.width, "x").concat(bid.height);

                            if (adUnit && adUnit.adRequestSizes && adUnit.adRequestSizes.indexOf(bidSize) === -1) {
                                bidSize = adUnit.adPrimarySize;
                            }

                            return bidSize;
                        } catch (e) {
                            vilog(e);
                            return "xxx";
                        }
                    }
                }, {
                    key: "getAdSlotSize",
                    value: function getAdSlotSize() {
                        return "".concat(this.adWidth, "x").concat(this.adHeight);
                    }
                }]);

                return PixelManager;
            }();

            function countQuizResult(tagId, quizId, askId) {
                callPixel(_buildPixelUrl(REPORT_PATH.QUIZ_EVENT, {
                    tm: generateUUID(),
                    z: tagId,
                    quid: quizId,
                    ask: askId
                }));
            }

            function _buildPixelUrl(urlPath, pixelData) {
                if (isDebugMode()) {
                    return "";
                }

                var data = Object.assign({
                    d: Configs.domainID,
                    de: DEVICE,
                    s2s: Configs.s2sBidders.join(","),
                    ver: pixel_CONSTANTS.JS_VERSION,
                    ctt: Configs.cacheTime,
                    timeout: Configs.prebidTimeout,
                    rft: Configs.adRefreshTime,
                    rfy: Configs.reloadMode,
                    alt: Configs.adloadType,
                    sfr: Configs.safeFrame
                }, pixelData);

                if (Configs.geoRequireCMP && pixelSetCmpData.indexOf(urlPath) !== -1) {
                    if (typeof_default()(Configs.dataCMP) === "object" && Configs.dataCMP.cmp) {
                        for (var property in Configs.dataCMP) {
                            data[property] = Configs.dataCMP[property];
                        }
                    }
                }

                var pixel = serialize(data);

                if (undefined && undefined === "dev") {
                    return "".concat(Configs.reportURL).concat(urlPath, "?").concat(pixel);
                } else {
                    return "".concat(Configs.reportURL).concat(urlPath, "?e=").concat(encrypt(pixel));
                }
            }

            function pixelInit() {
                var pageViewCounted = false;

                var countPageView = function countPageView() {
                    if (pageViewCounted) {
                        return;
                    }

                    pageViewCounted = true;
                    callPixel(_buildPixelUrl(REPORT_PATH.PAGE_VIEW, {
                        tm: generateUUID(),
                        tft: "PAGE_VIEW",
                        blk: Configs.gbk === true ? 1 : 0
                    }));
                };

                if (Configs.configAssigned === true) {
                    countPageView();
                } else {
                    _addEventListener("ASSIGN_CONFIG", countPageView);
                }

                apdpbjs.onEvent('auctionInit', function (data) {
                    var bidderReqByAdUnit = {};
                    data.bidderRequests.forEach(function (reqItem) {
                        try {
                            reqItem.bids.forEach(function (adUnitItem) {
                                if (!bidderReqByAdUnit[adUnitItem.adUnitCode]) {
                                    bidderReqByAdUnit[adUnitItem.adUnitCode] = [];
                                }

                                bidderReqByAdUnit[adUnitItem.adUnitCode].push(reqItem.bidderCode);
                            });
                        } catch (e) {
                            vilog(e);
                        }
                    });

                    for (var adUnitCode in bidderReqByAdUnit) {
                        try {
                            if (!AdUnitManager.get(adUnitCode)) {
                                continue;
                            }

                            var adUnit = AdUnitManager.get(adUnitCode);
                            var biddingInfo = {
                                z: adUnit.tagId,
                                tm: generateUUID(),
                                sz: adUnit.adPrimarySize,
                                mt: adUnit.mediaType,
                                auc: adUnitCode,
                                brq: adUnit.bidRequestIsCounted,
                                floor: adUnit.floorPrice,
                                dynf: adUnit.dynamicFloor,
                                flt: adUnit.floorType,
                                fit: adUnit.floorInTesting,
                                ftt: adUnit.testTime,
                                tsc: adUnit.testCaseId,
                                abid: adUnit.abTestId
                            };
                            biddingInfo.rqz = adUnit.adRequestSizes.join(",");
                            biddingInfo.reqz = adUnit.getRequestSizes(adUnit.adRequestSizes); // đếm request size by tag

                            biddingInfo.bs = bidderReqByAdUnit[adUnitCode].join(",");
                            biddingInfo.sc = adUnit.pixelManager.sourceType;
                            callPixel(_buildPixelUrl(REPORT_PATH.BID_REQUEST, biddingInfo));
                            adUnit.flagBidRequestIsCounted(); // đánh dấu đã đếm bid request cho lần bid này
                        } catch (e) {
                            vilog(e);
                        }
                    }
                });
                apdpbjs.onEvent('bidTimeout', function (data) {
                    var bidTimeoutByAdUnit = {};
                    data.forEach(function (item) {
                        if (!bidTimeoutByAdUnit[item.adUnitCode]) {
                            bidTimeoutByAdUnit[item.adUnitCode] = [];
                        }

                        bidTimeoutByAdUnit[item.adUnitCode].push(item.bidder);
                    });

                    for (var adUnitCode in bidTimeoutByAdUnit) {
                        try {
                            callPixel(_buildPixelUrl(REPORT_PATH.BID_TIMEOUT, {
                                tm: generateUUID(),
                                z: AdUnitManager.get(adUnitCode).tagId,
                                sc: AdUnitManager.get(adUnitCode).pixelManager.sourceType,
                                bidder: bidTimeoutByAdUnit[adUnitCode].join(",")
                            }));
                        } catch (e) {
                            captureException(e, "[pixelInit - bidTimeout]");
                        }
                    }
                });
            }
            function getMediaTypeVideo(mediaTypeObj) {
                try {
                    return "video ".concat(mediaTypeObj.context);
                } catch (e) {
                    return "";
                }
            }

            function newAdUnitsManager() {
                var adUnits = {};
                return {
                    add: function add(adUnitCode, adUnitItem) {
                        adUnitItem.bidRequestIsCounted = 0; // chưa được đếm

                        adUnitItem.requestSizeList = []; // lưu các ad sizes đã đếm bid request

                        adUnitItem.flagBidRequestIsCounted = function () {
                            // đánh dấu đã đếm bid request cho lần bid này
                            adUnitItem.bidRequestIsCounted = 1; // đã được đếm

                            adUnitItem.pixelManager.bidRequestIsCounted = 1;
                        };

                        adUnitItem.resetBidRequestCountedFlag = function () {
                            adUnitItem.bidRequestIsCounted = 0;
                            adUnitItem.pixelManager.bidRequestIsCounted = 0;
                            adUnitItem.requestSizeList = [];
                        };

                        adUnitItem.getRequestSizes = function (adRequestSizes) {
                            if (adUnitItem.bidRequestIsCounted == 0) {
                                adUnitItem.requestSizeList = adRequestSizes;
                                return "";
                            }

                            return adRequestSizes.filter(function (size) {
                                if (adUnitItem.requestSizeList.indexOf(size) > -1) {
                                    return false;
                                }

                                adUnitItem.requestSizeList.push(size);
                                return true;
                            }).join(",");
                        };

                        adUnits[adUnitCode] = adUnitItem;
                    },
                    get: function get(adUnitCode) {
                        return adUnits[adUnitCode];
                    }
                };
            }


// CONCATENATED MODULE: ./src/plugins/helper/consent-string.js




            /**
             cmp=on/off                              hasCMP()
             cmp_format=valid/invalid/empty
             cmp_source=power/other                    isVLICMP
             cmp_type=gdpr/ccpa/null
             user_accept=yes/no
             tcf_ver=v1/v2                           GDPR = v2, CCPA = v1
             */

            var validStringRegExp = /^[1][nNyY-][nNyY-][nNyY-]$/;

            function findCMP(apiName) {
                var f = window;
                var cmpFrame;
                var cmpFunction;
                var cmpFramesLocator = "__tcfapiLocator";

                if (apiName === "__uspapi") {
                    cmpFramesLocator = "__uspapiLocator";
                }

                while (!cmpFrame) {
                    try {
                        if (typeof f[apiName] === 'function' || typeof f.__cmp === 'function') {
                            if (typeof f[apiName] === 'function') {
                                cmpFunction = f[apiName];
                            }

                            cmpFrame = f;
                            break;
                        }
                    } catch (e) {} // need separate try/catch blocks due to the exception errors thrown when trying to check for a frame that doesn't exist in 3rd party env


                    try {
                        if (f.frames[cmpFramesLocator]) {
                            cmpFrame = f;
                            break;
                        }
                    } catch (e) {}

                    if (f === window.top) break;
                    f = f.parent;
                }

                return {
                    cmpFrame: cmpFrame,
                    cmpFunction: cmpFunction
                };
            } // có/không triển khai cmp


            function hasCMP() {
                var cmpFrameObj = null;

                if (Configs.isUserInEU) {
                    cmpFrameObj = findCMP("__tcfapi");
                }

                if (Configs.isUserInUSCA) {
                    cmpFrameObj = findCMP("__uspapi");
                }

                if (typeof cmpFrameObj.cmpFrame != "undefined" || typeof cmpFrameObj.cmpFunction != "undefined") {
                    return true;
                }

                return false;
            } //cmp của bên khác / cmp của vli

            function isVLICMP() {
                if (hasCMP() && window.__POWERCMP == true) {
                    return true;
                }

                return false;
            }
            function getCMPData(callback) {
                var cmpCallbacks = {};
                var apiCMP = null;

                if (Configs.isUserInEU) {
                    apiCMP = "__tcfapi";
                }

                if (Configs.isUserInUSCA) {
                    apiCMP = "__uspapi";
                }

                if (!apiCMP) {
                    return;
                }

                function callCmpWhileInIframe(commandName, cmpFrame, moduleCallback, apiCMP) {
                    var apiName = '__tcfapi';
                    var version = 2;

                    if (apiCMP == "__uspapi") {
                        apiName = apiCMP;
                        version = 1;
                    }

                    var callName = "".concat(apiName, "Call");
                    window.addEventListener('message', readPostMessageResponse, false);
                    var callId = Math.random() + '';

                    var msg = defineProperty_default()({}, callName, {
                        command: commandName,
                        version: version,
                        callId: callId
                    });

                    cmpCallbacks[callId] = moduleCallback;
                    cmpFrame.postMessage(msg, '*');

                    function readPostMessageResponse(event) {
                        var json = {};

                        try {
                            json = typeof event.data === 'string' ? JSON.parse(event.data) : event.data;
                        } catch (ignore) {}

                        var cmpDataPkgName = "".concat(apiName, "Return");

                        if (json[cmpDataPkgName] && json[cmpDataPkgName].callId) {
                            var payload = json[cmpDataPkgName];

                            if (typeof cmpCallbacks[payload.callId] !== 'undefined') {
                                cmpCallbacks[payload.callId](payload.returnValue, payload.success);
                                cmpCallbacks[payload.callId] = null;
                            }
                        }
                    }
                }

                var _findCMP = findCMP(apiCMP),
                    cmpFrame = _findCMP.cmpFrame,
                    cmpFunction = _findCMP.cmpFunction;

                if (typeof cmpFunction === 'function') {
                    if (apiCMP === "__tcfapi") {
                        cmpFunction('getTCData', 2, callback);
                    } else {
                        cmpFunction('getUSPData', 1, callback);
                    }
                } else {
                    if (cmpFrame) {
                        if (apiCMP === "__tcfapi") {
                            callCmpWhileInIframe('getTCData', cmpFrame, callback, apiCMP);
                        } else {
                            callCmpWhileInIframe('getUSPData', cmpFrame, callback, apiCMP);
                        }
                    } else {
                        return;
                    }
                }
            }

            function validateUSPString(uspString) {
                if (!uspString) {
                    return "empty";
                }

                if (!validStringRegExp.test(uspString)) {
                    return "invalid";
                }

                return "valid";
            }

            function getVersionCMP(data) {
                if (typeof_default()(data) != "object" || isObjEmpty(data)) {
                    return;
                }

                var v = null;

                if (Configs.isUserInEU) {
                    v = data.tcfPolicyVersion ? "v".concat(data.tcfPolicyVersion) : 'v2';
                }

                if (Configs.isUserInUSCA) {
                    v = data.version ? "v".concat(data.version) : "v1";
                }

                return v;
            }

            function validateTypeCMP() {
                var type = null;

                if (Configs.isUserInEU) {
                    type = "gdpr";
                }

                if (Configs.isUserInUSCA) {
                    type = "ccpa";
                }

                return type;
            }

            function validateSourceCMP() {
                var sou = null;

                if (isVLICMP()) {
                    sou = "pubpower";
                } else {
                    sou = "other";
                }

                return sou;
            }

            function validateFormatCMP(data) {
                if (typeof_default()(data) != "object" || isObjEmpty(data)) {
                    return;
                }

                var format = null;

                if (Configs.isUserInEU) {
                    if (data.eventStatus === "cmpuishown" && data.tcString == "") {
                        // show popup CMP or tcString empty
                        format = "empty";
                    } else {
                        format = 'valid';
                    }
                }

                if (Configs.isUserInUSCA) {
                    if (!data.uspString) {
                        format = "empty";
                    }

                    if (data.uspString && validateUSPString(data.uspString)) {
                        format = "valid";
                    }

                    if (data.uspString && !validateUSPString(data.uspString)) {
                        format = "invalid";
                    }
                }

                return format;
            }

            function getKeyByValue(object, value) {
                return Object.keys(object).find(function (key) {
                    return object[key] === value;
                });
            }

            function validateUserAcceptCMP(data) {
                if (typeof_default()(data) != "object" || isObjEmpty(data)) {
                    return;
                }

                var uAccept = null;

                if (Configs.isUserInEU) {
                    if (data.purpose && data.purpose.consents && Object.keys(data.purpose.consents).length == 10) {
                        if (getKeyByValue(data.purpose.consents, false)) {
                            uAccept = "no";
                        } else {
                            uAccept = "yes";
                        }
                    } else {
                        uAccept = "no";
                    }
                }

                if (Configs.isUserInUSCA) {
                    if (data.uspString && data.uspString === "1YNN") {
                        uAccept = "yes";
                    } else {
                        uAccept = "no";
                    }
                }

                return uAccept;
            }

            function getDataPixelCMP(data) {
                if (typeof_default()(data) != "object" || isObjEmpty(data)) {
                    return;
                }

                try {
                    Configs.dataCMP = {
                        cmp: "on",
                        //
                        cmp_format: validateFormatCMP(data),
                        cmp_source: validateSourceCMP(),
                        //
                        cmp_type: validateTypeCMP(),
                        //
                        user_accept: validateUserAcceptCMP(data),
                        //
                        tcf_ver: getVersionCMP(data) //

                    };
                } catch (error) {}
            }
            function refreshDataCMPForPixel() {
                try {
                    if (!Configs.geoRequireCMP) {
                        return;
                    }

                    if (!hasCMP()) {
                        Configs.dataCMP.cmp = "off";
                        return;
                    }

                    getCMPData(function (data, success) {
                        if (success) {
                            vilog(data);
                            getDataPixelCMP(data);
                        } else {
                            Configs.dataCMP.cmp = "on";
                            Configs.dataCMP.cmp_format = "invalid";
                        }
                    });
                } catch (error) {
                    captureException(error, "[ConsentString - refreshDataCMPForPixel]");
                }

                return;
            }
// CONCATENATED MODULE: ./src/plugins/helper/BidManager.js








            var BidManager_CONSTANTS = __webpack_require__(5);

            var BID_FLOOR_PARAMS = __webpack_require__(120);

            var BidManager_BidManager = /*#__PURE__*/function () {
                function BidManager(adSlot) {
                    classCallCheck_default()(this, BidManager);

                    this.slotId = "";
                    this.tagId = 0;
                    this.floorPrice = 0; // giá sàn được sử dụng trong đấu giá

                    this.abTestFloorId = 0;
                    this.autoFloor = null;
                    this.bidResponses = [];
                    this.adUnitCodes = [];
                    this.adUnits = [];
                    this.amazonSlots = [];
                    this.pixelManager = {};

                    this.buildBannerFromNative = function () {};

                    this.addBidSlot(adSlot);
                }

                createClass_default()(BidManager, [{
                    key: "addBidSlot",
                    value: function addBidSlot(adSlot) {
                        var _this2 = this;

                        if (typeof apdpbjs == "undefined") {
                            var intv = setInterval(function () {
                                _this2.addBidSlot(adSlot);

                                clearInterval(intv);
                            }, 500);
                            return;
                        }

                        vilog("[BidManager] addBidSlot...");
                        vilog(adSlot);
                        this.slotId = adSlot.slotId;
                        this.tagId = adSlot.tagId;
                        this.buildBannerFromNative = adSlot.buildBannerFromNative ? adSlot.buildBannerFromNative : function () {};
                        this.adUnits = adSlot.adUnits;
                        this.sourceType = typeof adSlot.sourceType != "undefined" ? adSlot.sourceType : "js";
                        this.dynamicFloor = typeof adSlot.dynamicFloor === "number" ? adSlot.dynamicFloor : 0;
                        var staticFloor = typeof adSlot.floorPrice === "number" ? adSlot.floorPrice : 0;
                        var floorTest = Array.isArray(adSlot.floorTest) && adSlot.floorTest.length > 0 ? adSlot.floorTest : null;
                        this.abTestFloorId = floorTest === null && typeof adSlot.abTestFloorId === "number" && this.dynamicFloor > 0 ? adSlot.abTestFloorId : 0;

                        if (floorTest !== null) {
                            this.autoFloor = processFloorBid(this.slotId, {
                                floorTest: floorTest
                            });
                        } else if (this.abTestFloorId > 0) {
                            this.autoFloor = processFloorBid(this.slotId, {
                                abTestFloor: [staticFloor, this.dynamicFloor]
                            });
                        }

                        this.floorPrice = this.dynamicFloor > 0 ? this.dynamicFloor : staticFloor; // floor mặc định khi init bid manager

                        this.pixelManager = new pixel_PixelManager({
                            slotId: adSlot.slotId,
                            tagId: adSlot.tagId,
                            adUnits: adSlot.adUnits,
                            floorPrice: this.floorPrice,
                            floorType: this.dynamicFloor > 0 ? "dynamic" : "static",
                            floorInTesting: floorTest !== null ? 1 : 0,
                            testTime: typeof adSlot.testTime === "number" && floorTest !== null ? adSlot.testTime : 0,
                            testCaseId: typeof adSlot.testCaseId === "number" && floorTest !== null ? adSlot.testCaseId : 0,
                            abTestId: this.abTestFloorId,
                            viewPortDetect: adSlot.viewPortDetect,
                            adWidth: adSlot.adWidth,
                            adHeight: adSlot.adHeight,
                            sourceType: this.sourceType
                        });
                        var blockByRpm = Configs.blockByRpm;

                        var _this = this;

                        adSlot.adUnits.forEach(function (adUnitItem, i) {
                            var amzBids = [];
                            var adReqSizes = [];
                            var mediaType = "";

                            try {
                                if (adUnitItem.mediaTypes.banner) {
                                    adUnitItem.mediaTypes.banner.sizes = adUnitItem.mediaTypes.banner.sizes.filter(function (item) {
                                        if (Array.isArray(item) && item.length == 2) {
                                            return true;
                                        }

                                        return false;
                                    });
                                    adUnitItem.primarySize = getPrimarySizes(adUnitItem.mediaTypes.banner.sizes);
                                    adReqSizes = adUnitItem.mediaTypes.banner.sizes.filter(function (item) {
                                        return true;
                                    });
                                    mediaType = "banner";
                                }

                                if (adUnitItem.mediaTypes.video) {
                                    adUnitItem.primarySize = getPrimarySizes(adUnitItem.mediaTypes.video.playerSize);
                                    adReqSizes.push(adUnitItem.primarySize.filter(function (item) {
                                        return true;
                                    }));
                                    mediaType = getMediaTypeVideo(adUnitItem.mediaTypes.video);
                                }

                                if (adUnitItem.mediaTypes["native"]) {
                                    adReqSizes.push("auto");
                                }

                                _this.adUnitCodes.push(adUnitItem.code);

                                adUnitItem.bids = _this.buildBids(adUnitItem.bids, _this.floorPrice, adUnitItem.primarySize); // blockByRpm

                                if (blockByRpm) {
                                    for (var key in blockByRpm) {
                                        if (Object.hasOwnProperty.call(blockByRpm, key) && key == adSlot.slotId) {
                                            var blockList = blockByRpm[key];

                                            for (var j = 0; j < blockList.length; j++) {
                                                var itemRemove = blockList[j];

                                                for (var k = 0; k < adUnitItem.bids.length; k++) {
                                                    var bidRemove = adUnitItem.bids[k].bidder;

                                                    if (bidRemove == itemRemove) {
                                                        adUnitItem.bids.splice(k, 1);
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                for (var _i = 0; _i < adUnitItem.bids.length; _i++) {
                                    var bid = adUnitItem.bids[_i];

                                    if (Configs.listAmazonBidder.includes(bid.bidder)) {
                                        amzBids.push(bid);
                                        adUnitItem.bids.splice(_i, 1);
                                    }
                                }

                                adUnitItem.tagId = adSlot.tagId;
                                adUnitItem.issetAmazon = false;
                                apdpbjs.removeAdUnit(adUnitItem.code);
                                apdpbjs.addAdUnits(adUnitItem); // tagWidth, tagHeight là size gốc của tag lưu trong db:
                                // dùng để đếm bid req by size cho tag khi đếm bid request qua demand type là amazon hoặc google
                                // và sử dụng để đếm bid response by size cho tag đó khi đếm impression google ( search issetBidWithTagSize trong pixel.js, xem BidResponseIsCounted trong worker)

                                var tagSize = [];

                                if (adSlot.tagWidth && adSlot.tagHeight) {
                                    tagSize = [adSlot.tagWidth, adSlot.tagHeight];
                                    adReqSizes.push(tagSize);
                                }

                                AdUnitManager.add(adUnitItem.code, {
                                    pixelManager: _this.pixelManager,
                                    tagId: _this.tagId,
                                    adPrimarySize: adUnitItem.primarySize.join("x"),
                                    adRequestSizes: mapRequestSizes(adReqSizes),
                                    mediaType: mediaType,
                                    tagSize: tagSize,
                                    floorPrice: _this.floorPrice,
                                    dynamicFloor: _this.dynamicFloor,
                                    floorType: _this.pixelManager.floorType,
                                    floorInTesting: _this.pixelManager.floorInTesting,
                                    testTime: _this.pixelManager.testTime,
                                    testCaseId: _this.pixelManager.testCaseId,
                                    abTestId: _this.pixelManager.abTestId
                                });
                            } catch (e) {
                                captureException(e, "[BidManager - addBidSlot]");
                            }

                            try {
                                if (Configs.UAMPubId != "" && amzBids.length > 0 && isObjectEmpty(Configs.amazonCpm) == false) {
                                    vilog("[BidManager] adUnitItem------ ...");
                                    vilog(adUnitItem);

                                    for (var _i2 = 0; _i2 < amzBids.length; _i2++) {
                                        var _bid = amzBids[_i2];

                                        if (adUnitItem.mediaTypes.banner) {
                                            var apstagSlotSizes = amazonUAMSizeFilter(adUnitItem.mediaTypes.banner.sizes);

                                            if (apstagSlotSizes.length > 0) {
                                                var amzSlot = {
                                                    bidderCode: _bid.bidder,
                                                    adunitCode: adUnitItem.code,
                                                    slotID: adUnitItem.code,
                                                    sizes: apstagSlotSizes,
                                                    slotName: "Amazon",
                                                    primarySize: getPrimarySizes(apstagSlotSizes)
                                                };

                                                if (_this.floorPrice > 0) {
                                                    amzSlot.floor = {
                                                        value: Math.floor(_this.floorPrice * 100),
                                                        currency: "USD"
                                                    };
                                                }

                                                _this.amazonSlots.push(amzSlot);

                                                adUnitItem.amzBidderCode = _bid.bidder;
                                            }
                                        }

                                        if (adUnitItem.mediaTypes.video && adUnitItem.mediaTypes.video.context === "instream" && _bid.params && _bid.params.slotID) {
                                            var amzSlotVid = {
                                                bidderCode: _bid.bidder,
                                                adunitCode: adUnitItem.code,
                                                slotID: _bid.params.slotID,
                                                mediaType: 'video',
                                                primarySize: adUnitItem.mediaTypes.video.playerSize,
                                                sizes: adUnitItem.mediaTypes.video.playerSize
                                            };

                                            if (_this.floorPrice > 0) {
                                                amzSlotVid.floor = {
                                                    value: Math.floor(_this.floorPrice * 100),
                                                    currency: "USD"
                                                };
                                            }

                                            _this.amazonSlots.push(amzSlotVid);
                                        }
                                    }

                                    if (_this.amazonSlots.length > 0) {
                                        adUnitItem.issetAmazon = true;
                                    }
                                }
                            } catch (e) {
                                captureException(e, "[BidManager - add amazon bid slot]");
                            }
                        });
                    }
                }, {
                    key: "getHighestBid",
                    value: function getHighestBid() {
                        var _this3 = this;

                        this.pixelManager.clearBidWon();
                        var highestCpm = 0;
                        var winKey = null;
                        var currTime = Math.floor(Date.now() / 1000);
                        vilog("GetHighestBid on slot ".concat(this.slotId), "BidManager");
                        vilog(JSON.parse(JSON.stringify(this.bidResponses)));
                        this.bidResponses.forEach(function (bidItem, index) {
                            if (!bidItem || !bidItem.cpm) {
                                return;
                            }

                            if (_this3.abTestFloorId > 0 && bidItem.usedFloor != _this3.floorPrice) {
                                return;
                            }

                            if (bidItem.expiredTime > currTime && bidItem.cpm >= _this3.floorPrice && bidItem.cpm > highestCpm) {
                                highestCpm = bidItem.cpm;
                                winKey = index;
                            }
                        });

                        if (winKey !== null) {
                            var bidWon = this.bidResponses[winKey];
                            this.bidResponses.splice(winKey, 1);
                            this.pixelManager.setBidWon(bidWon);
                            Configs.dataBidWin[this.slotId] = bidWon;
                            return bidWon;
                        }

                        return null;
                    }
                }, {
                    key: "addBidToArray",
                    value: function addBidToArray(bid) {
                        // Case bid with DFP error -> add bid to bidResponses -> play bid
                        if (!bid) {
                            return;
                        }

                        this.bidResponses.push(bid);
                    }
                }, {
                    key: "addBidResponse",
                    value: function addBidResponse(bid) {
                        if (bid.mediaType == "video") {
                            bid.expiredTime = Math.floor(Date.now() / 1000) + bid.ttl - 20;
                        } else {
                            bid.expiredTime = Math.floor(Date.now() / 1000) + bid.ttl - 15;
                        } // 


                        if (isDebugMode() == false) {
                            this.pixelManager.addPixelToBid(bid);
                        }

                        try {
                            bid.adserverTargeting[BidManager_CONSTANTS.TARGET_KEYS.REAL_CPM] = bid.cpm; // sử dụng trong pixelManager    

                            bid.setSpecialBid = function () {
                                bid.specialBid = true;
                                bid.adserverTargeting[BidManager_CONSTANTS.TARGET_KEYS.SPECIAL_BID] = "true";
                                bid.adserverTargeting[BidManager_CONSTANTS.TARGET_KEYS.AD_ID] = "";
                            };

                            if (Configs.listAmazonBidder.includes(bid.bidderCode) || bid.mediaType == "native") {
                                bid.setSpecialBid();
                            }
                        } catch (e) {}

                        this.bidResponses.push(bid);
                        vilog("[BidManager] addBidResponse success...");
                        vilog(this.bidResponses);
                    }
                }, {
                    key: "validateBid",
                    value: function validateBid(bid) {
                        if (bid.cpm <= 0) {
                            return {
                                status: "STUPID_BID"
                            };
                        }

                        try {
                            if (bid.meta && bid.meta.advertiserDomains) {
                                for (var i = 0; i < bid.meta.advertiserDomains.length; i++) {
                                    var adDomain = bid.meta.advertiserDomains[i];

                                    if (Configs.blockAdDomains.indexOf(String(adDomain)) !== -1) {
                                        return {
                                            status: "BLOCKED_BY_AD_DOMAIN",
                                            adDomain: adDomain
                                        };
                                    }
                                }
                            }
                        } catch (e) {
                            vilog(e);
                        } // Block Heavy Ads


                        try {
                            if (Configs.blockCreatives.length > 0 && Configs.blockCreatives.indexOf(String(bid.creativeId)) !== -1) {
                                vilog("Blocked creativeId: " + bid.creativeId);
                                apdpbjs.markWinningBidAsUsed({
                                    adId: bid.adId
                                });

                                if (window.location.hostname != "jstag.local") {
                                    if (bid && bid.creativeId) {
                                        blockCreativeIds(bid.creativeId, 10);
                                    }
                                }

                                return {
                                    status: "BLOCKED_HEAVYADS",
                                    creativeId: bid.creativeId
                                };
                            }
                        } catch (e) {
                            vilog(e);
                        }

                        return {
                            status: "OK"
                        };
                    }
                }, {
                    key: "getFloorTypeTargetPrefix",
                    value: function getFloorTypeTargetPrefix(floorType) {
                        switch (floorType) {
                            case "static":
                                return "st";

                            case "dynamic":
                                return "dy";

                            default:
                                return null;
                        }
                    }
                }, {
                    key: "requestBids",
                    value: function requestBids(bidEndedCallBack) {
                        var curFloorObj = {
                            price: this.floorPrice,
                            type: this.getFloorTypeTargetPrefix(this.pixelManager.floorType),
                            abTestId: this.abTestFloorId
                        };

                        if (this.autoFloor !== null) {
                            var _this$autoFloor$getFl = this.autoFloor.getFloor(),
                                _this$autoFloor$getFl2 = slicedToArray_default()(_this$autoFloor$getFl, 2),
                                floorPrice = _this$autoFloor$getFl2[0],
                                floorType = _this$autoFloor$getFl2[1];

                            this.floorPrice = floorPrice;
                            this.pixelManager.floorPrice = floorPrice;
                            this.pixelManager.floorType = floorType;

                            if (floorType == "static" || floorType == "dynamic") {
                                this.pixelManager.dynamicFloor = this.dynamicFloor;
                            }

                            curFloorObj.price = floorPrice;
                            curFloorObj.type = this.getFloorTypeTargetPrefix(floorType);
                        }

                        this.pixelManager.resetBidReponseCountedFlag();
                        this.pixelManager.resetBidRequestCountedFlag();
                        var totalBidBackRequired = 1;

                        if (this.amazonSlots.length > 0) {
                            totalBidBackRequired++;
                        }

                        var _this = this;

                        var bidBackProcess = 0;
                        var auctionIsEmptyBid = true;
                        var allBidResponses = [];

                        var auctionEndedHandler = function auctionEndedHandler() {
                            bidBackProcess++;

                            if (bidBackProcess !== totalBidBackRequired) {
                                return;
                            }

                            allBidResponses.forEach(function (bid) {
                                bid.usedFloor = _this.pixelManager.floorPrice;
                                bid.dynamicFloor = _this.pixelManager.dynamicFloor;
                                bid.floorType = _this.pixelManager.floorType;

                                var validate = _this.validateBid(bid);

                                switch (validate.status) {
                                    case "OK":
                                        _this.addBidResponse(bid);

                                        auctionIsEmptyBid = false;
                                        break;

                                    default:
                                        bid.validate = validate;
                                }
                            });

                            _this.pixelManager.logBidResponse(allBidResponses);

                            bidEndedCallBack(auctionIsEmptyBid, curFloorObj);
                        };

                        if (this.autoFloor !== null) {
                            this.handleAdUnitsBeforRequestBid(this.floorPrice, this.pixelManager.floorType, this.pixelManager.dynamicFloor);
                        }

                        refreshDataCMPForPixel();
                        var TARGET_KEYS = BidManager_CONSTANTS.TARGET_KEYS;
                        apdpbjs.requestBids({
                            timeout: Configs.prebidTimeout,
                            adUnitCodes: _this.adUnitCodes,
                            bidsBackHandler: function bidsBackHandler(bidResponses, timeOutFlag, auctionId) {
                                vilog("[BidManager] bidResponses");
                                vilog(bidResponses);

                                for (var adUnitCode in bidResponses) {
                                    if (!bidResponses[adUnitCode].bids) {
                                        continue;
                                    }

                                    bidResponses[adUnitCode].bids.forEach(function (bid, index) {
                                        if (bid.mediaType == "native" && bid["native"]) {
                                            var adWidth = 1;
                                            var adHeight = 1;

                                            try {
                                                var adUnit = _this.getPrebidAdUnit(bid.adUnitCode);

                                                adWidth = adUnit.primarySize[0];
                                                adHeight = adUnit.primarySize[1];
                                            } catch (e) {
                                                captureException(e, "[BidManager - apdpbjs.requestBids]");
                                            }

                                            var nativeToBannerBid = {
                                                ad: _this.buildBannerFromNative(bid),
                                                adId: bid.adId,
                                                creativeId: bid.creativeId,
                                                adUnitCode: bid.adUnitCode,
                                                cpm: bid.cpm,
                                                ttl: bid.ttl,
                                                mediaType: "native",
                                                bidderCode: bid.bidderCode,
                                                adserverTargeting: bid.adserverTargeting,
                                                width: adWidth,
                                                height: adHeight,
                                                size: bid.size // giữ nguyên size của bid native trả về để đếm pixel theo size này

                                            };
                                            nativeToBannerBid.adserverTargeting[TARGET_KEYS.SIZE] = "".concat(adWidth, "x").concat(adHeight);
                                            allBidResponses.push(nativeToBannerBid);
                                        } else {
                                            allBidResponses.push(bid);
                                        }
                                    });
                                }

                                auctionEndedHandler();
                            }
                        });

                        if (this.amazonSlots.length > 0) {
                            vilog("[BidManager] Start request bid amazon for slotId ".concat(_this.slotId, " with adUnitCodes ").concat(_this.adUnitCodes));
                            this.pixelManager.logBidRequestAMZ(this.amazonSlots);
                            apstag.fetchBids({
                                slots: _this.amazonSlots,
                                timeout: Configs.prebidTimeout
                            }, function (bids) {
                                bids.forEach(function (bid) {
                                    vilog("[BidManager] Amazon bid response");
                                    vilog(bid);
                                    var adWidth = 2;
                                    var adHeight = 2;
                                    var adunitAmzCode = bid.slotID;
                                    var bidderAmzCode;

                                    try {
                                        var amzSlot = _this.getAmazonSlot(bid.slotID);

                                        adWidth = amzSlot.primarySize[0];
                                        adHeight = amzSlot.primarySize[1];
                                        adunitAmzCode = amzSlot.adunitCode;
                                        bidderAmzCode = amzSlot.bidderCode;
                                    } catch (e) {
                                        captureException(e, "[BidManager - apstag.fetchBids]");
                                    }

                                    if (bid.amznbid && isObjectEmpty(Configs.amazonCpm) == false && Configs.amazonCpm[bid.amznbid]) {
                                        var cpm = Configs.amazonCpm[bid.amznbid];
                                        var adSize = bid.amznsz && bid.amznsz != "" ? bid.amznsz : "".concat(adWidth, "x").concat(adHeight);
                                        var newAmazonBid = {
                                            cpm: cpm,
                                            adId: bid.amzniid,
                                            creativeId: bid.amzniid,
                                            adUnitCode: adunitAmzCode,
                                            bidderCode: bidderAmzCode,
                                            bidder: bidderAmzCode,
                                            width: adWidth,
                                            height: adHeight,
                                            size: adSize
                                        };

                                        if (bid.mediaType == "video") {
                                            newAmazonBid.vastUrl = "https://aax.amazon-adsystem.com/e/dtb/vast?b=".concat(bid.amzniid, "&rnd=").concat(generateUUID(), "&pp=").concat(bid.amznbid);
                                            newAmazonBid.mediaType = "video";
                                            newAmazonBid.ttl = 600;
                                            newAmazonBid.adserverTargeting = {
                                                amzniid: bid.amzniid,
                                                amznbid: bid.amznbid,
                                                uam_hb: getCustomAPDPB("video", cpm, Configs.granularityMultiplier)
                                            };
                                        } else {
                                            newAmazonBid.ad = "<script>var amzn_win=window,amzn_c=5,amzn_x=0;while(amzn_x<amzn_c){amzn_win=amzn_win.parent;if(amzn_win.apstag)try{amzn_win.apstag.renderImp(document,\"" + bid.amzniid + "\");amzn_x=amzn_c}catch(e){}amzn_x++};</script>";
                                            newAmazonBid.mediaType = "banner";
                                            newAmazonBid.ttl = 360;
                                            newAmazonBid.adserverTargeting = {
                                                hb_bidder: bidderAmzCode,
                                                hb_adid: bid.amzniid,
                                                hb_domain: Configs.domainName,
                                                hb_size: adSize,
                                                pw_pb: getCustomAPDPB("banner", cpm, Configs.granularityMultiplier),
                                                hb_format: "banner"
                                            };
                                        }

                                        allBidResponses.push(newAmazonBid);
                                    } else {}
                                });
                                auctionEndedHandler();
                            });
                        }
                    }
                }, {
                    key: "handleAdUnitsBeforRequestBid",
                    value: function handleAdUnitsBeforRequestBid(floorPrice, floorType, dynamicFloor) {
                        var _this = this;

                        this.adUnits.forEach(function (adUnitItem) {
                            AdUnitManager.get(adUnitItem.code).floorPrice = floorPrice;
                            AdUnitManager.get(adUnitItem.code).floorType = floorType;
                            AdUnitManager.get(adUnitItem.code).dynamicFloor = dynamicFloor;
                            adUnitItem.bids.forEach(function (bid, index) {
                                _this.addBidFloorParam(bid, floorPrice);
                            });
                        });
                    }
                }, {
                    key: "buildBids",
                    value: function buildBids() {
                        var bids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
                        var floorPrice = arguments.length > 1 ? arguments[1] : undefined;
                        var primarySize = arguments.length > 2 ? arguments[2] : undefined;

                        //add bidtest adapter
                        if (Configs.biddingTest === "on") {
                            if (!Array.isArray(bids)) {
                                bids = [];
                            }

                            bids.push({
                                "bidder": "bidtest"
                            });
                        }

                        if (!Array.isArray(bids)) {
                            return [];
                        } //Manual Add param for valueimpression/quantumdex adapter


                        return bids.filter(function (bid) {
                            switch (bid.bidder) {
                                case "valueimpression":
                                    bid.params = bid.params || {};
                                    bid.params.siteId = Configs.domainID.toString();
                                    break;

                                case "ix":
                                    if (primarySize) {
                                        bid.params = bid.params || {};
                                        bid.params.size = bid.params.size || [];

                                        if (JSON.stringify(bid.params.size) != JSON.stringify(primarySize)) {
                                            bid.params.size = primarySize;
                                        }
                                    }

                                    break;

                                case "pubmatic":
                                    bid.params = bid.params || {};
                                    bid.params.outstreamAU = "valueimpression_renderer_pubmatic";
                                    addGEOLocationParams(bid.bidder, bid);
                                    break;

                                case "rtbhouse":
                                    var region = "prebid-asia";

                                    if (Configs.isUserInEU) {
                                        region = "prebid-eu";
                                    }

                                    if (Configs.VIGeo === "US") {
                                        region = "prebid-us";
                                    }

                                    bid.params = bid.params || {};
                                    bid.params.region = region;
                                    break;

                                case "spotx":
                                    bid.params = bid.params || {};

                                    bid.params.outstream_function = function (bid) {
                                        console.log("SpotX OK");
                                    };

                                    if (!bid.params.outstream_options) {
                                        bid.params.outstream_options = {
                                            "custom_override": {
                                                "ad_volume": 0
                                            }
                                        };
                                    }

                                    break;

                                case "quantumdex":
                                    addGEOLocationParams(bid.bidder, bid);
                                    break;

                                case "smaato":
                                    addGEOLocationParams(bid.bidder, bid);
                                    break;
                            }

                            this.addBidFloorParam(bid, floorPrice);
                            return true; // return checkTrafficDrive(bid.bidder, CONFIGS.customGeo, CONFIGS.VIGeo);
                        }.bind(this));
                    }
                }, {
                    key: "addBidFloorParam",
                    value: function addBidFloorParam(bid, floorPrice) {
                        var realBidderCode = getRealBidderCode(bid.bidder);

                        if (realBidderCode in BID_FLOOR_PARAMS) {
                            bid.params = bid.params || {};
                            bid.params[BID_FLOOR_PARAMS[realBidderCode].param] = BID_FLOOR_PARAMS[realBidderCode].type === 'string' ? floorPrice.toString() : floorPrice;
                        }

                        if (["sovrn_s2s", "pp_sovrn_s2s"].includes(bid.bidder)) {
                            bid.params = bid.params || {};
                            bid.params["bidfloor"] = floorPrice;
                        }
                    }
                }, {
                    key: "getPrebidAdUnit",
                    value: function getPrebidAdUnit(adUnitCode) {
                        var result = null;
                        this.adUnits.forEach(function (adunit) {
                            if (adunit.code === adUnitCode) {
                                result = adunit;
                            }
                        });
                        return result;
                    }
                }, {
                    key: "getAmazonSlot",
                    value: function getAmazonSlot(slotId) {
                        var result = null;
                        this.amazonSlots.forEach(function (slotItem) {
                            if (slotItem.slotID === slotId) {
                                result = slotItem;
                            }
                        });
                        return result;
                    }
                }]);

                return BidManager;
            }();

            function addGEOLocationParamsToPrebid() {
                try {
                    if (typeof apdpbjs === "undefined") {
                        return;
                    }

                    apdpbjs.adUnits.forEach(function (adUnitItem) {
                        if (!adUnitItem || !adUnitItem.bids) {
                            return;
                        }

                        adUnitItem.bids.forEach(function (bid) {
                            addGEOLocationParams(bid.bidder, bid);
                        });
                    });
                } catch (e) {
                    captureException(e, "[BidManager - addGEOLocationParamsToPrebid]");
                }
            }
            function addGEOLocationParams(bidderCode, bid) {
                try {
                    if (Configs.GEOLocation == null) {
                        return;
                    }

                    switch (bidderCode) {
                        case "quantumdex":
                            Configs.GEOLocation.lastfix = Math.floor((new Date().getTime() - Configs.GEOLocation.timestamp) / 1000);
                            bid.params = bid.params || {};
                            bid.params.geo = Configs.GEOLocation;
                            vilog('[BidManager] Bid Quantumdex added params Geolocation');
                            vilog(bid);
                            break;

                        case "smaato":
                            bid.params = bid.params || {};
                            bid.params.app = bid.params.app || {};
                            bid.params.app.geo = bid.params.app.geo || {};
                            bid.params.app.geo.lat = Configs.GEOLocation.lat.toString();
                            bid.params.app.geo.lon = Configs.GEOLocation.lon.toString();
                            vilog('[BidManager] Bid Smaato added params Geolocation');
                            vilog(bid);
                            break;

                        case "pubmatic":
                            bid.params = bid.params || {};
                            bid.params.lat = Configs.GEOLocation.lat.toString();
                            bid.params.lon = Configs.GEOLocation.lon.toString();
                            vilog('[BidManager] Bid Pubmatic added params Geolocation');
                            vilog(bid);
                            break;
                    }
                } catch (e) {
                    vilog(e);
                }
            }
            /* harmony default export */ var helper_BidManager = (BidManager_BidManager);
// CONCATENATED MODULE: ./src/plugins/helper/debug.js


            var debug_createInfoOverlay = function createInfoOverlay(adID, insertInside, insertChild) {
                    var adElem = document.getElementById(adID);

                    if (!adElem) {
                        var adElems = document.getElementsByClassName(Configs.adClass); // get slot in format instream

                        Array.from(adElems).forEach(function (item) {
                            if (item.getAttribute("data-ad-slot") == adID) {
                                adElem = item;
                            }
                        });
                    }

                    if (!adElem) return;
                    var debugIfr = document.createElement('iframe');
                    debugIfr.id = 'debug_' + adID;
                    debugIfr.setAttribute('frameborder', 'no');
                    debugIfr.setAttribute('scrolling', 'no');
                    debugIfr.setAttribute('allowtransparency', 'true');
                    debugIfr.setAttribute('hidefocus', 'true');
                    debugIfr.setAttribute('marginwidth', '0');
                    debugIfr.setAttribute('marginheight', '0');
                    debugIfr.setAttribute('topmargin', '0');
                    debugIfr.setAttribute('leftmargin', '0');
                    debugIfr.style.cssText = 'width: 100%; height: 100%; position: absolute; background-color: rgba(255, 255, 255, 0.8); top: 0; left: 0; z-index: 1000000;' + (Configs.DebugParam ? 'display:block!important;opacity:1!important;' : 'display:none!important;opacity:0!important;');

                    if (insertInside === true) {
                        // insert in div
                        adElem.appendChild(debugIfr);
                    } else if (insertChild == true) {
                        // insert in child div
                        if (adElem.firstChild) {
                            adElem.firstChild.appendChild(debugIfr);
                        }
                    } else {
                        // insert level same div
                        if (adElem.parentNode) {
                            adElem.parentNode.appendChild(debugIfr);
                        }
                    }

                    var debugIfrDoc = debugIfr.contentWindow || debugIfr.contentDocument;
                    if (debugIfrDoc && debugIfrDoc.document) debugIfrDoc = debugIfrDoc.document;

                    if (debugIfrDoc) {
                        debugIfrDoc.open();
                        debugIfrDoc.write('<div id="infoPanel" style="padding: 5px; font-size: 12px; font-family: Consolas; color: #000;"><div style="font-weight: bold; color: #ff0000;">power_debug: on</div></div>');
                        debugIfrDoc.close();
                    }
                },
                pushInfoOverlay = function pushInfoOverlay(adID, label, value) {
                    var debugIfr = document.getElementById('debug_' + adID);
                    if (!debugIfr) return;
                    var debugIfrDoc = debugIfr.contentWindow || debugIfr.contentDocument;
                    if (debugIfrDoc && debugIfrDoc.document) debugIfrDoc = debugIfrDoc.document;
                    var infoPanel = debugIfrDoc.getElementById('infoPanel');
                    if (!infoPanel) return;

                    if (debugIfrDoc) {
                        var info = debugIfrDoc.createElement('div');
                        info.className = 'infoMessage';
                        info.innerHTML = '<span style="font-weight:bold;">' + label + ': </span><span>' + value + '</span>';
                        infoPanel.appendChild(info);
                    }
                },
                cleanInfoOverlay = function cleanInfoOverlay(adID) {
                    var debugIfr = document.getElementById('debug_' + adID);
                    if (!debugIfr) return;
                    var debugIfrDoc = debugIfr.contentWindow || debugIfr.contentDocument;
                    if (debugIfrDoc && debugIfrDoc.document) debugIfrDoc = debugIfrDoc.document;
                    Array.from(debugIfrDoc.querySelectorAll('.infoMessage')).forEach(function (infoMess) {
                        infoMess.remove();
                    });
                };


// CONCATENATED MODULE: ./src/plugins/helper/help.js
            function handleBarsCustom(template) {
                var objData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

                if (!template) {
                    return null;
                }

                function escapeRegExp(string) {
                    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); // $& means the whole matched string
                }

                function replaceAll(str, match, replacement) {
                    return str.replace(new RegExp(escapeRegExp(match), 'g'), function () {
                        return replacement;
                    });
                }

                for (var key in objData) {
                    template = replaceAll(template, "{{{" + key + "}}}", objData[key]);
                }

                return template;
            } //check browser

            function browserSniff() {
                var nVer = navigator.appVersion,
                    nAgt = navigator.userAgent,
                    browserName = navigator.appName,
                    fullVersion = '' + parseFloat(navigator.appVersion),
                    majorVersion = parseInt(navigator.appVersion, 10),
                    nameOffset,
                    verOffset,
                    ix; // MSIE 11

                if (navigator.appVersion.indexOf("Windows NT") !== -1 && navigator.appVersion.indexOf("rv:11") !== -1) {
                    browserName = "IE";
                    fullVersion = "11;";
                } // MSIE
                else if ((verOffset = nAgt.indexOf("MSIE")) !== -1) {
                    browserName = "IE";
                    fullVersion = nAgt.substring(verOffset + 5);
                } // Chrome
                else if ((verOffset = nAgt.indexOf("Chrome")) !== -1) {
                    browserName = "Chrome";
                    fullVersion = nAgt.substring(verOffset + 7);
                } // Safari
                else if ((verOffset = nAgt.indexOf("Safari")) !== -1) {
                    browserName = "Safari";
                    fullVersion = nAgt.substring(verOffset + 7);

                    if ((verOffset = nAgt.indexOf("Version")) !== -1) {
                        fullVersion = nAgt.substring(verOffset + 8);
                    }
                } // Firefox
                else if ((verOffset = nAgt.indexOf("Firefox")) !== -1) {
                    browserName = "Firefox";
                    fullVersion = nAgt.substring(verOffset + 8);
                } // In most other browsers, "name/version" is at the end of userAgent
                else if ((nameOffset = nAgt.lastIndexOf(' ') + 1) < (verOffset = nAgt.lastIndexOf('/'))) {
                    browserName = nAgt.substring(nameOffset, verOffset);
                    fullVersion = nAgt.substring(verOffset + 1);

                    if (browserName.toLowerCase() == browserName.toUpperCase()) {
                        browserName = navigator.appName;
                    }
                } // Trim the fullVersion string at semicolon/space if present


                if ((ix = fullVersion.indexOf(";")) !== -1) {
                    fullVersion = fullVersion.substring(0, ix);
                }

                if ((ix = fullVersion.indexOf(" ")) !== -1) {
                    fullVersion = fullVersion.substring(0, ix);
                } // Get major version


                majorVersion = parseInt('' + fullVersion, 10);

                if (isNaN(majorVersion)) {
                    fullVersion = '' + parseFloat(navigator.appVersion);
                    majorVersion = parseInt(navigator.appVersion, 10);
                } // Return data


                return [browserName, majorVersion];
            }
            ;
// CONCATENATED MODULE: ./src/plugins/helper/utlis.js











            var utlis_CONSTANTS = __webpack_require__(5);

            var VILOG_BACKGROUND = ["#75ae60", "#ccc", "#ec7575", "#6162ec", "#9751dc", "#51a5dc", "#dc7b51", "#6b8940", "#bb6c80", "#0038ee", "#4ca67f"];
            var _eventListener = {};
            var _eventListenerAllowed = ["USER_ACTIVE_ON_PAGE", // Sự kiện người dùng tương tác với trang
                "USER_FOCUS_PAGE", // Sự kiện người dùng focus vào trang
                "USER_OUT_PAGE", // Sự kiện người dùng blur khỏi trang
// Video Discovery
                "VISIBILITY_CHANGE", "INIT_SCRIPT", 'ASSIGN_CONFIG', "AD_START_RENDER", // khi 1 ads chuẩn bị render
                "AD_RENDER_EDNED", // khi 1 ads được render vào ad slot
// client tracking
                "IS_NOT_VISIBLE", "IS_VISIBLE", "WINDOW_IS_BLUR", "WINDOW_IS_FOCUS", // Heavy Ads Event
                "INSTREAM_HEAVY_ADS", "OUTSTREAM_HEAVY_ADS", "TOPARTICLES_HEAVY_ADS", "PINZONE_HEAVY_ADS", // Vpaid
                "VPAID_USER_PAUSE_AD", "VPAID_USER_RESUME_AD", // Interstitial
                "INTERSTITIAL_READY_RENDER_AD", "INTERSTITIAL_OBSERVE_ELEMENT_CHANGE", // Anchor
                'ANCHOR_SHOWAD_AFTER_SCROLL', //  
                "INCREASE_BOTTOM_VIDEO_FLOATING", // tăng khoảng cách tới bottom của video sticky
                "REDUCTION_BOTTOM_VIDEO_FLOATING" // giảm khoảng cách tới bottom của video sticky
            ];
            function loadScript(url, type, cbSuccess, cbFail) {
                var script = document.createElement('script');
                script.src = url;
                var head = document.getElementsByTagName('head')[0],
                    done = false;

                script.onload = script.onreadystatechange = function () {
                    if (!done && (!this.readyState || this.readyState == 'loaded' || this.readyState == 'complete')) {
                        done = true;
                        cbSuccess();
                        script.onload = script.onreadystatechange = null;
                    }

                    ;
                };

                script.onerror = function () {
                    cbFail();
                };

                head.appendChild(script);
            }
            function checkTrafficDrive(bidderCode, customGeoTarget, clientGeo) {
                if (!bidderCode) {
                    return false;
                }

                bidderCode = bidderCode.toLowerCase();

                if (!customGeoTarget || !customGeoTarget[bidderCode] || !customGeoTarget[bidderCode].rule) {
                    return true;
                }

                if (customGeoTarget[bidderCode].rule === "allow") {
                    if (customGeoTarget[bidderCode].country.length <= 0) return true;
                    if (customGeoTarget[bidderCode].country.indexOf(clientGeo) !== -1) return true;
                    return false;
                }

                if (customGeoTarget[bidderCode].rule === "deny") {
                    if (customGeoTarget[bidderCode].country.length <= 0) return false;
                    if (customGeoTarget[bidderCode].country.indexOf(clientGeo) !== -1) return false;
                    return true;
                }

                return true;
            }
            function ucFirst(s) {
                if (typeof s !== 'string') return '';
                return s.charAt(0).toUpperCase() + s.slice(1);
            }
            function decodeString(str) {
                var vlMap = {
                    "s": "a",
                    "d": "s",
                    "f": "d",
                    "g": "f",
                    "h": "g",
                    "j": "h",
                    "k": "j",
                    "l": "k",
                    "z": "l",
                    "x": "z",
                    "c": "x",
                    "v": "c",
                    "b": "v",
                    "n": "b",
                    "m": "n",
                    "q": "m",
                    "w": "q",
                    "a": "w",
                    "9": ".",
                    "0": 9,
                    "6": 0,
                    "2": 6,
                    "_": 2,
                    ".": "_"
                };
                var result = str.split('').map(function (t) {
                    if (typeof vlMap[t] != 'undefined') {
                        return vlMap[t];
                    }

                    return t;
                });
                return result.join('');
            }
            function getUrlParam(name) {
                name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
                var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
                var results = regex.exec(window.location.search);
                return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
            }
            function generateUUID(placeholder) {
                var _getRandomData = function _getRandomData() {
                    if (window && window.crypto && window.crypto.getRandomValues) {
                        return crypto.getRandomValues(new Uint8Array(1))[0] % 16;
                    } else {
                        return Math.random() * 16;
                    }
                };

                return placeholder ? (placeholder ^ _getRandomData() >> placeholder / 4).toString(16) : ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, generateUUID);
            }
            function callPixel(pixelUrl) {
                if (typeof pixelUrl !== "string" || pixelUrl == "") {
                    return;
                }

                var vlPixel = document.getElementById(Configs.pixelID);

                if (vlPixel == null) {
                    vlPixel = createPixelEl();
                }

                var img = document.createElement('img');
                img.style.cssText = "width:0px!important;height:0px!important;display:none!important";
                img.src = pixelUrl;
                vlPixel.appendChild(img);
            }
            function createPixelEl() {
                if (!document.body) {
                    var timeout = setInterval(function () {
                        createPixelEl();
                        clearInterval(timeout);
                    }, 200);
                    return;
                }

                var pixel = document.createElement(Configs.tagElement);
                pixel.id = Configs.pixelID;
                pixel.style.cssText = "width:0px!important;height:0px!important;display:none!important";
                document.body.appendChild(pixel);
                return pixel;
            }
            function utlis_mobileDetect() {
                try {
                    if (/Mobi|Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) return !0;
                } catch (a) {}

                return !1;
            }
            function getMobileOperatingSystem() {
                var userAgent = navigator.userAgent || navigator.vendor || window.opera; // Windows Phone must come first because its UA also contains "Android"

                if (/windows phone/i.test(userAgent)) {
                    return "Windows Phone";
                }

                if (/android/i.test(userAgent)) {
                    return "Android";
                }

                if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {
                    return "iOS";
                }

                return "unknown";
            }
            function getPixelToken(data) {
                var device = utlis_mobileDetect() ? "mobile" : "";

                if (data.type == "hb" || data.type == "hb_video") {
                    return encrypt('tm=' + generateUUID() + '&d=' + Configs.domainID + '&z=' + data.zoneID + '&b=' + data.bidder + '&p=' + data.cpm + '&de=' + device + '&powerref_id=' + Configs.refererSlotID);
                } else {
                    return encrypt('tm=' + generateUUID() + '&t=passback&d=' + Configs.domainID + '&z=' + data.zoneID + '&de=' + device + '&powerref_id=' + Configs.refererSlotID);
                }
            }
            function encrypt(str) {
                var vlMap = {
                    a: 'q',
                    b: 'w',
                    c: 'e',
                    d: 'r',
                    e: 't',
                    f: 'y',
                    g: 'u',
                    h: 'i',
                    i: 'o',
                    j: 'p',
                    k: 0,
                    l: 's',
                    m: 'd',
                    n: 'f',
                    o: 'g',
                    p: 'h',
                    q: 'j',
                    r: 'k',
                    s: 'l',
                    t: 'z',
                    u: 'x',
                    v: 'c',
                    w: 'v',
                    x: 'b',
                    y: 'n',
                    z: 'm',
                    0: 'A',
                    'A': 1,
                    1: 'T',
                    'T': 2,
                    2: 'Y',
                    'Y': 3,
                    3: 'B',
                    'B': 4,
                    4: 'P',
                    'P': 5,
                    5: 'Z',
                    'Z': 6,
                    6: 'U',
                    'U': 7,
                    7: 'K',
                    'K': 8,
                    8: 'M',
                    'M': 9,
                    9: 'a',
                    '&': 'R',
                    '=': 'N',
                    '.': 'G'
                };
                str = str.toLowerCase();
                var result = str.split('').map(function (t) {
                    if (typeof vlMap[t] != 'undefined') {
                        return vlMap[t];
                    }

                    return t;
                });
                return result.join('');
            }
            function errorRenderVideo(err) {
                var type = utlis_mobileDetect() ? err.t + "_mobile" : err.t + "_pc";
                type += "_" + err.b;
                var analyticIframe = document.getElementById(Configs.analyticIframeId);

                if (analyticIframe) {
                    if (typeof analyticIframe.contentWindow.powerAnatrack === 'function') {
                        analyticIframe.contentWindow.powerAnatrack('Error_video_' + err.e, Configs.domainName, type, err.b);
                    } else {
                        vilog("Can't Invoking Track Error Video Render");
                    }
                } else {
                    createAnalyticIframe('Error_video_' + err.e, Configs.domainName, type, err.b);
                }
            }
            function showOnAnalytics(data) {
                try {
                    var analyticIframe = document.getElementById(Configs.analyticIframeId);

                    if (analyticIframe) {
                        if (typeof analyticIframe.contentWindow.powerAnatrack === 'function') {
                            analyticIframe.contentWindow.powerAnatrack(data.bidder, Configs.domainName, data.cpm, "Default");
                        } else {
                            vilog("Can't Invoking Track");
                        }
                    } else {
                        createAnalyticIframe(data.bidder, Configs.domainName, data.cpm, "Default");
                    }
                } catch (e) {
                    vilog(e);
                }
            }
            function createAnalyticIframe(medium, source, campaign, content) {
                var ifr = document.createElement('iframe');
                ifr.id = Configs.analyticIframeId;
                ifr.width = "0";
                ifr.height = "0";
                ifr.style.cssText = "display:none";
                elementReady("#" + Configs.pixelID, function () {
                    var vlPixel = document.getElementById(Configs.pixelID);
                    vlPixel.appendChild(ifr);
                    var html = '<script async src="https://www.googletagmanager.com/gtag/js?id=' + Configs.analyticsID + '"></script> <script> window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag("js", new Date()); gtag("config", "' + Configs.analyticsID + '", { "page_title": "' + medium + '_' + source + '_' + campaign + '_' + content + '", "campaign": { "medium": "' + medium + '", "source": "' + source + '", "name": "' + campaign + '", "content": "' + content + '" } }); function powerAnatrack(medium, source, campaign, content){ gtag("config", "' + Configs.analyticsID + '", { "page_title": medium + "_" + source + "_" + campaign + "_" + content, "campaign": { "medium": medium, "source": source, "name": campaign, "content": content } }); } </script>';
                    ifr.contentWindow.document.open();
                    ifr.contentWindow.document.write(html);
                    ifr.contentWindow.document.close();
                });
            }
            function setCookie(cookieName, cookieValue, cookieExdays) {
                if (!cookieExdays) {
                    cookieExdays = 90;
                }

                var d = new Date();
                d.setTime(d.getTime() + cookieExdays * 24 * 60 * 60 * 1000);
                var expires = "expires=" + d.toUTCString();
                document.cookie = cookieName + "=" + cookieValue + ";" + expires + ";path=/";
            }
            function getCookie(cookieName) {
                var name = cookieName + "=";
                var ca = document.cookie.split(';');

                for (var i = 0; i < ca.length; i++) {
                    var c = ca[i];

                    while (c.charAt(0) === ' ') {
                        c = c.substring(1);
                    }

                    if (c.indexOf(name) === 0) {
                        return c.substring(name.length, c.length);
                    }
                }

                return "";
            }
            function adserverTargeting(bidWon, gSlot) {
                if (!bidWon) return;
                if (!bidWon.adserverTargeting) return;
                var exKey = ["hb_pb", "hb_cache_path"]; // các key bị loại bỏ khỏi target

                for (var key in bidWon.adserverTargeting) {
                    if (!exKey.includes(key)) {
                        gSlot.setTargeting(key, bidWon.adserverTargeting[key]);
                    }
                }
            }
            function renderSafeFrame(adID, sizes, adContent) {
                var hasSf = window['$sf'] !== undefined && window['$sf'] != null,
                    hasSfLoaded = hasSf && window['$sf']['host'] != null;
                if (!hasSfLoaded) return false;
                var adConfig = {
                    id: adID,
                    w: sizes.width,
                    h: sizes.height,
                    dest: adID
                };
                var markup = adContent;
                var posConf = new $sf.host.PosConfig(adConfig);
                var pos = new $sf.host.Position(posConf, markup);
                $sf.host.render(pos);
            }
            function renderIframeForSmartBanner(adDiv, divId, width, height) {
                try {
                    adDiv.innerHTML = '<iframe class="powerIgnore" id="ifr_' + divId + '" SRC="about:blank" FRAMEBORDER="0" SCROLLING="no" MARGINHEIGHT="0" MARGINWIDTH="0" TOPMARGIN="0" LEFTMARGIN="0" ALLOWTRANSPARENCY="true" width="0" height="0" sandbox="allow-forms allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation"> </iframe>';
                    var iframe = document.getElementById('ifr_' + divId);
                    iframe.width = width;
                    iframe.height = height;
                    var iframeDoc = iframe.contentWindow || iframe.contentDocument;
                    if (iframeDoc && iframeDoc.document) iframeDoc = iframeDoc.document;
                    return iframeDoc;
                } catch (error) {
                    return null;
                }
            }
            function renderNativeAd(dcm, data) {
                dcm.open();
                dcm.write(getNativeAd(data));
                dcm.close();
            }
            function getNativeAd(data) {
                var html = '';
                html += '<div id="native-placeholder" style="width:' + data.width + 'px;height:' + data.height + 'px;"></div>';
                html += '<script src="//' + Configs.staticDomain + '/assets/plugins/native-universal-creative/test.js?v=1.01"></script>';
                html += '<script>';
                html += 'var pbNativeTagData = {};';
                html += 'pbNativeTagData.width = "' + data.width + '";';
                html += 'pbNativeTagData.height = "' + data.height + '";';
                html += 'pbNativeTagData.adId = "' + data.adId + '";';
                html += 'pbNativeTagData.pubUrl = "' + data.pubUrl + '";';
                html += 'try {pbNativeTag.init(pbNativeTagData);} catch (e) {console.log(e);}';
                html += '</script>';
                return html;
            }
            function isInViewPort(el, inViewPort, outViewPort, opts) {
                var defaultOpts = {
                    viewport: null,
                    threshold: [100]
                };
                opts = Object.assign({}, defaultOpts, opts);
                var clearInViewPortDetect = observeElementInViewport.observeElementInViewport(el, inViewPort, outViewPort, opts);
                return clearInViewPortDetect;
            }
            function vilog(message, header) {
                if ("string" == typeof message) {
                    // var time = (new Date).toLocaleTimeString();
                    // time += ":" + (new Date).getMilliseconds();
                    var title = "%cPubPower";

                    if (!Configs.runWithPP) {
                        title = "%cVLI";
                    }

                    var mss = [title, "display: inline-block; color: #fff; background: #DD0420; padding: 1px 4px; border-radius: 3px;"];

                    if (typeof header === "string") {
                        var order = Math.round(header.length - 4 / 20 * 10);
                        var headerBackground = VILOG_BACKGROUND[order > 10 ? 10 : order];
                        mss[0] += "%c".concat(header);
                        mss.push("display: inline-block; color: #fff; background: ".concat(headerBackground, "; padding: 1px 4px; border-radius: 3px;"));
                    } // mss.push(time, message);


                    mss.push(message);
                    window.console.log.apply(console, mss);
                } else {
                    console.log(message);
                }
            }
            function _log(message) {
                console.log("%c ".concat(message), 'background: #222; color: #bada55');
            }
            function generateVILogo() {
                var r = Math.floor(Math.random() * 100) + 1;
                return '<svg style="display:block;" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="80px" height="16px" viewBox="0 0 500 92.244" enable-background="new 0 0 500 92.244" xml:space="preserve"> <polygon fill="#ffffff" points="126.342,27.96 134.873,27.96 144.054,52.697 153.238,27.96 161.567,27.96 147.367,63.336 140.542,63.336 "/> <g> <defs> <rect id="SVGID_1_' + r + '" y="0" width="500" height="92.244"/> </defs> <clipPath id="SVGID_2_' + r + '"> <use xlink:href="#SVGID_1_' + r + '" overflow="visible"/> </clipPath> <path clip-path="url(#SVGID_2_' + r + ')" fill="#ffffff" d="M159.053,55.357v-0.099c0-5.871,4.466-8.582,10.838-8.582 c2.709,0,4.667,0.452,6.573,1.104v-0.451c0-3.161-1.956-4.917-5.77-4.917c-2.91,0-4.968,0.551-7.427,1.455l-1.906-5.821 c2.961-1.305,5.871-2.158,10.437-2.158c4.165,0,7.176,1.104,9.082,3.011c2.007,2.007,2.91,4.968,2.91,8.58v15.605h-7.376v-2.909 c-1.856,2.057-4.416,3.412-8.129,3.412C163.218,63.587,159.053,60.676,159.053,55.357 M176.565,53.601v-1.354 c-1.305-0.603-3.011-1.004-4.868-1.004c-3.261,0-5.268,1.306-5.268,3.714v0.1c0,2.057,1.706,3.262,4.164,3.262 C174.156,58.318,176.565,56.361,176.565,53.601"/> <rect x="188.703" y="26.455" clip-path="url(#SVGID_2_' + r + ')" fill="#ffffff" width="7.627" height="36.631"/> <path clip-path="url(#SVGID_2_' + r + ')" fill="#ffffff" d="M201.295,53.601V36.189h7.627v15.003c0,3.613,1.706,5.47,4.616,5.47 c2.911,0,4.768-1.856,4.768-5.47V36.189h7.627v26.896h-7.627v-3.813c-1.757,2.257-4.016,4.315-7.878,4.315 C204.656,63.587,201.295,59.773,201.295,53.601"/> <path clip-path="url(#SVGID_2_' + r + ')" fill="#ffffff" d="M229.439,49.788v-0.1c0-7.678,5.469-14,13.296-14 c8.982,0,13.098,6.975,13.098,14.602c0,0.604-0.051,1.304-0.101,2.007h-18.716c0.752,3.462,3.161,5.27,6.572,5.27 c2.56,0,4.416-0.805,6.524-2.761l4.365,3.864c-2.508,3.11-6.121,5.019-10.988,5.019C235.41,63.688,229.439,58.017,229.439,49.788 M248.407,47.53c-0.452-3.412-2.459-5.72-5.671-5.72c-3.161,0-5.218,2.257-5.82,5.72H248.407z"/> <path clip-path="url(#SVGID_2_' + r + ')" fill="#ffffff" d="M260.793,27.458h3.06v3.362h-3.06V27.458z M261.094,37.494h2.458v25.592h-2.458 V37.494z"/> <path clip-path="url(#SVGID_2_' + r + ')" fill="#ffffff" d="M271.227,37.494h2.459v4.566c1.656-2.659,3.964-5.168,8.53-5.168 c4.466,0,7.226,2.559,8.631,5.52c1.655-2.861,4.416-5.52,9.232-5.52c6.07,0,9.835,4.265,9.835,10.688v15.506h-2.458V47.88 c0-5.52-2.86-8.731-7.577-8.731c-4.315,0-8.078,3.312-8.078,9.033v14.903h-2.46V47.73c0-5.318-2.91-8.581-7.476-8.581 c-4.567,0-8.18,4.014-8.18,9.183v14.753h-2.459V37.494z"/> <path clip-path="url(#SVGID_2_' + r + ')" fill="#ffffff" d="M316.93,37.494h2.459v5.72c2.208-3.361,5.469-6.322,10.538-6.322 c6.171,0,12.444,4.967,12.444,13.298v0.1c0,8.329-6.273,13.398-12.444,13.398c-5.119,0-8.431-2.91-10.538-6.122v13.547h-2.459 V37.494z M339.711,50.389v-0.1c0-6.724-4.667-11.04-10.036-11.04c-5.318,0-10.438,4.467-10.438,10.99v0.1 c0,6.574,5.119,10.989,10.438,10.989C335.245,61.329,339.711,57.264,339.711,50.389"/> <path clip-path="url(#SVGID_2_' + r + ')" fill="#ffffff" d="M348.035,37.494h2.459v7.276c2.007-4.566,6.271-7.878,11.34-7.677v2.71h-0.25 c-5.922,0-11.09,4.465-11.09,12.794v10.488h-2.459V37.494z"/> <path clip-path="url(#SVGID_2_' + r + ')" fill="#ffffff" d="M363.085,50.339v-0.1c0-7.427,5.218-13.348,12.143-13.348 c7.177,0,11.742,5.821,11.742,13.398c0,0.451,0,0.603-0.051,1.003h-21.225c0.452,6.373,5.018,10.087,10.036,10.087 c3.964,0,6.674-1.757,8.781-4.015l1.705,1.505c-2.608,2.811-5.67,4.818-10.587,4.818C368.906,63.688,363.085,58.318,363.085,50.339 M384.31,49.085c-0.35-5.169-3.311-9.936-9.182-9.936c-5.068,0-8.981,4.265-9.434,9.936H384.31z"/> <path clip-path="url(#SVGID_2_' + r + ')" fill="#ffffff" d="M389.926,59.874l1.455-1.958c2.81,2.158,5.92,3.363,9.182,3.363 c3.462,0,6.172-1.908,6.172-4.867v-0.101c0-3.011-3.211-4.115-6.774-5.119c-4.165-1.203-8.78-2.458-8.78-7.024v-0.101 c0-4.115,3.462-7.075,8.429-7.075c3.062,0,6.524,1.104,9.083,2.81l-1.304,2.057c-2.359-1.555-5.169-2.559-7.878-2.559 c-3.514,0-5.821,1.907-5.821,4.466v0.101c0,2.86,3.462,3.914,7.125,4.967c4.114,1.155,8.43,2.659,8.43,7.177v0.101 c0,4.566-3.914,7.476-8.831,7.476C396.698,63.586,392.635,62.081,389.926,59.874"/> <path clip-path="url(#SVGID_2_' + r + ')" fill="#ffffff" d="M412.351,59.874l1.455-1.958c2.811,2.158,5.92,3.363,9.183,3.363 c3.462,0,6.172-1.908,6.172-4.867v-0.101c0-3.011-3.211-4.115-6.774-5.119c-4.165-1.203-8.78-2.458-8.78-7.024v-0.101 c0-4.115,3.462-7.075,8.429-7.075c3.062,0,6.523,1.104,9.083,2.81l-1.305,2.057c-2.358-1.555-5.169-2.559-7.878-2.559 c-3.513,0-5.82,1.907-5.82,4.466v0.101c0,2.86,3.462,3.914,7.125,4.967c4.113,1.155,8.43,2.659,8.43,7.177v0.101 c0,4.566-3.914,7.476-8.831,7.476C419.124,63.586,415.06,62.081,412.351,59.874"/> <path clip-path="url(#SVGID_2_' + r + ')" fill="#ffffff" d="M437.536,27.458h3.06v3.362h-3.06V27.458z M437.837,37.494h2.458v25.592h-2.458 V37.494z"/> <path clip-path="url(#SVGID_2_' + r + ')" fill="#ffffff" d="M446.214,50.389v-0.1c0-7.176,5.569-13.398,13.196-13.398 c7.577,0,13.098,6.122,13.098,13.298v0.1c0,7.175-5.57,13.398-13.198,13.398C451.733,63.688,446.214,57.566,446.214,50.389 M469.848,50.389v-0.1c0-6.172-4.616-11.089-10.538-11.089c-6.071,0-10.436,4.967-10.436,10.989v0.1 c0,6.171,4.615,11.09,10.536,11.09C465.482,61.379,469.848,56.412,469.848,50.389"/> <path clip-path="url(#SVGID_2_' + r + ')" fill="#ffffff" d="M478.072,37.494h2.459v4.767c1.706-3.011,4.565-5.369,9.232-5.369 c6.474,0,10.236,4.416,10.236,10.537v15.657h-2.459V47.88c0-5.269-2.961-8.731-8.129-8.731c-5.018,0-8.881,3.814-8.881,9.132 v14.804h-2.459V37.494z"/> </g> <g> <defs> <polygon id="SVGID_3_' + r + '" points="45.688,85.823 91.375,7.311 0,7 "/> </defs> <clipPath id="SVGID_4_' + r + '"> <use xlink:href="#SVGID_3_' + r + '" overflow="visible"/> </clipPath> <radialGradient id="SVGID_5_' + r + '" cx="0" cy="92.2437" r="1" gradientTransform="matrix(50.4885 0 0 -50.4885 49.1875 4693.2397)" gradientUnits="userSpaceOnUse"> <stop offset="0" style="stop-color:#F2F2F2"/> <stop offset="0.3234" style="stop-color:#F2F2F2"/> <stop offset="0.8772" style="stop-color:#B3B3B3"/> <stop offset="1" style="stop-color:#B3B3B3"/> </radialGradient> <rect y="7" clip-path="url(#SVGID_4_' + r + ')" fill="url(#SVGID_5_' + r + ')" width="91.375" height="78.822"/> </g> <g> <defs> <rect id="SVGID_6_' + r + '" y="0" width="500" height="92.244"/> </defs> <clipPath id="SVGID_7_' + r + '"> <use xlink:href="#SVGID_6_' + r + '" overflow="visible"/> </clipPath> <polygon clip-path="url(#SVGID_7_' + r + ')" fill="#B3E2EE" points="34.886,45.52 45.688,86.445 0,7 "/> <polygon clip-path="url(#SVGID_7_' + r + ')" fill="#67C6DD" points="42.73,20.466 34.886,45.52 0,7 "/> </g> <g> <defs> <polygon id="SVGID_8_' + r + '" points="10.515,0 44.515,15.67 62.211,0 "/> </defs> <clipPath id="SVGID_9_' + r + '"> <use xlink:href="#SVGID_8_' + r + '" overflow="visible"/> </clipPath> <radialGradient id="SVGID_10_' + r + '" cx="0" cy="92.2437" r="1" gradientTransform="matrix(47.0453 0 0 -47.0453 13.2813 4345.9038)" gradientUnits="userSpaceOnUse"> <stop offset="0" style="stop-color:#00A0C6"/> <stop offset="0.0829" style="stop-color:#00A0C6"/> <stop offset="0.2385" style="stop-color:#019AC1"/> <stop offset="0.4372" style="stop-color:#0289B4"/> <stop offset="0.6591" style="stop-color:#04709E"/> <stop offset="0.8964" style="stop-color:#065183"/> <stop offset="1" style="stop-color:#064476"/> </radialGradient> <rect x="10.515" y="0" clip-path="url(#SVGID_9_' + r + ')" fill="url(#SVGID_10_' + r + ')" width="51.696" height="15.671"/> </g> <g> <defs> <polygon id="SVGID_11_' + r + '" points="34.887,45.52 45.688,86.444 59.477,62.364 62.211,26.998 "/> </defs> <clipPath id="SVGID_12_' + r + '"> <use xlink:href="#SVGID_11_' + r + '" overflow="visible"/> </clipPath> <radialGradient id="SVGID_13_' + r + '" cx="0" cy="92.2437" r="1" gradientTransform="matrix(19.989 19.989 19.989 -19.989 -1808.7954 1899.9912)" gradientUnits="userSpaceOnUse"> <stop offset="0" style="stop-color:#00A0C6"/> <stop offset="0.0829" style="stop-color:#00A0C6"/> <stop offset="0.2385" style="stop-color:#019AC1"/> <stop offset="0.4372" style="stop-color:#0289B4"/> <stop offset="0.6591" style="stop-color:#04709E"/> <stop offset="0.8964" style="stop-color:#065183"/> <stop offset="1" style="stop-color:#064476"/> </radialGradient> <polygon clip-path="url(#SVGID_12_' + r + ')" fill="url(#SVGID_13_' + r + ')" points="48.549,13.335 91.934,56.72 48.549,100.106 5.164,56.72 "/> </g> <g> <defs> <rect id="SVGID_14_' + r + '" y="0" width="500" height="92.244"/> </defs> <clipPath id="SVGID_15_' + r + '"> <use xlink:href="#SVGID_14_' + r + '" overflow="visible"/> </clipPath> <polygon clip-path="url(#SVGID_15_' + r + ')" fill="#B3E2EE" points="65.996,70.683 53.548,92.244 45.493,59.005 "/> <polygon clip-path="url(#SVGID_15_' + r + ')" fill="#67C6DD" points="49.723,35.481 62.211,26.997 60.351,51.506 "/> <polygon clip-path="url(#SVGID_15_' + r + ')" fill="#67C6DD" points="70.91,31.347 100.075,11.66 68.94,65.999 "/> <polygon clip-path="url(#SVGID_15_' + r + ')" fill="#B3E2EE" points="91.375,7.311 42.73,20.467 34.886,45.52 "/> </g> </svg>';
            }
            function generateVIIcon() {
                var r = Math.floor(Math.random() * 100) + 1;
                return '<svg enable-background="new 0 0 500 92.244" version="1.1" viewBox="0 0 100 92" xml:space="preserve" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><rect class="" width="100%" height="100%" fill="none" style=""/><g class="currentLayer" style=""><g class=""><defs><polygon id="h' + r + '" points="45.688 85.823 91.375 7.311 0 7"/></defs><clipPath id="g' + r + '"><use overflow="visible" xlink:href="#h' + r + '"/></clipPath><radialGradient id="f' + r + '" cx="0" cy="92.244" r="1" gradientTransform="matrix(50.488 0 0 -50.488 49.188 4693.2)" gradientUnits="userSpaceOnUse"><stop stop-color="#F2F2F2" offset="0"/><stop stop-color="#F2F2F2" offset=".3234"/><stop stop-color="#B3B3B3" offset=".8772"/><stop stop-color="#B3B3B3" offset="1"/></radialGradient><rect y="7" width="91.375" height="78.822" clip-path="url(#g' + r + ')" fill="url(#f' + r + ')"/></g><g class=""><defs><rect id="e' + r + '" width="500" height="92.244"/></defs><clipPath id="b' + r + '"><use overflow="visible" xlink:href="#e' + r + '"/></clipPath><polygon points="34.886 45.52 45.688 86.445 0 7" clip-path="url(#b' + r + ')" fill="#B3E2EE"/><polygon points="42.73 20.466 34.886 45.52 0 7" clip-path="url(#b' + r + ')" fill="#67C6DD"/></g><g class=""><defs><polygon id="d' + r + '" points="10.515 0 44.515 15.67 62.211 0"/></defs><clipPath id="c' + r + '"><use overflow="visible" xlink:href="#d' + r + '"/></clipPath><radialGradient id="m' + r + '" cx="0" cy="92.244" r="1" gradientTransform="matrix(47.045 0 0 -47.045 13.281 4345.9)" gradientUnits="userSpaceOnUse"><stop stop-color="#00A0C6" offset="0"/><stop stop-color="#00A0C6" offset=".0829"/><stop stop-color="#019AC1" offset=".2385"/><stop stop-color="#0289B4" offset=".4372"/><stop stop-color="#04709E" offset=".6591"/><stop stop-color="#065183" offset=".8964"/><stop stop-color="#064476" offset="1"/></radialGradient><rect x="10.515" width="51.696" height="15.671" clip-path="url(#c' + r + ')" fill="url(#m' + r + ')"/></g><g class=""><defs><polygon id="l' + r + '" points="34.887 45.52 45.688 86.444 59.477 62.364 62.211 26.998"/></defs><clipPath id="k' + r + '"><use overflow="visible" xlink:href="#l' + r + '"/></clipPath><radialGradient id="j' + r + '" cx="0" cy="92.244" r="1" gradientTransform="matrix(19.989 19.989 19.989 -19.989 -1808.8 1900)" gradientUnits="userSpaceOnUse"><stop stop-color="#00A0C6" offset="0"/><stop stop-color="#00A0C6" offset=".0829"/><stop stop-color="#019AC1" offset=".2385"/><stop stop-color="#0289B4" offset=".4372"/><stop stop-color="#04709E" offset=".6591"/><stop stop-color="#065183" offset=".8964"/><stop stop-color="#064476" offset="1"/></radialGradient><polygon points="48.549 13.335 91.934 56.72 48.549 100.11 5.164 56.72" clip-path="url(#k' + r + ')" fill="url(#j' + r + ')"/></g><g class=""><defs><rect id="i' + r + '" width="500" height="92.244"/></defs><clipPath id="a' + r + '"><use overflow="visible" xlink:href="#i' + r + '"/></clipPath><polygon points="65.996 70.683 53.548 92.244 45.493 59.005" clip-path="url(#a' + r + ')" fill="#B3E2EE"/><polygon points="49.723 35.481 62.211 26.997 60.351 51.506" clip-path="url(#a' + r + ')" fill="#67C6DD"/><polygon points="70.91 31.347 100.08 11.66 68.94 65.999" clip-path="url(#a' + r + ')" fill="#67C6DD"/><polygon points="91.375 7.311 42.73 20.467 34.886 45.52" clip-path="url(#a' + r + ')" fill="#B3E2EE"/></g></g></svg>';
            }
            function getBrowser() {
                var ua = navigator.userAgent.match(/(opera|chrome|safari|firefox|msie)\/?\s*(\.?\d+(\.\d+)*)/i),
                    browser;

                if (navigator.userAgent.match(/Edge/i) || navigator.userAgent.match(/Trident.*rv[ :]*11\./i)) {
                    browser = "msie";
                } else {
                    browser = ua[1].toLowerCase();
                }

                return browser;
            }
            function ajaxRequest() {
                var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
                var method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "GET";
                var responseType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "text";
                var timeout = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1500;
                var withCredentials = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
                var sendData = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "";
                var resolve = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : function () {};
                var reject = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : function () {};

                if (!url) {
                    reject(Error("URL is required"));
                }

                var request = new XMLHttpRequest();
                request.responseType = responseType;

                request.onreadystatechange = function () {
                    if (request.readyState === XMLHttpRequest.DONE) {
                        if (request.status === 200) {
                            resolve(request.response);
                        } else {
                            reject(Error(request.status));
                        }
                    }
                };

                request.withCredentials = withCredentials;

                request.onerror = function () {
                    reject(Error("Network Error"));
                };

                request.timeout = timeout;

                request.ontimeout = function () {
                    reject(Error("Request Timeout"));
                };

                request.open(method, url, true);
                request.send(sendData);
            }
            function elementReady(selector, callback) {
                var ready = function ready() {
                    if (document.querySelector(selector)) {
                        if (typeof callback === "function") callback();
                        return;
                    }

                    window.requestAnimationFrame(ready);
                };

                window.requestAnimationFrame(ready);
            }
            function isInIframe() {
                try {
                    return window.self !== window.top;
                } catch (e) {
                    return true;
                }
            }
            function isHiddenElement(element) {
                if (element.parentElement instanceof Element) {
                    var elementStyle = window.getComputedStyle(element.parentElement);

                    if ("hidden" === elementStyle.visibility || "0" === elementStyle.opacity || "none" === elementStyle.display) {
                        return true;
                    }
                }

                return false;
            }
            function hasClass(element, className) {
                return element.classList ? element.classList.contains(className) : new RegExp("(^| )" + className + "( |$)", "gi").test(element.className);
            }
            function addVsbInterval(callback, time) {
                var myInterval = setInterval(function () {
                    if (Configs.isVisible) {
                        clearInterval(myInterval);
                        callback();
                    }
                }, time);
            }
            function getVastXml(bidWon) {
                if (bidWon.vastXml) return bidWon.vastXml;
                if (!bidWon.adResponse) return null;
                if (!bidWon.adResponse.ad) return null;
                if (!bidWon.adResponse.ad.video) return null;
                if (!bidWon.adResponse.ad.video.content) return null;
                return bidWon.adResponse.ad.video.content;
            }
            function generateUniqueAdID() {
                var max = 999;
                var min = 100;
                var adID = Math.floor(Math.random() * (max - min + 1)) + min;
                ;

                if (Configs.displayAdID.indexOf(adID) !== -1) {
                    return generateUniqueAdID();
                }

                Configs.displayAdID.push(adID);
                return adID;
            }
            function saveBidLog() {
                return;

                if (typeof Storage === 'undefined' || getUrlParam("__powerlbg").toUpperCase() == "") {
                    return;
                }

                var logdata = localStorage.getItem('bidwon_history');
                var promise = new Promise(function (resolve, reject) {
                    ajaxRequest("https://vliplatform.com/bidlog/index.php", "POST", "text", 3000, false, logdata, resolve, reject);
                });
                promise.then(function (e) {
                    if (e === "success") localStorage.removeItem("bidwon_history");
                })["catch"](function () {});
            }
            function logBidData(adType, bidWonData) {
                //log redirect bid
                if (typeof Storage === 'undefined' || getUrlParam("__powerlbg").toUpperCase() == "") {
                    return;
                }

                var logdata = localStorage.getItem('bidwon_history');

                if (!logdata) {
                    logdata = [];
                } else {
                    logdata = JSON.parse(logdata);
                }

                if (logdata.length >= 10) {
                    logdata.splice(0, 1);
                }

                var log = {
                    "id": generateUUID(),
                    "domain": Configs.domainID,
                    "time": new Date().getTime(),
                    "adType": adType,
                    "bidwon": bidWonData
                };
                logdata.push(log);
                localStorage.setItem('bidwon_history', JSON.stringify(logdata));
            }
            function isURL(str) {
                var pattern = new RegExp("^(https?:\\/\\/)?" + // protocol
                    "((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|" + // domain name
                    "((\\d{1,3}\\.){3}\\d{1,3}))" + // OR ip (v4) address
                    "(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*" + // port and path
                    "(\\?[;&a-z\\d%_.~+=-]*)?" + // query string
                    "(\\#[-a-z\\d_]*)?$", "i"); // fragment locator

                return !!pattern.test(str);
            }
            function captureException(e, prefix) {
                vilog(e);
                typeof_default()(prefix) !== undefined && (e.message += " - ".concat(prefix));
                var data = {
                    "content": e.message,
                    "url": "main.js",
                    "line": e.lineNumber,
                    "col": e.columnNumber,
                    "url_page": window.location.href,
                    "user_agent": navigator.userAgent,
                    "error": e.stack,
                    "version":  true ? "1.0.6" : undefined,
                    "timebuildJS":  true ? "7/4/2022, 3:27:42 PM" : undefined
                };
                pushLogErrorSystemJS("pubpower_errors_js", data);
            }
            function _addEventListener(eventName, eventAction) {
                if (_eventListenerAllowed.indexOf(eventName) === -1) {
                    return;
                }

                if (!_eventListener[eventName]) {
                    _eventListener[eventName] = [];
                }

                _eventListener[eventName].push(eventAction);
            }
            ;
            function _removeEventListener(eventName, eventAction) {
                if (!_eventListener || !_eventListener[eventName]) {
                    return;
                }

                _eventListener[eventName].forEach(function (item, index) {
                    if (item.name === eventAction.name) {
                        _eventListener[eventName].splice(index, 1);
                    }
                });
            }
            function _eventFire(eventName) {
                var args = [];

                for (var i = 0; i < arguments.length; i++) {
                    if (i > 0) {
                        args.push(arguments[i]);
                    }
                }

                try {
                    if (_eventListener && _eventListener[eventName]) {
                        _eventListener[eventName].forEach(function (_eventAction) {
                            _eventAction && _eventAction.apply(null, args);
                        });
                    }
                } catch (e) {}
            }
            ;
            function userTracking() {
                if (getCookie("__viCookieActive") == "true") {
                    Configs.clientTracking.userActive = true;
                    return;
                }

                var trackingActiveUser = function trackingActiveUser() {
                    Configs.clientTracking.userActive = true;
                    setCookie("__viCookieActive", true, 1 / 24 / 60 * 30);
                    window.removeEventListener("scroll", trackingActiveUser);
                    document.body.removeEventListener("click", trackingActiveUser);

                    _eventFire("USER_ACTIVE_ON_PAGE");
                };

                if (document.body) {
                    document.body.addEventListener("click", trackingActiveUser);
                }

                if (window) {
                    window.addEventListener("scroll", trackingActiveUser);
                }
            }
            function isObjectEmpty(mObject) {
                if (typeof_default()(mObject) != 'object' || !mObject) {
                    return false;
                }

                if (JSON.stringify(mObject) === '{}' || JSON.stringify(mObject) === '[]') {
                    return true;
                }

                return false;
            }

            function searchForArray(haystack, needle) {
                var i, j, current;

                for (i = 0; i < haystack.length; ++i) {
                    if (needle.length === haystack[i].length) {
                        current = haystack[i];

                        for (j = 0; j < needle.length && needle[j] === current[j]; ++j) {
                            ;
                        }

                        if (j === needle.length) return i;
                    }
                }

                return -1;
            }

            function amazonUAMSizeFilter(sizes) {
                var result = [];
                var allowSizes = [[120, 600], [160, 600], [250, 250], [300, 50], [300, 75], [300, 250], [300, 600], [320, 50], [320, 100], [336, 280], [728, 90], [970, 250]];

                for (var i = 0; i < sizes.length; i++) {
                    if (searchForArray(allowSizes, sizes[i]) !== -1) {
                        result.push(sizes[i]);
                    }
                }

                return result;
            }
            function isObjEmpty(obj) {
                for (var prop in obj) {
                    if (obj.hasOwnProperty(prop)) {
                        return false;
                    }
                }

                return JSON.stringify(obj) === JSON.stringify({});
            }
            var toogle = null;
            function showDebugAd() {
                // Bật debug quảng cáo
                if (toogle === null) {
                    toogle = Configs.DebugParam ? true : false;
                }

                toogle = !toogle;
                var wrapperAds = document.getElementsByClassName(Configs.adClass);

                if (wrapperAds != null) {
                    Array.from(wrapperAds).forEach(function (item) {
                        var adID = item.getAttribute("data-id");

                        if (adID == null) {
                            adID = item.getAttribute("data-ob-slot"); // outstream-banner
                        }

                        if (adID == null) {
                            adID = item.getAttribute("data-ad-slot"); // instream
                        }

                        if (adID == null) {
                            adID = item.getAttribute("id");
                        }

                        var iframe = document.getElementById('debug_' + adID);

                        if (iframe != null) {
                            if (toogle === true) {
                                iframe.style.setProperty("display", "block", "important");
                                iframe.style.setProperty("opacity", "1", "important");
                            }

                            if (toogle === false) {
                                iframe.style.setProperty("display", "none", "important");
                                iframe.style.setProperty("opacity", "0", "important");
                            }
                        }
                    });
                }
            }
            function mediaTypesAdFormatVideo(adFormat, _size) {
                if (!adFormat) return;

                if (!_size) {
                    switch (adFormat) {
                        case "instream":
                        case "instreamExt":
                        case "outstreamExt":
                        case "videodiscovery":
                        case "videodiscoveryExt":
                            _size = [640, 480];
                            break;

                        case "outstream":
                            _size = [410, 231];
                            break;
                    }
                }

                vilog("[Utils]=========");
                vilog(_size);

                if (adFormat == "instream") {
                    // định dạng instream gốc - playbackmethod - 3: phát tiếng
                    return {
                        "video": {
                            "api": [2],
                            "context": "instream",
                            "placement": 1,
                            "linearity": 1,
                            "minduration": 1,
                            "maxduration": 120,
                            "mimes": ["video/mp4", "video/x-flv", "video/x-ms-wmv", "application/vnd.apple.mpegurl", "application/x-mpegurl", "video/3gpp", "video/mpeg", "video/ogg", "video/quicktime", "video/webm", "video/x-m4v", "video/ms-asf", "video/x-msvideo"],
                            "playbackmethod": [3],
                            "playerSize": _size,
                            "startdelay": 0,
                            "protocols": [1, 2, 3, 4, 5, 6]
                        }
                    };
                }

                if (adFormat == "instreamExt") {
                    return {
                        "video": {
                            "api": [2],
                            "context": "outstream",
                            "placement": 5,
                            "linearity": 1,
                            "minduration": 1,
                            "maxduration": 120,
                            "mimes": ["video/mp4", "video/x-flv", "video/x-ms-wmv", "application/vnd.apple.mpegurl", "application/x-mpegurl", "video/3gpp", "video/mpeg", "video/ogg", "video/quicktime", "video/webm", "video/x-m4v", "video/ms-asf", "video/x-msvideo"],
                            "playbackmethod": [3],
                            "playerSize": _size,
                            "startdelay": 0,
                            "protocols": [1, 2, 3, 4, 5, 6]
                        }
                    };
                }

                if (adFormat == "outstreamExt") {
                    // định dạng instream danh cho outsream Ext (SmartVideo) - playbackmethod - 6: tắt tiếng
                    return {
                        "video": {
                            "api": [2],
                            "context": "instream",
                            "placement": 1,
                            "linearity": 1,
                            "minduration": 1,
                            "maxduration": 120,
                            "mimes": ["video/mp4", "video/x-flv", "video/x-ms-wmv", "application/vnd.apple.mpegurl", "application/x-mpegurl", "video/3gpp", "video/mpeg", "video/ogg", "video/quicktime", "video/webm", "video/x-m4v", "video/ms-asf", "video/x-msvideo"],
                            "playbackmethod": [6],
                            "playerSize": _size,
                            "startdelay": 0,
                            "protocols": [1, 2, 3, 4, 5, 6]
                        }
                    };
                }

                if (adFormat == "outstream") {
                    // định dạng outstream gốc - playbackmethod - 6: tắt tiếng
                    return {
                        "video": {
                            "api": [2],
                            "context": "outstream",
                            "placement": 5,
                            "linearity": 1,
                            "minduration": 1,
                            "maxduration": 120,
                            "mimes": ["video/mp4", "video/x-flv", "video/x-ms-wmv", "application/vnd.apple.mpegurl", "application/x-mpegurl", "video/3gpp", "video/mpeg", "video/ogg", "video/quicktime", "video/webm", "video/x-m4v", "video/ms-asf", "video/x-msvideo"],
                            "playbackmethod": [6],
                            "playerSize": _size,
                            "startdelay": 0,
                            "protocols": [1, 2, 3, 4, 5, 6]
                        }
                    };
                }

                if (adFormat == "videodiscovery") {
                    // định dạng instream dành cho videodiscovery - playbackmethod - 6: tắt tiếng
                    return {
                        "video": {
                            "api": [2],
                            "context": "instream",
                            "placement": 1,
                            "linearity": 1,
                            "minduration": 1,
                            "maxduration": 120,
                            "mimes": ["video/mp4", "video/x-flv", "video/x-ms-wmv", "application/vnd.apple.mpegurl", "application/x-mpegurl", "video/3gpp", "video/mpeg", "video/ogg", "video/quicktime", "video/webm", "video/x-m4v", "video/ms-asf", "video/x-msvideo"],
                            "playbackmethod": [6],
                            "playerSize": _size,
                            "startdelay": 0,
                            "protocols": [1, 2, 3, 4, 5, 6]
                        }
                    };
                }

                if (adFormat == "videodiscoveryExt") {
                    // định dạng outstream dành cho videodiscovery Ext - playbackmethod - 6: tắt tiếng
                    return {
                        "video": {
                            "api": [2],
                            "context": "outstream",
                            "placement": 2,
                            "linearity": 1,
                            "minduration": 1,
                            "maxduration": 120,
                            "mimes": ["video/mp4", "video/x-flv", "video/x-ms-wmv", "application/vnd.apple.mpegurl", "application/x-mpegurl", "video/3gpp", "video/mpeg", "video/ogg", "video/quicktime", "video/webm", "video/x-m4v", "video/ms-asf", "video/x-msvideo"],
                            "playbackmethod": [6],
                            "playerSize": _size,
                            "startdelay": 0,
                            "protocols": [1, 2, 3, 4, 5, 6]
                        }
                    };
                }

                return;
            }
            function isObject(item) {
                item = typeof item !== "string" ? JSON.stringify(item) : item;

                try {
                    item = JSON.parse(item);
                } catch (e) {
                    return false;
                }

                if (typeof_default()(item) === "object" && item !== null) {
                    return true;
                }

                return false;
            }
            function handlerReport(response) {
                if (response.origin.includes(window.location.hostname) && response.isObserver == true) {
                    if (!response.data || !isObject(response.data)) {
                        vilog("[reportingObserver] response not conform");
                        return;
                    }

                    if (typeof response.data === "string") {
                        var data = JSON.parse(response.data);
                    } else {
                        var data = response.data;
                    }

                    if (data) {
                        var pw_data = data.pw_ad;

                        if (typeof pw_data == "undefined" || !pw_data) {
                            return;
                        }

                        if (typeof pw_data.type != "undefined" && pw_data.type == "intervention") {
                            if (pw_data.body && pw_data.body.id == "HeavyAdIntervention") {
                                vilog(data.adFormat);

                                switch (data.adFormat) {
                                    case "Outstream":
                                        if (data.creativeId && data.creativeId != "" && data.creativeId != Configs.creativeIdVideoTest) {
                                            vilog(data.creativeId);
                                            blockCreativeIds(data.creativeId, 10);
                                        }

                                        vilog("[Utils] Init Outstream HeavyAdIntervention");

                                        _eventFire("OUTSTREAM_HEAVY_ADS");

                                        break;

                                    case "Instream":
                                        if (data.creativeId && data.creativeId != "" && data.creativeId != Configs.creativeIdVideoTest) {
                                            vilog(data.creativeId);
                                            blockCreativeIds(data.creativeId, 10);
                                        }

                                        vilog("[Utils] Init Instream HeavyAdIntervention");

                                        _eventFire("INSTREAM_HEAVY_ADS");

                                        break;

                                    case "TopArticles":
                                        if (data.creativeId && data.creativeId != "" && data.creativeId != Configs.creativeIdVideoTest) {
                                            vilog(data.creativeId);
                                            blockCreativeIds(data.creativeId, 10);
                                        }

                                        vilog("[Utils] Init TopArticles HeavyAdIntervention");

                                        _eventFire("TOPARTICLES_HEAVY_ADS");

                                        break;

                                    case "PinZone":
                                        if (data.creativeId && data.creativeId != "" && data.creativeId != Configs.creativeIdVideoTest) {
                                            vilog(data.creativeId);
                                            blockCreativeIds(data.creativeId, 10);
                                        }

                                        vilog("[Utils] Init PinZone HeavyAdIntervention");

                                        _eventFire("PINZONE_HEAVY_ADS");

                                        break;

                                    default:
                                        break;
                                }
                            }
                        }
                    }
                }
            }
            function blockCreativeIds(creativeId) {
                var blockTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
                var crBlock = JSON.parse(getCookie("__viCrBlock") ? getCookie("__viCrBlock") : "{}");
                vilog(crBlock);

                if (Object.values(crBlock).indexOf(creativeId) < 0) {
                    crBlock[creativeId] = creativeId + "";
                    setCookie("__viCrBlock", JSON.stringify(crBlock), blockTime);
                    Configs.blockCreatives.push(creativeId);
                }

                vilog(Configs.blockCreatives);
            }
            function reportingObserver(iframeAd, adData) {
                // Theo dõi sự kiện can thiệp của google chrome tới quảng cáo
                var _browser = browserSniff();

                vilog("Detect Browser User =====");
                vilog(_browser[0]);

                if (_browser && ['IE', 'Firefox', 'Safari'].includes(_browser[0])) {
                    return;
                }

                try {
                    var script = "\n        async function sendReports(reports) {\n            if(reports.length > 0){\n                for (let report of reports) {\n                    var viData = {\n                        'pw_ad': report,\n                        'creativeId' : '" + adData.creativeId + "',\n                        'adFormat' : '" + adData.adFormat + "',\n                    };";
                    var wParent = "window.parent.postMessage(JSON.stringify(viData), window.location.origin);";

                    if (adData.adFormat === "VideoDiscovery" || adData.adFormat === "TopArticles" || adData.adFormat === "PinZone" || adData.adFormat === "Instream") {
                        wParent = "window.parent.window.parent.postMessage(JSON.stringify(viData), window.location.origin);";
                    }

                    script += wParent;
                    script += "observer.takeRecords();\n                }\n            }\n        }";
                    script += "var observer = new ReportingObserver((reports, observer) => {\n            sendReports(reports);\n        }, {types: ['intervention'], buffered: true});\n        observer.observe();";

                    try {
                        var preview = iframeAd.contentDocument || iframeAd.contentWindow.document;
                        var scriptTag = preview.createElement("script");
                        scriptTag.innerHTML = script;
                        preview.body.appendChild(scriptTag);
                    } catch (error) {}
                } catch (error) {
                    captureException(error, "[Utils - reportingObserver]");
                }
            }
            function formatQS(query) {
                return Object.keys(query).map(function (k) {
                    return Array.isArray(query[k]) ? query[k].map(function (v) {
                        return "".concat(k, "[]=").concat(v);
                    }).join('&') : "".concat(k, "=").concat(query[k]);
                }).join('&');
            }
            function buildUrl(obj) {
                return (obj.protocol || 'http') + '://' + (obj.host || obj.hostname + (obj.port ? ":".concat(obj.port) : '')) + (obj.pathname || '') + (obj.search ? "?".concat(formatQS(obj.search || '')) : '') + (obj.hash ? "#".concat(obj.hash) : '');
            }
            /**
             * Parse a GPT-Style general size Array like `[[300, 250]]` or `"300x250,970x90"` into an array of sizes `["300x250"]` or '['300x250', '970x90']'
             * @param  {(Array.<number[]>|Array.<number>)} sizeObj Input array or double array [300,250] or [[300,250], [728,90]]
             * @return {Array.<string>}  Array of strings like `["300x250"]` or `["300x250", "728x90"]`
             */

            function parseSizesInput(sizeObj) {
                var parsedSizes = []; // if a string for now we can assume it is a single size, like "300x250"

                if (typeof sizeObj === 'string') {
                    // multiple sizes will be comma-separated
                    var sizes = sizeObj.split(','); // regular expression to match strigns like 300x250
                    // start of line, at least 1 number, an "x" , then at least 1 number, and the then end of the line

                    var sizeRegex = /^(\d)+x(\d)+$/i;

                    if (sizes) {
                        for (var curSizePos in sizes) {
                            if (hasOwn(sizes, curSizePos) && sizes[curSizePos].match(sizeRegex)) {
                                parsedSizes.push(sizes[curSizePos]);
                            }
                        }
                    }
                } else if (typeof_default()(sizeObj) === 'object') {
                    var sizeArrayLength = sizeObj.length; // don't process empty array

                    if (sizeArrayLength > 0) {
                        // if we are a 2 item array of 2 numbers, we must be a SingleSize array
                        if (sizeArrayLength === 2 && typeof sizeObj[0] === 'number' && typeof sizeObj[1] === 'number') {
                            parsedSizes.push(parseGPTSingleSizeArray(sizeObj));
                        } else {
                            // otherwise, we must be a MultiSize array
                            for (var i = 0; i < sizeArrayLength; i++) {
                                parsedSizes.push(parseGPTSingleSizeArray(sizeObj[i]));
                            }
                        }
                    }
                }

                return parsedSizes;
            } // Parse a GPT style single size array, (i.e [300, 250])
// into an AppNexus style string, (i.e. 300x250)


            function parseGPTSingleSizeArray(singleSize) {
                if (isValidGPTSingleSize(singleSize)) {
                    return singleSize[0] + 'x' + singleSize[1];
                }
            }

            function isArray(object) {
                return isA(object, "Array");
            }

            function isValidGPTSingleSize(singleSize) {
                // if we aren't exactly 2 items in this array, it is invalid
                return isArray(singleSize) && singleSize.length === 2 && !isNaN(singleSize[0]) && !isNaN(singleSize[1]);
            }

            function isA(object, _t) {
                return toString.call(object) === '[object ' + _t + ']';
            }
            function buildVastUrl(params, customParams) {
                var defaultVastParams = {
                    env: "vp",
                    gdfp_req: 1,
                    unviewed_position_start: 1,
                    correlator: Date.now(),
                    sz: "640x480",
                    url: encodeURIComponent(window.location.href),
                    description_url: encodeURIComponent(window.location.href),
                    output: "vast",
                    iu: "",
                    cust_params: ""
                };
                var queryParams = {};

                if (typeof_default()(params) === "object") {
                    queryParams = Object.assign(defaultVastParams, params);
                }

                if (typeof_default()(customParams) === "object") {
                    // Check Pub Custom Targeting (Work with Video Ads)
                    if (Configs.tagName && window[Configs.tagName] && window[Configs.tagName].customTargetGAM) {
                        for (var key in window[Configs.tagName].customTargetGAM) {
                            if (Object.hasOwnProperty.call(window[Configs.tagName].customTargetGAM, key)) {
                                var value = window[Configs.tagName].customTargetGAM[key];
                                customParams[key] = value;
                            }
                        }
                    }

                    queryParams.cust_params = encodeURIComponent(formatQS(customParams));
                }

                return buildUrl({
                    protocol: 'https',
                    host: utlis_CONSTANTS.DFP_HOST,
                    pathname: '/gampad/ads',
                    search: queryParams
                });
            }
            function utlis_buildDfpVideoUrl(options) {
                if (!options.params || !options.adUnit) {
                    vilog("[buildDfpVideoUrl] options.params and options.adUnit is required");
                    return;
                }

                var params = options.params || {};
                var customParams = options.customParams || {};

                try {
                    params.sz = parseSizesInput(options.adUnit.mediaTypes.video.playerSize).join('|');
                } catch (e) {
                    vilog("[buildDfpVideoUrl] parseSizesInput(options.adUnit.mediaTypes.video.playerSize).join('|') fail");
                    vilog(e);
                }

                try {
                    if (options.bidWon && options.bidWon.size === "410x231" && options.bidWon.mediaType === "video") {
                        params.sz = "400x300";
                    }
                } catch (error) {
                    vilog("[buildDfpVideoUrl] define size outstream fail");
                    captureException(error);
                }

                if (options.bidWon) {
                    try {
                        var prebidTargetingSet = Object.assign({}, // Why are we adding standard keys here ? Refer https://github.com/prebid/Prebid.js/issues/3664
                            {
                                hb_uuid: options.bidWon && options.bidWon.videoCacheKey
                            }, // hb_uuid will be deprecated and replaced by hb_cache_id
                            {
                                hb_cache_id: options.bidWon && options.bidWon.videoCacheKey
                            }, options.bidWon.adserverTargeting);
                        customParams = Object.assign(prebidTargetingSet, customParams);
                    } catch (e) {}
                }

                return buildVastUrl(params, customParams);
            }
            function isStr(object) {
                return isA(object, "String");
            }
            function isEmpty(object) {
                if (!object) return true;

                if (isArray(object) || isStr(object)) {
                    return !(object.length > 0);
                }

                for (var k in object) {
                    if (hasOwnProperty.call(object, k)) return false;
                }

                return true;
            }
            function getSizeCustomHBSize(bid) {
                if (!bid) {
                    return;
                }

                var hbSize = bid.size;

                if (bid.size === "410x231" && bid.mediaType === "video") {
                    hbSize = "400x300";
                }

                return hbSize;
            }
            function getCustomAPDPB(mediaType, realCPM) {
                var granularityMultiplier = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
                var bidAdjustment = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
                var targetingCpm = parseFloat(realCPM);

                if (isNaN(targetingCpm)) {
                    return "0.00";
                }

                if (bidAdjustment) {
                    targetingCpm = realCPM / bidAdjustment;
                }

                var mediaTypePriceGranularity = {};

                if (mediaType === "video") {
                    mediaTypePriceGranularity = Configs.videoPriceGranularity;
                } else {
                    mediaTypePriceGranularity = Configs.bannerPriceGranularity;
                }

                var priceStringsObj = getPriceBucketString(targetingCpm, mediaTypePriceGranularity, granularityMultiplier);
                var customHbPb = priceStringsObj.custom ? priceStringsObj.custom : priceStringsObj.dense;

                if (mediaType === "video" && parseFloat(customHbPb) > parseFloat(utlis_CONSTANTS.MAX_TARGET_CPM_VIDEO * granularityMultiplier)) {
                    return parseFloat(utlis_CONSTANTS.MAX_TARGET_CPM_VIDEO * granularityMultiplier);
                }

                if (mediaType !== "video" && parseFloat(customHbPb) > parseFloat(utlis_CONSTANTS.MAX_TARGET_CPM_BANNER * granularityMultiplier)) {
                    return parseFloat(utlis_CONSTANTS.MAX_TARGET_CPM_BANNER * granularityMultiplier);
                }

                if (parseFloat(customHbPb) < 0.01) {
                    return parseFloat(0.01 * granularityMultiplier);
                }

                return customHbPb;
            }
            function sendReportOfUsers(biWon, obj) {
                if (biWon && biWon.mediaType === "native") {
                    var objCnt = {
                        "address": biWon["native"].address ? biWon["native"].address : "",
                        "image": biWon["native"].image.url ? biWon["native"].image.url : "",
                        "body": biWon["native"].body ? biWon["native"].body : "",
                        "body2": biWon["native"].body2 ? biWon["native"].body2 : "",
                        "clickUrl": biWon["native"].clickUrl ? biWon["native"].clickUrl : "",
                        "cta": biWon["native"].cta ? biWon["native"].cta : "",
                        "displayUrl": biWon["native"].displayUrl ? biWon["native"].displayUrl : "",
                        "downloads": biWon["native"].downloads ? biWon["native"].downloads : "",
                        "javascriptTrackers": biWon["native"].javascriptTrackers ? biWon["native"].javascriptTrackers : "",
                        "likes": biWon["native"].likes ? biWon["native"].likes : "",
                        "phone": biWon["native"].phone ? biWon["native"].phone : "",
                        "price": biWon["native"].price ? biWon["native"].price : "",
                        "privacyIcon": biWon["native"].privacyIcon ? biWon["native"].privacyIcon : "",
                        "privacyLink": biWon["native"].privacyLink ? biWon["native"].privacyLink : "",
                        "rating": biWon["native"].rating ? biWon["native"].rating : "",
                        "salePrice": biWon["native"].salePrice ? biWon["native"].salePrice : "",
                        "sponsoredBy": biWon["native"].sponsoredBy ? biWon["native"].sponsoredBy : "",
                        "title": biWon["native"].title ? biWon["native"].title : ""
                    };
                    var adCnt = JSON.stringify(objCnt);
                    biWon.ad = adCnt;
                }

                if (biWon && biWon.mediaType === "video") {
                    if (biWon && biWon.vastXml) {
                        biWon.ad = biWon.vastXml;
                    }
                }

                vilog(biWon);
                var data = {
                    "adslotId": obj.adslotId ? obj.adslotId : "",
                    "domainId": Configs.domainID,
                    "creativeId": biWon ? biWon.creativeId : "unknown creativeId",
                    "adType": obj.adFormat ? obj.adFormat : biWon ? biWon.mediaType : "",
                    "url": window.location.href,
                    "demand": biWon ? biWon.bidder : "",
                    "geoIP": Configs.VIGeo,
                    "adContent": biWon ? biWon.ad : "",
                    "reason": obj.reason ? obj.reason : "",
                    "ua": navigator.userAgent
                };
                vilog(data);

                if (window.location.hostname != "jstag.local") {
                    if (biWon && biWon.creativeId) {
                        ajaxRequest("https://ur.vlitag.com/stats", "POST", "text", 2000, false, JSON.stringify(data), function () {}, function () {});
                        blockCreativeIds(biWon.creativeId, 10);
                    }
                }
            }
            function userLocation() {
                vilog("[Utils] userLocation ==================");

                if (Configs.domainID === 6 || Configs.domainID === 12699 || Configs.domainID === 11209) {
                    // freegames66.com && maps123.net && hocdot.com
                    window[Configs.tagName].enableGeoLocation = true;
                }

                if (window[Configs.tagName].enableGeoLocation === false) {
                    return;
                }

                try {
                    navigator.geolocation.getCurrentPosition(function (success) {
                        vilog("[Utils] Allowed Geolocation ==========");
                        var crd = success.coords;

                        if (crd) {
                            var objGeo = {
                                lat: crd.latitude,
                                lon: crd.longitude,
                                accuracy: crd.accuracy,
                                timestamp: new Date().getTime(),
                                utcoffset: new Date().getTimezoneOffset()
                            };
                            Configs.GEOLocation = objGeo;
                        }

                        vilog(Configs.GEOLocation);
                        addGEOLocationParamsToPrebid();
                    }, function (failure) {
                        if (failure.message.startsWith("Only secure origins are allowed")) {
                            vilog("[Utils] Geolocation API Removed from Unsecured Origins");
                        }
                    }, {
                        enableHighAccuracy: true
                    });
                } catch (e) {}
            }
            function validateEmail(email) {
                var re = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                return re.test(String(email).toLowerCase());
            }
            function getIframeDoc(iframe) {
                var iframeDoc = iframe.contentWindow || iframe.contentDocument;
                if (iframeDoc.document) iframeDoc = iframeDoc.document;
                return iframeDoc;
            }
            function initSafeFrameRender(callback) {
                if (Configs.safeFrame !== 'on') return;
                var pub = window["$sf"] && window["$sf"].host,
                    Config = pub && window["$sf"].host.Config;
                var conf, confDesc;

                if (Config) {
                    conf = Config();
                    confDesc = {
                        renderFile: '//' + Configs.staticDomain + '/assets/plugins/safeframe/src/html/r.html?v=1.03',
                        onEndPosRender: function onEndPosRender(id) {
                            vilog("Safe Iframe =========" + id);
                            id = id.replace("pw_sf_", "");
                            callback(id);
                        },
                        positions: {}
                    };
                    conf = new Config(confDesc);
                }
            }
            function getPrimarySizes(sizes) {
                var maxWith = 0;
                var maxHeight = 0;

                if (typeof sizes[0] === "number" && typeof sizes[1] === "number") {
                    return [sizes[0], sizes[1]];
                }

                sizes.forEach(function (item) {
                    if (Array.isArray(item)) {
                        if (item[0] > maxWith && item[1] > maxHeight) {
                            maxWith = item[0];
                            maxHeight = item[1];
                        }
                    }
                });
                return [maxWith, maxHeight];
            }
            function isDebugMode() {
                if (getUrlParam("amzn_debug_mode") == "1" || getUrlParam("pbjs_debug").toUpperCase() === "TRUE") {
                    return true;
                }

                return false;
            }
            function newWorker(callback, delay) {
                setTimeout(function () {
                    callback();
                    newWorker(callback, delay);
                }, delay);
            }
            function createInfoDebugOverlay(adSlotId) {
                var insertInside = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                var insertChild = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

                if (!adSlotId) {
                    return;
                }

                if (Configs.VIdebug) debug_createInfoOverlay(adSlotId, insertInside, insertChild);
                return;
            }
            function pushInfoDebugOverlay(adSlotId, bidWon) {
                if (!adSlotId || !bidWon) {
                    return;
                }

                if (!Configs.VIdebug) {
                    return;
                }

                cleanInfoOverlay(adSlotId);
                pushInfoOverlay(adSlotId, "adSlotId", adSlotId);
                pushInfoOverlay(adSlotId, "bidder", bidWon.bidder ? bidWon.bidder : "unknown");
                pushInfoOverlay(adSlotId, "cpm", bidWon.cpm ? bidWon.cpm : "unknown");
                pushInfoOverlay(adSlotId, "creativeId", bidWon.creativeId ? bidWon.creativeId : "unknown");
                pushInfoOverlay(adSlotId, "adId", bidWon.adId ? bidWon.adId : "unknown");
            }
            function cleanInfoDebugOverlay(adSlotId) {
                if (!adSlotId) {
                    return;
                }

                cleanInfoOverlay(adSlotId);
            }
            function saveLog(query, data) {
                return;
            }
            function serialize(obj) {
                var str = [];

                for (var prop in obj) {
                    str.push(prop + "=" + obj[prop]);
                }

                return str.join("&");
            }
            function getSizeOutstreamBanner(w, h) {
                if (!w || !h) {
                    return;
                }

                var widthAd = w;

                switch (w) {
                    case 300:
                    case 336:
                        widthAd = w;
                        break;

                    case 970:
                        widthAd = 445;
                        break;
                }

                var heightAd = Math.floor(widthAd * 9 / 16);
                return [parseInt(widthAd), parseInt(heightAd)];
            }
            function newViewPortDetect(el, opts) {
                var focusWindowTracking = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
                var inTabActive = [];
                var outTabActive = [];
                var inViewPortAction = [];
                var outViewPortAction = [];
                var lastAction = null;
                var isViewport = false;
                var isVisible = Configs.clientTracking.isVisible;
                var isFocus = Configs.clientTracking.focusPage;

                var inActivePortHandle = function inActivePortHandle() {
                    if (isViewport && isVisible) {
                        if (focusWindowTracking && !isFocus) return;
                        if (lastAction === "inView") return;
                        inViewPortAction.forEach(function (_action) {
                            return _action();
                        });
                        lastAction = "inView";
                    }
                };

                var outActivePortHandle = function outActivePortHandle() {
                    if (lastAction === "outView") return;
                    outViewPortAction.forEach(function (_action) {
                        return _action();
                    });
                    lastAction = "outView";
                }; // view port tracking


                isInViewPort(el, function () {
                    isViewport = true;
                    inActivePortHandle();
                }, function () {
                    isViewport = false;
                    outActivePortHandle();
                }, opts); // is Visible tracking

                _addEventListener("IS_VISIBLE", function () {
                    isVisible = true;
                    inActivePortHandle();
                    inTabActive.forEach(function (_action) {
                        return _action();
                    });
                });

                _addEventListener("IS_NOT_VISIBLE", function () {
                    isVisible = false;
                    outActivePortHandle();
                    outTabActive.forEach(function (_action) {
                        return _action();
                    });
                }); // is window focus tracking


                if (focusWindowTracking) {
                    _addEventListener("WINDOW_IS_FOCUS", function () {
                        isFocus = true;
                        inActivePortHandle();
                    });

                    _addEventListener("WINDOW_IS_BLUR", function () {
                        isFocus = false;
                        outActivePortHandle();
                    });
                }

                return {
                    inViewPort: function inViewPort(_action) {
                        if (typeof _action !== 'function') {
                            throw new Error('[Utils] isInViewPort action needs to be a function!');
                        }

                        lastAction === "inView" && _action();
                        inViewPortAction.push(_action);
                    },
                    outViewPort: function outViewPort(_action) {
                        if (typeof _action !== 'function') {
                            throw new Error('[Utils] isOutViewPort action needs to be a function!');
                        }

                        lastAction === "outView" && _action();
                        outViewPortAction.push(_action);
                    },
                    inTab: function inTab(_action) {
                        if (typeof _action !== 'function') {
                            throw new Error('[Utils] inTab action needs to be a function!');
                        }

                        inTabActive.push(_action);
                    },
                    outTab: function outTab(_action) {
                        if (typeof _action !== 'function') {
                            throw new Error('[Utils] outTab action needs to be a function!');
                        }

                        outTabActive.push(_action);
                    },
                    clear: function clear() {
                        inViewPortAction.length = 0;
                        outViewPortAction.length = 0;
                    }
                };
            }
            var utlis_HandleLog = /*#__PURE__*/function () {
                function HandleLog() {
                    classCallCheck_default()(this, HandleLog);

                    this.action = {};
                }

                createClass_default()(HandleLog, [{
                    key: "add",
                    value: function add(key, action) {
                        this.action[key] = action;
                    }
                }, {
                    key: "run",
                    value: function run(key) {
                        this.excute.apply(this, arguments);
                    }
                }, {
                    key: "runAndClear",
                    value: function runAndClear(key) {
                        this.excute.apply(this, arguments);
                        this.action[key] = null;
                    }
                }, {
                    key: "excute",
                    value: function excute(key) {
                        if (!this.action[key]) {
                            return;
                        }

                        try {
                            var args = [];

                            for (var i = 0; i < arguments.length; i++) {
                                i > 0 && args.push(arguments[i]);
                            }

                            this.action[key].apply(null, args);
                        } catch (e) {
                            vilog(e);
                        }
                    }
                }]);

                return HandleLog;
            }();
            function TimerDelay(callback, delay) {
                var timerId,
                    start,
                    remaining = delay;

                this.pause = function () {
                    window.clearTimeout(timerId);
                    remaining -= Date.now() - start;
                };

                this.resume = function () {
                    start = Date.now();
                    window.clearTimeout(timerId);
                    timerId = window.setTimeout(callback, remaining);
                };

                this.start = function () {
                    start = Date.now();
                    window.clearTimeout(timerId);
                    timerId = window.setTimeout(callback, remaining);
                };

                this.resume();
            }
            ;
            function deviceDetect(userAgent) {
                var TV_NAME = "tv",
                    TABLET_NAME = "tablet",
                    MOBILE_NAME = "mobile",
                    DESKTOP_NAME = "desktop";
                var ua;

                if (userAgent && typeof userAgent == "string") {
                    ua = userAgent;
                } else {
                    ua = navigator.userAgent || navigator.vendor || window.opera;
                }

                ua = ua.substr(0, 500); // mitigate vulnerable to ReDoS

                if (ua.match(/(SMART-TV|SmartTV|GoogleTV|SmartTV|Internet.TV|NetCast|NETTV|AppleTV|boxee|Kylo|Roku|DLNADOC|CE\-HTML|Xbox|PLAYSTATION|Wii)/i) || ua.match(/BRAVIA|Apple.TV|Opera.TV|Andr0id.TV|WebTV|SonyCEBrowser|TV.Store|HbbTV|TVBox|TV.Box|MiTV|Tizen.*TV|Viera|Humax|MiBox/i) || ua.match(/CrKey|ABOX-III|FreeBox.*Navigateur web|NEXBOX|Beelink|BrightSign|Leelbox|Nintendo/i) || ua.match(/H96.(PRO|MAX)|A95X.R1|M8S PRO|NEO-(U1|X5)|QM152E|TX3.(Mini|Pro)|X96mini|MiniA5X|MX9Pro|Percee TV|T95ZPLUS/) || ua.match(/QM152E|QM163E|QV151E|TPM171E|Netbox|HX_3229|MXQpro|p281 Build|V88 Build|AFTB|Nexus Player|VAP430/)) {
                    return TV_NAME;
                }

                if (ua.match(/iPad/i) || ua.match(/tablet/i) && !ua.match(/RX-34/i) || ua.match(/FOLIO/i) || ua.match(/Linux/i) && ua.match(/Android/i) && !ua.match(/Fennec|mobi|HTC.Magic|HTCX06HT|Nexus.One|SC-02B|fone.945/i) || ua.match(/Mac.OS/i) && ua.match(/Silk/i) || ua.match(/GT-P10|SC-01C|SHW-M180S|SGH-T849|SCH-I800|SHW-M180L|SPH-P100|SGH-I987|zt180|HTC(.Flyer|\_Flyer)|Sprint.ATP51|ViewPad7|pandigital(sprnova|nova)|Ideos.S7|Dell.Streak.7|Advent.Vega|A101IT|A70BHT|MID7015|Next2|nook/i) || ua.match(/MB511/i) && ua.match(/RUTEM/i)) {
                    return TABLET_NAME;
                }

                if (/Mobile|iP(hone|od)|Android|BlackBerry|IEMobile|Kindle|Silk-Accelerated|(hpw|web)OS|Opera M(obi|ini)/.test(ua)) {
                    return MOBILE_NAME;
                }

                return DESKTOP_NAME;
            }
            function mapRequestSizes(adRequestSizes) {
                if (adRequestSizes.length == 2 && typeof adRequestSizes[0] === "number" && typeof adRequestSizes[1] === "number") {
                    return ["".concat(adRequestSizes[0], "x").concat(adRequestSizes[1])];
                }

                return adRequestSizes.map(function (item) {
                    if (typeof item === "string") {
                        return item;
                    }

                    if (Array.isArray(item) && item.length == 2) {
                        return "".concat(item[0], "x").concat(item[1]);
                    }
                });
            }
            function shuffleArray(array) {
                var currentIndex = array.length,
                    randomIndex; // While there remain elements to shuffle...

                while (currentIndex != 0) {
                    // Pick a remaining element...
                    randomIndex = Math.floor(Math.random() * currentIndex);
                    currentIndex--; // And swap it with the current element.

                    var _ref = [array[randomIndex], array[currentIndex]];
                    array[currentIndex] = _ref[0];
                    array[randomIndex] = _ref[1];
                }

                return array;
            }
            function processDfpAdUnit(dfpAdUnit) {
                // 2 case:
                // 1. "/123/fregame.com" => ["/123/fregame.com"]
                // 2. "/123,456/fregame.com" => ["123", "/123,456/fregame.com"];
                if (!dfpAdUnit || dfpAdUnit == "") return null;

                try {
                    if (dfpAdUnit.indexOf(",") != -1) {
                        var adUnitTemp = dfpAdUnit.split(",");
                        return {
                            gamID: adUnitTemp[0].replace("/", "").trim(),
                            dfpAdUnit: dfpAdUnit
                        };
                    } else {
                        var _adUnitTemp = dfpAdUnit.split("/");

                        return {
                            gamID: _adUnitTemp[1].trim(),
                            dfpAdUnit: dfpAdUnit
                        };
                    }
                } catch (e) {
                    vilog(e);
                    return null;
                }
            }
            function processRealCpm(realCPM, dfpAdUnitObj) {
                try {
                    if (!realCPM || realCPM == "") return [0, 1];
                    var currencyDefault = "USD";
                    var granularityMultiplier = 1;

                    if (Configs.gam && dfpAdUnitObj.gamID) {
                        var gam = Configs.gam[dfpAdUnitObj.gamID] ? Configs.gam[dfpAdUnitObj.gamID] : null;

                        if (gam && gam.currency != currencyDefault) {
                            granularityMultiplier = gam.granularityMultiplier;
                            var currencyRate = Configs.currencyRate[currencyDefault] && Configs.currencyRate[currencyDefault][gam.currency] ? Configs.currencyRate[currencyDefault][gam.currency] : 1;
                            realCPM *= currencyRate;
                        }
                    }

                    return [realCPM, granularityMultiplier];
                } catch (e) {
                    vilog(e);
                    return [realCPM, 1];
                }
            }
            function processFloorBid(adsTag, config) {
                if (!adsTag || !config && !config.floorTest && !config.abTestFloor) return null;

                var convertStrToArray = function convertStrToArray(str) {
                    if (!str || str == "") return [];

                    try {
                        var arr = str.split(",");
                        return arr.map(function (item) {
                            return parseFloat(item);
                        });
                    } catch (e) {
                        vilog("Err: " + e);
                    }
                };

                try {
                    // Server config
                    var floorTestArray = config.floorTest;
                    if (floorTestArray) floorTestArray.sort(function (a, b) {
                        return a - b;
                    });
                    var abTestFloorArray = config.abTestFloor ? config.abTestFloor : null; // abTestFloor: [staticFloor, dynamicFloor]
                    // Cookie Variables

                    var cookieDay = 90;
                    var cookieAdsTag = "curFloorTest_" + adsTag;
                    var cookieFloorTest = "floorTestArray_" + adsTag;
                    var cookieAbTestFloorType = "floorType_" + adsTag;
                    var floorPrice = 0;
                    var floorType = getCookie(cookieAbTestFloorType);
                    return {
                        getFloor: function getFloor() {
                            if (abTestFloorArray) {
                                if (floorType == "") {
                                    var newArray = shuffleArray(["static", "dynamic"]);
                                    floorType = newArray[0];
                                } else {
                                    floorType = floorType == "static" ? "dynamic" : "static";
                                }

                                setCookie(cookieAbTestFloorType, floorType, cookieDay);
                                floorPrice = floorType == "static" ? abTestFloorArray[0] : abTestFloorArray[1];
                            } else if (config.floorTest) {
                                floorType = "test"; // Check floorPriceArray is new or not

                                var floorTestCookie = convertStrToArray(getCookie(cookieFloorTest));
                                var isNewFloorPriceArray = false;

                                if (!floorTestCookie || floorTestCookie == "" || floorTestCookie.length != floorTestArray.length) {
                                    isNewFloorPriceArray = true;
                                } else {
                                    for (var i = 0; i < floorTestArray.length; i++) {
                                        if (floorTestArray[i] != floorTestCookie[i]) {
                                            isNewFloorPriceArray = true;
                                            break;
                                        }
                                    }
                                } // Process Floor Price Test


                                if (isNewFloorPriceArray) {
                                    setCookie(cookieFloorTest, floorTestArray, cookieDay);

                                    var _newArray = shuffleArray(floorTestArray);

                                    floorPrice = parseFloat(_newArray[0]);
                                    setCookie(cookieAdsTag, floorPrice, cookieDay);
                                } else {
                                    var curFloorTestCookie = getCookie(cookieAdsTag);
                                    floorPrice = !curFloorTestCookie || curFloorTestCookie == "" ? floorTestCookie[0] : parseFloat(curFloorTestCookie);

                                    for (var _i = 0; _i < floorTestCookie.length; _i++) {
                                        var price = floorTestCookie[_i];

                                        if (floorPrice == price) {
                                            var curIndex = _i + 1 >= floorTestCookie.length ? 0 : _i + 1;
                                            floorPrice = floorTestCookie[curIndex];
                                            setCookie(cookieAdsTag, floorPrice, cookieDay);
                                            break;
                                        }
                                    }
                                }
                            }

                            return [floorPrice, floorType]; // floorType: dynamic, static, test
                        }
                    };
                } catch (e) {
                    vilog("Err: " + e);
                    return null;
                }
            }
            function isCheckElementVisible(element) {
                if (!element) {
                    return false;
                }

                var displayElem = element.style.display;
                var visibilityElem = element.style.visibility;
                var opacityElem = element.style.opacity;

                if (displayElem === "none") {
                    return false;
                }

                if (opacityElem === "0") {
                    return false;
                }

                if (visibilityElem === "hidden") {
                    return false;
                }

                return true;
            }
            function getBannerAdUnit(adSlot) {
                if (!adSlot) {
                    return false;
                }

                if (adSlot.adunitBanner && adSlot.adunitBanner.bids && adSlot.adunitBanner.bids.length > 0) {
                    return adSlot.adunitBanner;
                }

                return false;
            }
            function getRealBidderCode(bidderCode) {
                return bidderCode.replace('pp_', '').replace('_s2s', '');
            }
            function getFloorTest(floorTest, adUnitCode) {
                try {
                    if (floorTest[adUnitCode]) {
                        return [floorTest[adUnitCode].floor, floorTest[adUnitCode].id];
                    }
                } catch (e) {}

                return [0, 0];
            }
            function getDynamicFloor(dynamicFloor, adUnitCode) {
                try {
                    if (typeof dynamicFloor === "number") {
                        return dynamicFloor;
                    }

                    return dynamicFloor[adUnitCode];
                } catch (e) {
                    return 0;
                }
            }
            function setTargetingPPUrl() {
                // fix riêng cho site 
                if (Configs.domainID != "11520") {
                    return false;
                }

                if (window.location.pathname != "/central-new-jersey/playa-bowls-belmar-beach-cam/") {
                    return false;
                }

                return true;
            }
            function pushLogErrorSystemJS(message, data) {
                if (!message || !data || isObjEmpty(data)) {
                    return;
                }

                helper_Log.error(message, data);
                return true;
            }
            function getBidsForAdSize(_size, bids) {
                if (typeof _size == "undefined" || _size.length == 0) {
                    return [];
                }

                if (typeof bids == "undefined" || bids.length == 0 || !bids) {
                    return [];
                }

                var szj = _size.join("_");

                return bids[szj];
            }
            function sortedArray(_array) {
                if (_array.length == 0 || typeof _array == "undefined") {
                    return [];
                }

                var sortedArray = _array.sort(function (a, b) {
                    if (a[0] == b[0]) {
                        return b[1] - a[1]; // z-> a
                    }

                    return b[0] - a[0];
                });

                return sortedArray;
            }
            function increaseBottomVideoFloating(data) {
                try {
                    if (!data) {
                        return;
                    }

                    if (!Configs.videoAdClass) {
                        return;
                    }

                    for (var _i2 = 0, _Object$entries = Object.entries(Configs.videoAdClass); _i2 < _Object$entries.length; _i2++) {
                        var _Object$entries$_i = slicedToArray_default()(_Object$entries[_i2], 2),
                            key = _Object$entries$_i[0],
                            item = _Object$entries$_i[1];

                        item.increaseDistanceBottomFloating(data);
                    }
                } catch (error) {}
            }
            function reductionBottomVideoFloating() {
                try {
                    if (!Configs.videoAdClass) {
                        return;
                    }

                    for (var _i3 = 0, _Object$entries2 = Object.entries(Configs.videoAdClass); _i3 < _Object$entries2.length; _i3++) {
                        var _Object$entries2$_i = slicedToArray_default()(_Object$entries2[_i3], 2),
                            key = _Object$entries2$_i[0],
                            item = _Object$entries2$_i[1];

                        item.reductionDistanceBottomFloating();
                    }
                } catch (error) {}
            }
// CONCATENATED MODULE: ./src/settings/go-settings.js
// import Settings from "./setting-supersmash";
// import Settings from "./setting-supersmash-vli";
            var Settings = "--{{.DataObj}}--";
            /* harmony default export */ var go_settings = (Settings);
// EXTERNAL MODULE: ./src/settings/amazon-cpm.json
            var amazon_cpm = __webpack_require__(38);

// CONCATENATED MODULE: ./src/plugins/Configs.js





            window["_APDOBJ"] = window["_APDOBJ"] || {};
            window["_APDOBJ"].dID = go_settings.domainID;
            var Configs_configs = {};

            try {
                var _configs;

                Configs_configs = (_configs = {
                    runWithPP: window["_APDOBJ"] && window["_APDOBJ"].rwpub == true ? true : false,
                    rootDomain: go_settings.rootDomain != null ? go_settings.rootDomain : "",
                    reportURL: go_settings.reportURL != null ? "//".concat(go_settings.reportURL) : "",
                    staticDomain: go_settings.tagDomain != null ? go_settings.tagDomain : "",
                    pbjsDomain: go_settings.tagDomain != null ? go_settings.tagDomain : "",
                    adClass: go_settings.adClass != null ? go_settings.adClass : "",
                    brandName: go_settings.brandName != null ? go_settings.brandName : "",
                    brandHomepage: go_settings.brandHomepage != null ? go_settings.brandHomepage : "",
                    tagName: go_settings.tagName != null ? go_settings.tagName : "",
                    tagApi: go_settings.tagApi != null ? go_settings.tagApi : "",
                    tagElement: go_settings.tagElement != null ? go_settings.tagElement : "",
                    currencyURL: go_settings.currencyURL != null ? "//".concat(go_settings.currencyURL) : "",
                    adpPbTest: go_settings.adpPbTest != null ? go_settings.adpPbTest : "",
                    pixelID: "vi_pixel_8383",
                    analyticIframeId: "vi_track_8383",
                    configAssigned: false,
                    totalLoad: 1,
                    inLoading: 0,
                    uId: go_settings.uId && go_settings.uId != "" ? go_settings.uId : false,
                    safeFrame: go_settings.safeFrame == "on" ? "on" : "off",
                    hidedebugClg: typeof_default()(go_settings.hidedebugClg) && go_settings.hidedebugClg == "on" ? "on" : "off",
                    reloadMode: go_settings.reloadMode != "" ? go_settings.reloadMode : "signal",
                    pbRender: go_settings.pbRender != "" ? go_settings.pbRender : "iframe",
                    adloadType: go_settings.adloadType != "" ? go_settings.adloadType : "lazy_load",
                    bannerRefreshTime: go_settings.adRefreshTime != 0 ? go_settings.adRefreshTime > 30 ? go_settings.adRefreshTime : 60 : 0,
                    // in seconds
                    bannerRefreshTimeInViewPort: go_settings.inViewRefresh && go_settings.inViewRefresh > 15000 ? go_settings.inViewRefresh / 1000 : 30,
                    // in seconds
                    displayAdID: [],
                    slotIdRegisterEvent: [],
                    // slotId banner đã được add sự kiện slotRenderEnded
                    isVisible: null,
                    creativeIdVideoTest: "video-preview",
                    creativeIdBannerTest: "banner-preview",
                    DebugParam: getUrlParam("pw_debug").toUpperCase() === "TRUE" ? true : false,
                    VIdebug: true,
                    biddingTest: getUrlParam("bidtest").toUpperCase() === "TRUE" || navigator.cookieEnabled && typeof Storage !== "undefined" && sessionStorage.getItem('bidtest') === "true" ? "on" : "off",
                    EUCountry: "NO DE BE PT BG DK LT LU HR LV FR HU SE MC SI SK MF SM GB YT IE GF EE MQ MT GP IS IT GR ES AT RE CY CZ AX PL LI RO NL",
                    analyticsID: go_settings.gaId,
                    domainName: typeof go_settings.domainName === "string" ? go_settings.domainName : "",
                    VIGeo: window["_APDOBJ"].geo ? window["_APDOBJ"].geo.toUpperCase() : false,
                    IPBlocked: window["_APDOBJ"].vinasat || "132kd",
                    // Block IP 132kd is false || other true
                    GeoState: window["_APDOBJ"].state || [],
                    noneSafeFrameBidder: ["consumable", "audienceNetwork", "brightcom", "amazon"],
                    clientTracking: {
                        userActive: false,
                        focusPage: false,
                        isVisible: false
                    },
                    customGeo: [],
                    demandTest: false,
                    GEOLocation: null,
                    listAmazonBidder: ["amazon"],
                    userSyncConfig: {
                        filterSettings: {
                            iframe: {
                                bidders: '*',
                                // '*' represents all bidders
                                filter: 'include'
                            }
                        },
                        aliasSyncEnabled: true,
                        //enable user sync for valueimpression adapter (alias of quantumdex adapter)
                        syncsPerBidder: 0,
                        syncDelay: go_settings.userIds && go_settings.userIds.configs ? go_settings.userIds.configs.syncDelay : 3000,
                        auctionDelay: go_settings.userIds && go_settings.userIds.configs ? go_settings.userIds.configs.auctionDelay : 0,
                        userIds: go_settings.userIds && go_settings.userIds.modules ? go_settings.userIds.modules : null
                    },
                    //Chi tiết mức giá cho đơn hàng DFP
                    bannerPriceGranularity: {
                        "buckets": [{
                            "precision": 2,
                            "min": 0,
                            "max": 22.50,
                            "increment": .01
                        }]
                    },
                    videoPriceGranularity: {
                        buckets: [{
                            precision: 2,
                            min: 0,
                            max: .1,
                            increment: .01
                        }, {
                            precision: 2,
                            min: .1,
                            max: 10,
                            increment: .05
                        }, {
                            precision: 2,
                            min: 10,
                            max: 15,
                            increment: .25
                        }, {
                            precision: 2,
                            min: 15,
                            max: 30,
                            increment: .5
                        }, {
                            precision: 2,
                            min: 30,
                            max: 40,
                            increment: 1
                        }, {
                            precision: 2,
                            min: 40,
                            max: 110,
                            increment: 5
                        }]
                    },
                    blockAdDomains: go_settings.blockAdDomains && Array.isArray(go_settings.blockAdDomains) ? go_settings.blockAdDomains : [],
                    aliasBidders: go_settings.aliasBidders && typeof_default()(go_settings.aliasBidders) === "object" ? go_settings.aliasBidders : {},
                    schainConfig: go_settings.schainConfig && typeof_default()(go_settings.schainConfig) === "object" ? go_settings.schainConfig : {},
                    amazonCpm: go_settings.amazonCpm && typeof_default()(go_settings.amazonCpm) === "object" ? go_settings.amazonCpm : {},
                    s2sBidders: go_settings.s2sBidders && Array.isArray(go_settings.s2sBidders) ? go_settings.s2sBidders : [],
                    device: utlis_mobileDetect() ? "mobile" : "pc",
                    newPixelEnabled: go_settings.enableNewPixel && go_settings.enableNewPixel == "on" ? true : false,
                    UAMPubId: go_settings.UAMPubId && go_settings.UAMPubId != "" ? go_settings.UAMPubId : false,
                    currency: go_settings.currency && go_settings.currency != "" ? go_settings.currency : null,
                    granularityMultiplier: go_settings.granularityMultiplier && !isNaN(go_settings.granularityMultiplier) == true ? go_settings.granularityMultiplier : null,
                    creativeIds: go_settings.creativeIds && Array.isArray(go_settings.creativeIds) ? go_settings.creativeIds : []
                }, defineProperty_default()(_configs, "pbRender", go_settings.pbRender ? go_settings.pbRender : "iframe"), defineProperty_default()(_configs, "gam", go_settings.gam ? go_settings.gam : null), defineProperty_default()(_configs, "cacheTime", go_settings.cacheTime && typeof go_settings.cacheTime === "number" ? go_settings.cacheTime : ""), _configs); // configs = Object.assign({}, configs, Settings);

                Configs_configs.isUserInEU = Configs_configs.EUCountry.split(" ").indexOf(Configs_configs.VIGeo) !== -1 ? true : false;
                Configs_configs.isUserInUSCA = Configs_configs.VIGeo && Configs_configs.VIGeo === "US" && Configs_configs.GeoState.indexOf("CA") !== -1 ? true : false;
                Configs_configs.brandLogo = "//" + Configs_configs.staticDomain + "/assets/pubpower-black-100x18.png";
                Configs_configs.brandLogoWhite = "//" + Configs_configs.staticDomain + "/assets/pubpower-white-100x18.png";
                Configs_configs.brandLogoBlack = "//" + Configs_configs.staticDomain + "/assets/pubpower-black-100x18.png";
                Configs_configs.caPub = go_settings.caPub;
                Configs_configs.domainID = go_settings.domainID;
                Configs_configs.prebidJs = go_settings.prebidJs;
                Configs_configs.useBidFilter = go_settings.useBidFilter;
                Configs_configs.prebidTimeout = go_settings.prebidTimeout && go_settings.prebidTimeout >= 500 ? go_settings.prebidTimeout : 500;
                Configs_configs.adRefreshTime = typeof go_settings.adRefreshTime === "number" ? go_settings.adRefreshTime : 0; // in seconds

                Configs_configs.bidAdjustment = go_settings.bidAdjustment;
                Configs_configs.CMP = go_settings.CMP ? go_settings.CMP : null;
                Configs_configs.enableGDPR = Configs_configs.CMP && Configs_configs.CMP.GDPR && Configs_configs.isUserInEU ? true : false;
                Configs_configs.enableCCPA = Configs_configs.CMP && Configs_configs.CMP.CCPA && Configs_configs.isUserInUSCA ? true : false;
                Configs_configs.dataCMP = {};
                Configs_configs.geoRequireCMP = Configs_configs.isUserInEU || Configs_configs.isUserInUSCA ? true : false; // Add blockCreatives for heavy ads

                Configs_configs.dataBidWin = {}; // data bid win banner set report ads and icon display

                Configs_configs.blockCreatives = go_settings.blockCreatives && Array.isArray(go_settings.blockCreatives) ? go_settings.blockCreatives : [];
                var arrBlock = Object.keys(JSON.parse(getCookie("__viCrBlock") ? getCookie("__viCrBlock") : "{}")).map(function (key) {
                    return JSON.parse(getCookie("__viCrBlock") ? getCookie("__viCrBlock") : "{}")[key];
                });

                if (arrBlock.length > 0) {
                    for (var Configs_i = 0; Configs_i < arrBlock.length; Configs_i++) {
                        if (!Configs_configs.blockCreatives.includes(arrBlock[Configs_i])) {
                            Configs_configs.blockCreatives.push(arrBlock[Configs_i]);
                        }
                    }
                }

                Configs_configs.adminAmazon = false;

                if (Configs_configs.UAMPubId && Configs_configs.UAMPubId == "9cf0c4f1-7630-476b-9141-f4472e005192") {
                    // site sử dụng bidder amazon admin
                    Configs_configs.adminAmazon = true;
                    Configs_configs.amazonCpm = amazon_cpm;
                }

                if (Configs_configs.adpPbTest) {
                    // site sử dụng bidder amazon admin
                    window["_PBCFG"] = Configs_configs.adpPbTest;
                } // 


                Configs_configs.videoAdClass = {}; // blockByRpm

                Configs_configs.blockByRpm = go_settings.blockByRpm && typeof_default()(go_settings.blockByRpm) === "object" ? go_settings.blockByRpm : null; // Is request DFP

                Configs_configs.gbk = undefined && undefined === "dev" ? false : true; // default is true => not request DFP else false => request DFP
                // Setup adstag

                Configs_configs.adsTags = go_settings.adsTags;
                Configs_configs.renderPlayerMode = "root";
                Configs_configs.LAZYLOAD_CONFIG = {
                    mobileScaling: go_settings.mobileScaling && !isNaN(go_settings.mobileScaling) == true ? parseFloat(go_settings.mobileScaling) : 2.0,
                    fetchMarginPercent: go_settings.fetchMarginPercent && !isNaN(go_settings.fetchMarginPercent) == true ? go_settings.fetchMarginPercent : 500,
                    renderMarginPercent: go_settings.renderMarginPercent && !isNaN(go_settings.renderMarginPercent) == true ? go_settings.renderMarginPercent : 200
                }; // Check View Status

                Configs_configs.IN_VIEW_PORT = "inViewPort";
                Configs_configs.OUT_VIEW_PORT = "outViewPort";
                Configs_configs.IN_TAB = "inTab";
                Configs_configs.OUT_TAB = "outTab";
                Configs_configs.WINDOW_IS_FOCUS = "windowFocus";
                Configs_configs.WINDOW_IS_BLUR = "windowBlur";
                Configs_configs.timeoutS2SConfig = Configs_configs.prebidTimeout - 300;

                if (Configs_configs.prebidTimeout <= 500) {
                    Configs_configs.timeoutS2SConfig = Configs_configs.prebidTimeout - 100;
                }

                if (Configs_configs.prebidTimeout <= 1000 && Configs_configs.prebidTimeout > 500) {
                    Configs_configs.timeoutS2SConfig = Configs_configs.prebidTimeout - 200;
                }

                var _date = new Date();

                Configs_configs.currentDate = _date.getUTCFullYear() + "" + (_date.getUTCMonth() + 1) + "" + _date.getUTCDate();
                Configs_configs.currencyRate = {}; // Get Currency
                // getCurrencyJSON();

                if (Configs_configs.hidedebugClg == "on") {
                    console.error = function () {};

                    console.warn = function () {};

                    window.onerror = function () {
                        return true;
                    };
                }
            } catch (e) {
                captureException(e, "[Configs - init]");
            }

            function getCurrencyJSON() {
                var maxTime = 3; // max time (10request/time)

                var curTime = 0;
                var curRequest = 0;
                var delay = 10000; // delay time (10ms)

                var getData = function getData() {
                    if (curRequest >= 10) {
                        curTime++;
                        curRequest = 0;
                        setTimeout(function () {
                            return getData();
                        }, delay);
                        return;
                    }

                    if (curTime >= maxTime) {
                        console.log("[Configs - getCurrencyJSON] max time request.");
                        return;
                    }

                    curRequest++;

                    try {
                        var currencyURL = "".concat(Configs_configs.currencyURL, "?date=").concat(Configs_configs.currentDate, "&host=").concat(window.location.host);
                        var xhr = new XMLHttpRequest();

                        xhr.onreadystatechange = function () {
                            if (xhr.readyState === 4) {
                                if (xhr.status === 200) {
                                    var response = JSON.parse(xhr.response);

                                    if (response) {
                                        Configs_configs.currencyRate = response.conversions;
                                    } else {
                                        getData();
                                    }
                                } else {
                                    getData();
                                }
                            }
                        };

                        xhr.open("GET", currencyURL, true);
                        xhr.timeout = 2000;

                        xhr.ontimeout = function () {
                            getData();
                        };

                        xhr.send();
                    } catch (e) {
                        getData();
                        console.log("Err: " + e);
                    }
                };

                getData();
            }

            /* harmony default export */ var Configs = (Configs_configs);
// CONCATENATED MODULE: ./src/plugins/helper/viewport-detect.js
            var viewportDetectInit = function viewportDetectInit() {
                var addObserveApi = function addObserveApi() {
                    if (typeof window.IntersectionObserver === 'function') return;

                    (function (i, l) {
                        if ("IntersectionObserver" in i && "IntersectionObserverEntry" in i && "intersectionRatio" in i.IntersectionObserverEntry.prototype) {
                            if (!("isIntersecting" in i.IntersectionObserverEntry.prototype)) {
                                Object.defineProperty(i.IntersectionObserverEntry.prototype, "isIntersecting", {
                                    get: function get() {
                                        return this.intersectionRatio > 0;
                                    }
                                });
                            }

                            return;
                        }

                        var b = [];

                        function e(q) {
                            this.time = q.time;
                            this.target = q.target;
                            this.rootBounds = q.rootBounds;
                            this.boundingClientRect = q.boundingClientRect;
                            this.intersectionRect = q.intersectionRect || j();
                            this.isIntersecting = !!q.intersectionRect;
                            var s = this.boundingClientRect;
                            var r = s.width * s.height;
                            var p = this.intersectionRect;
                            var o = p.width * p.height;

                            if (r) {
                                this.intersectionRatio = Number((o / r).toFixed(4));
                            } else {
                                this.intersectionRatio = this.isIntersecting ? 1 : 0;
                            }
                        }

                        function a(q, p) {
                            var o = p || {};

                            if (typeof q != "function") {
                                throw new Error("callback must be a function");
                            }

                            if (o.root && o.root.nodeType != 1) {
                                throw new Error("root must be an Element");
                            }

                            this._checkForIntersections = m(this._checkForIntersections.bind(this), this.THROTTLE_TIMEOUT);
                            this._callback = q;
                            this._observationTargets = [];
                            this._queuedEntries = [];
                            this._rootMarginValues = this._parseRootMargin(o.rootMargin);
                            this.thresholds = this._initThresholds(o.threshold);
                            this.root = o.root || null;
                            this.rootMargin = this._rootMarginValues.map(function (r) {
                                return r.value + r.unit;
                            }).join(" ");
                        }

                        a.prototype.THROTTLE_TIMEOUT = 100;
                        a.prototype.POLL_INTERVAL = null;
                        a.prototype.USE_MUTATION_OBSERVER = true;

                        a.prototype.observe = function (p) {
                            var o = this._observationTargets.some(function (q) {
                                return q.element == p;
                            });

                            if (o) {
                                return;
                            }

                            if (!(p && p.nodeType == 1)) {
                                throw new Error("target must be an Element");
                            }

                            this._registerInstance();

                            this._observationTargets.push({
                                element: p,
                                entry: null
                            });

                            this._monitorIntersections();

                            this._checkForIntersections();
                        };

                        a.prototype.unobserve = function (o) {
                            this._observationTargets = this._observationTargets.filter(function (p) {
                                return p.element != o;
                            });

                            if (!this._observationTargets.length) {
                                this._unmonitorIntersections();

                                this._unregisterInstance();
                            }
                        };

                        a.prototype.disconnect = function () {
                            this._observationTargets = [];

                            this._unmonitorIntersections();

                            this._unregisterInstance();
                        };

                        a.prototype.takeRecords = function () {
                            var o = this._queuedEntries.slice();

                            this._queuedEntries = [];
                            return o;
                        };

                        a.prototype._initThresholds = function (p) {
                            var o = p || [0];

                            if (!Array.isArray(o)) {
                                o = [o];
                            }

                            return o.sort().filter(function (s, r, q) {
                                if (typeof s != "number" || isNaN(s) || s < 0 || s > 1) {
                                    throw new Error("threshold must be a number between 0 and 1 inclusively");
                                }

                                return s !== q[r - 1];
                            });
                        };

                        a.prototype._parseRootMargin = function (o) {
                            var p = o || "0px";
                            var q = p.split(/\s+/).map(function (r) {
                                var s = /^(-?\d*\.?\d+)(px|%)$/.exec(r);

                                if (!s) {
                                    throw new Error("rootMargin must be specified in pixels or percent");
                                }

                                return {
                                    value: parseFloat(s[1]),
                                    unit: s[2]
                                };
                            });
                            q[1] = q[1] || q[0];
                            q[2] = q[2] || q[0];
                            q[3] = q[3] || q[1];
                            return q;
                        };

                        a.prototype._monitorIntersections = function () {
                            if (!this._monitoringIntersections) {
                                this._monitoringIntersections = true;

                                if (this.POLL_INTERVAL) {
                                    this._monitoringInterval = setInterval(this._checkForIntersections, this.POLL_INTERVAL);
                                } else {
                                    f(i, "resize", this._checkForIntersections, true);
                                    f(l, "scroll", this._checkForIntersections, true);

                                    if (this.USE_MUTATION_OBSERVER && "MutationObserver" in i) {
                                        this._domObserver = new MutationObserver(this._checkForIntersections);

                                        this._domObserver.observe(l, {
                                            attributes: true,
                                            childList: true,
                                            characterData: true,
                                            subtree: true
                                        });
                                    }
                                }
                            }
                        };

                        a.prototype._unmonitorIntersections = function () {
                            if (this._monitoringIntersections) {
                                this._monitoringIntersections = false;
                                clearInterval(this._monitoringInterval);
                                this._monitoringInterval = null;
                                k(i, "resize", this._checkForIntersections, true);
                                k(l, "scroll", this._checkForIntersections, true);

                                if (this._domObserver) {
                                    this._domObserver.disconnect();

                                    this._domObserver = null;
                                }
                            }
                        };

                        a.prototype._checkForIntersections = function () {
                            var p = this._rootIsInDom();

                            var o = p ? this._getRootRect() : j();

                            this._observationTargets.forEach(function (t) {
                                var w = t.element;
                                var v = d(w);

                                var r = this._rootContainsTarget(w);

                                var s = t.entry;

                                var q = p && r && this._computeTargetAndRootIntersection(w, o);

                                var u = t.entry = new e({
                                    time: c(),
                                    target: w,
                                    boundingClientRect: v,
                                    rootBounds: o,
                                    intersectionRect: q
                                });

                                if (!s) {
                                    this._queuedEntries.push(u);
                                } else {
                                    if (p && r) {
                                        if (this._hasCrossedThreshold(s, u)) {
                                            this._queuedEntries.push(u);
                                        }
                                    } else {
                                        if (s && s.isIntersecting) {
                                            this._queuedEntries.push(u);
                                        }
                                    }
                                }
                            }, this);

                            if (this._queuedEntries.length) {
                                this._callback(this.takeRecords(), this);
                            }
                        };

                        a.prototype._computeTargetAndRootIntersection = function (v, q) {
                            if (i.getComputedStyle(v).display == "none") {
                                return;
                            }

                            var u = d(v);
                            var p = u;
                            var s = n(v);
                            var r = false;

                            while (!r) {
                                var o = null;
                                var t = s.nodeType == 1 ? i.getComputedStyle(s) : {};

                                if (t.display == "none") {
                                    return;
                                }

                                if (s == this.root || s == l) {
                                    r = true;
                                    o = q;
                                } else {
                                    if (s != l.body && s != l.documentElement && t.overflow != "visible") {
                                        o = d(s);
                                    }
                                }

                                if (o) {
                                    p = g(o, p);

                                    if (!p) {
                                        break;
                                    }
                                }

                                s = n(s);
                            }

                            return p;
                        };

                        a.prototype._getRootRect = function () {
                            var p;

                            if (this.root) {
                                p = d(this.root);
                            } else {
                                var q = l.documentElement;
                                var o = l.body;
                                p = {
                                    top: 0,
                                    left: 0,
                                    right: q.clientWidth || o.clientWidth,
                                    width: q.clientWidth || o.clientWidth,
                                    bottom: q.clientHeight || o.clientHeight,
                                    height: q.clientHeight || o.clientHeight
                                };
                            }

                            return this._expandRectByRootMargin(p);
                        };

                        a.prototype._expandRectByRootMargin = function (p) {
                            var q = this._rootMarginValues.map(function (s, r) {
                                return s.unit == "px" ? s.value : s.value * (r % 2 ? p.width : p.height) / 100;
                            });

                            var o = {
                                top: p.top - q[0],
                                right: p.right + q[1],
                                bottom: p.bottom + q[2],
                                left: p.left - q[3]
                            };
                            o.width = o.right - o.left;
                            o.height = o.bottom - o.top;
                            return o;
                        };

                        a.prototype._hasCrossedThreshold = function (q, t) {
                            var p = q && q.isIntersecting ? q.intersectionRatio || 0 : -1;
                            var s = t.isIntersecting ? t.intersectionRatio || 0 : -1;

                            if (p === s) {
                                return;
                            }

                            for (var r = 0; r < this.thresholds.length; r++) {
                                var o = this.thresholds[r];

                                if (o == p || o == s || o < p !== o < s) {
                                    return true;
                                }
                            }
                        };

                        a.prototype._rootIsInDom = function () {
                            return !this.root || h(l, this.root);
                        };

                        a.prototype._rootContainsTarget = function (o) {
                            return h(this.root || l, o);
                        };

                        a.prototype._registerInstance = function () {
                            if (b.indexOf(this) < 0) {
                                b.push(this);
                            }
                        };

                        a.prototype._unregisterInstance = function () {
                            var o = b.indexOf(this);

                            if (o != -1) {
                                b.splice(o, 1);
                            }
                        };

                        function c() {
                            return i.performance && performance.now && performance.now();
                        }

                        function m(o, p) {
                            var q = null;
                            return function () {
                                if (!q) {
                                    q = setTimeout(function () {
                                        o();
                                        q = null;
                                    }, p);
                                }
                            };
                        }

                        function f(q, p, o, r) {
                            if (typeof q.addEventListener == "function") {
                                q.addEventListener(p, o, r || false);
                            } else {
                                if (typeof q.attachEvent == "function") {
                                    q.attachEvent("on" + p, o);
                                }
                            }
                        }

                        function k(q, p, o, r) {
                            if (typeof q.removeEventListener == "function") {
                                q.removeEventListener(p, o, r || false);
                            } else {
                                if (typeof q.detatchEvent == "function") {
                                    q.detatchEvent("on" + p, o);
                                }
                            }
                        }

                        function g(r, p) {
                            var v = Math.max(r.top, p.top);
                            var q = Math.min(r.bottom, p.bottom);
                            var u = Math.max(r.left, p.left);
                            var s = Math.min(r.right, p.right);
                            var t = s - u;
                            var o = q - v;
                            return t >= 0 && o >= 0 && {
                                top: v,
                                bottom: q,
                                left: u,
                                right: s,
                                width: t,
                                height: o
                            };
                        }

                        function d(o) {
                            var q;

                            try {
                                q = o.getBoundingClientRect();
                            } catch (p) {}

                            if (!q) {
                                return j();
                            }

                            if (!(q.width && q.height)) {
                                q = {
                                    top: q.top,
                                    right: q.right,
                                    bottom: q.bottom,
                                    left: q.left,
                                    width: q.right - q.left,
                                    height: q.bottom - q.top
                                };
                            }

                            return q;
                        }

                        function j() {
                            return {
                                top: 0,
                                bottom: 0,
                                left: 0,
                                right: 0,
                                width: 0,
                                height: 0
                            };
                        }

                        function h(o, q) {
                            var p = q;

                            while (p) {
                                if (p == o) {
                                    return true;
                                }

                                p = n(p);
                            }

                            return false;
                        }

                        function n(p) {
                            var o = p.parentNode;

                            if (o && o.nodeType == 11 && o.host) {
                                return o.host;
                            }

                            if (o && o.assignedSlot) {
                                return o.assignedSlot.parentNode;
                            }

                            return o;
                        }

                        i.IntersectionObserver = a;
                        i.IntersectionObserverEntry = e;
                    })(window, document);
                };

                addObserveApi();
                if (typeof window.observeElementInViewport !== 'undefined') return;
                var defaultOptions = {
                    viewport: null,
                    modTop: '0px',
                    modRight: '0px',
                    modBottom: '0px',
                    modLeft: '0px',
                    threshold: [0]
                };

                function observeElementInViewport(el, inHandler, outHandler, opts) {
                    if (!el) {
                        throw new Error('Target element to observe should be a valid DOM Node');
                    }

                    opts = Object.assign({}, defaultOptions, opts);
                    var const_viewport = typeof opts.viewport !== "undefined" ? opts.viewport : defaultOptions.viewport;
                    var const_modTop = typeof opts.modTop !== "undefined" ? opts.modTop : defaultOptions.modTop;
                    var const_modRight = typeof opts.modRight !== "undefined" ? opts.modRight : defaultOptions.modRight;
                    var const_modBottom = typeof opts.modBottom !== "undefined" ? opts.modBottom : defaultOptions.modBottom;
                    var const_modLeft = typeof opts.modLeft !== "undefined" ? opts.modLeft : defaultOptions.modLeft;
                    var const_threshold = typeof opts.threshold !== "undefined" ? opts.threshold : defaultOptions.threshold;

                    if (!Array.isArray(const_threshold) && !(typeof const_threshold === 'number')) {
                        throw new Error('threshold should be a number or an array of numbers');
                    }

                    var thresholdArray = Array.isArray(const_threshold) ? const_threshold.map(mod101) : [Math.floor(const_threshold ? const_threshold % 101 : 0) / 100];

                    function mod101(val) {
                        return Math.floor(val % 101) / 100;
                    }

                    var minThreshold = Math.min(Math.min.apply(null, thresholdArray));
                    var intersectionObserverOptions = {
                        root: const_viewport instanceof Node ? const_viewport : null,
                        rootMargin: const_modTop + ' ' + const_modRight + ' ' + const_modBottom + ' ' + const_modLeft,
                        threshold: thresholdArray
                    };

                    var cb = function cb(entries, observer) {
                        var entryForEl = entries.filter(entry_target)[0];

                        function entry_target(entry) {
                            return entry.target === el;
                        }

                        var unobserve = function unobserve() {
                            observer.unobserve(el);
                        };

                        if (entryForEl) {
                            var isIntersecting = entryForEl.isIntersecting;
                            var intersectionRatio = entryForEl.intersectionRatio;
                            entryForEl.isInViewport = isIntersecting && intersectionRatio >= minThreshold;

                            if (entryForEl.isInViewport) {
                                inHandler(entryForEl, unobserve, el);
                            } else {
                                outHandler(entryForEl, unobserve, el);
                            }
                        }
                    };

                    var intersectionObserver = new IntersectionObserver(cb, intersectionObserverOptions);
                    intersectionObserver.observe(el);
                    return function () {
                        intersectionObserver.unobserve(el);
                    };
                }

                var isInViewport = function isInViewport(el, opts) {
                    return new Promise(function (resolve, reject) {
                        try {
                            observeElementInViewport(el, function (_, unobserve) {
                                unobserve();
                                resolve(true);
                            }, function (_, unobserve) {
                                unobserve();
                                resolve(false);
                            }, opts);
                        } catch (e) {
                            reject(e);
                        }
                    });
                };

                window.observeElementInViewport = {};
                window.observeElementInViewport.observeElementInViewport = observeElementInViewport;
                window.observeElementInViewport.isInViewport = isInViewport;
            };


// CONCATENATED MODULE: ./src/plugins/helper/validate-user.js



            // const CURRENCY_CODE = require('../../settings/currency-code.json');

            var validate_user_ClientStorage = /*#__PURE__*/function () {
                function ClientStorage() {
                    classCallCheck_default()(this, ClientStorage);

                    this.storage = "cookie";

                    if (this.existLocalStorage()) {
                        this.storage = "localStorage";
                    }
                }

                createClass_default()(ClientStorage, [{
                    key: "setItem",
                    value: function setItem(key, value, expiredSeconds) {
                        var d = new Date();
                        var data = {
                            value: value,
                            expiredAt: d.getTime() + expiredSeconds * 1000
                        };

                        if (this.storageIsLocalStorage()) {
                            localStorage.setItem(key, JSON.stringify(data));
                        } else {
                            this.setCookie(key, JSON.stringify(data), expiredSeconds);
                        }
                    }
                }, {
                    key: "getItem",
                    value: function getItem(key) {
                        if (this.storageIsLocalStorage()) {
                            try {
                                var d = new Date();
                                var data = JSON.parse(localStorage.getItem(key));

                                if (data && data.expiredAt > d.getTime()) {
                                    return data.value;
                                }

                                localStorage.removeItem(key);
                                return false;
                            } catch (e) {
                                vilog(e);
                                return false;
                            }
                        } else {
                            try {
                                var _data = JSON.parse(getCookie(key));

                                return _data.value;
                            } catch (e) {
                                vilog(e);
                                return false;
                            }
                        }
                    }
                }, {
                    key: "storageIsLocalStorage",
                    value: function storageIsLocalStorage() {
                        if (this.storage == "localStorage") {
                            return true;
                        }

                        return false;
                    }
                }, {
                    key: "existLocalStorage",
                    value: function existLocalStorage() {
                        var mod = "test";

                        try {
                            localStorage.setItem(mod, mod);
                            localStorage.removeItem(mod);
                            return true;
                        } catch (e) {
                            return false;
                        }
                    }
                }, {
                    key: "setCookie",
                    value: function setCookie(cookieName, cookieValue, expiredSeconds) {
                        if (!expiredSeconds) {
                            expiredSeconds = 90;
                        }

                        var d = new Date();
                        d.setTime(d.getTime() + expiredSeconds * 1000);
                        var expires = "expires=" + d.toUTCString();
                        document.cookie = cookieName + "=" + cookieValue + ";" + expires + ";path=/";
                    }
                }]);

                return ClientStorage;
            }();

            var validate_user_ValidateUser = /*#__PURE__*/function () {
                function ValidateUser() {
                    classCallCheck_default()(this, ValidateUser);

                    this.ok = true;
                    this.notOk = false;
                    this.reffererBlacklist = ["mybesucher.de", "bird-mailer.de"];
                    this.ipLimit = 10;
                    this.excludeJsSourceValidate = ["tintuconline.com.vn", "2sao.vn", "vietnamnet.vn"];
                }

                createClass_default()(ValidateUser, [{
                    key: "validate",
                    value: function validate() {
                        vilog("=========MODE=========");
                        vilog(undefined);

                        if (undefined && undefined === "dev") {
                            vilog("====MODE DEV========");
                            return this.ok;
                        }

                        if (this.checkObj() === this.notOk) {
                            vilog("[User Validate] Obj invalid");
                            return this.notOk;
                        }

                        if (this.checkJsSource() === this.notOk) {
                            vilog("[User Validate] Check js source fail");
                            return this.notOk;
                        } // if (this.checkIPList() === this.notOk) {
                        //   vilog("[User Validate] check Ip fail");
                        //   return this.notOk;
                        // }


                        return this.ok;
                    }
                }, {
                    key: "checkObj",
                    value: function checkObj() {
                        if (!window["_APDOBJ"] || !window["_APDOBJ"].hasOwnProperty("geo") || !window["_APDOBJ"].hasOwnProperty("state")) {
                            saveLog({
                                type: "err_obj"
                            }, {
                                domain: Configs.domainName,
                                url: window.location.href
                            });
                            return this.notOk;
                        }

                        return this.ok;
                    }
                }, {
                    key: "checkJsSource",
                    value: function checkJsSource() {
                        var script = document.getElementsByTagName("script");
                        var counter = 0;

                        for (var i = 0; i < script.length; i++) {
                            var src = script[i].src;

                            if (src.search(Configs.rootDomain) !== -1) {
                                counter++;
                            }
                        }

                        if (counter >= 2 || this.excludeJsSourceValidate.indexOf(Configs.domainName) !== -1) {
                            return this.ok;
                        }

                        saveLog({
                            type: "err_source",
                            domain: Configs.domainName
                        }, {
                            url: window.location.href
                        });
                        return this.notOk;
                    }
                }, {
                    key: "checkIPList",
                    value: function checkIPList() {
                        var cacheKey = "__powerIPL";
                        var cacheExpire = 120 * 60;
                        var newStorage = new validate_user_ClientStorage();
                        var data = newStorage.getItem(cacheKey);
                        var cookieIpLimit = "__poweriplimit";

                        if (getCookie(cookieIpLimit) != "") {
                            return this.notOk;
                        }

                        if (!data) {
                            try {
                                newStorage.setItem(cacheKey, [window["_APDOBJ"].ip], cacheExpire);
                            } catch (e) {}

                            return this.ok;
                        }

                        if (data.indexOf(window["_APDOBJ"].ip) === -1) {
                            data.push(window["_APDOBJ"].ip);
                            newStorage.setItem(cacheKey, data, cacheExpire);
                        }

                        if (data.length >= this.ipLimit) {
                            saveLog({
                                type: "ip_err",
                                domain: Configs.domainName,
                                counter: data.length,
                                os: getMobileOperatingSystem()
                            }), {
                                ipl: data
                            };
                            setCookie(cookieIpLimit, 1, 0.5);
                            return this.notOk;
                        }

                        return this.ok;
                    }
                }], [{
                    key: "isOk",
                    value: function isOk() {
                        return true;
                    }
                }]);

                return ValidateUser;
            }();

            /* harmony default export */ var validate_user = (validate_user_ValidateUser);
// CONCATENATED MODULE: ./src/plugins/BannerManager.js






            var BannerManager_CONSTANTS = __webpack_require__(5);

            var onGoogleDfpResonseEmpty = new utlis_HandleLog();
            var onSpecialBidWin = new utlis_HandleLog();
            var onDfpRequestTimeOut = new utlis_HandleLog();
            var bidEstimateTime = 3; // seconds
// tự động chuyển sang postbid nếu request lên dfp trả về timeout quá 5 lần

            var BannerManager_BannerManager = /*#__PURE__*/function () {
                function BannerManager() {
                    classCallCheck_default()(this, BannerManager);

                    this.adSlots = {};
                    this.curBidWon = null;
                    this.curFloorObj = null; // Current floor price obj after requestbid | price, type
                }

                createClass_default()(BannerManager, [{
                    key: "addAdSlot",
                    value: function addAdSlot(adSlot) {
                        var _this = this;

                        try {
                            if (this.adSlots[adSlot.adSlotId]) {
                                vilog("[BannerManager] adSlot ".concat(adSlot.adSlotId, " added. Destroy old Event of Slot"));

                                try {
                                    if (this.adSlots[adSlot.adSlotId].workerRefresh) {
                                        clearTimeout(this.adSlots[adSlot.adSlotId].workerRefresh);
                                        this.adSlots[adSlot.adSlotId].workerRefresh = null;
                                    }

                                    if (this.adSlots[adSlot.adSlotId].timeoutDFP) {
                                        vilog("[BannerManager] adSlot ".concat(adSlot.adSlotId, " clearTimeout"));
                                        clearTimeout(this.adSlots[adSlot.adSlotId].timeoutDFP);
                                        this.adSlots[adSlot.adSlotId].timeoutDFP = null;
                                    }

                                    if (this.adSlots[adSlot.adSlotId].googleTagSlot) {
                                        googletag.destroySlots([this.adSlots[adSlot.adSlotId].googleTagSlot]);
                                        this.adSlots[adSlot.adSlotId].googleTagSlot = null;
                                    }

                                    this.adSlots[adSlot.adSlotId].biddingManager = null;
                                    this.adSlots[adSlot.adSlotId] = null;
                                    this.addAdSlot(adSlot);
                                } catch (error) {}

                                return;
                            }

                            this.eventHandle(adSlot.adSlotId);
                            var googleTagRequestSizes = JSON.parse(JSON.stringify(adSlot.requestSizes));
                            var newAdSlot = {
                                adSlotId: adSlot.adSlotId,
                                tagId: adSlot.tagId,
                                adWidth: adSlot.adWidth,
                                adHeight: adSlot.adHeight,
                                adRefreshTime: adSlot.adRefreshTime,
                                nextAdAfterViewPortTime: adSlot.nextAdAfterViewPortTime,
                                adWrapper: adSlot.adWrapper,
                                viewPortDetect: adSlot.viewPortDetect,
                                reloadMode: adSlot.reloadMode ? adSlot.reloadMode : "signal",
                                adloadType: adSlot.adloadType ? adSlot.adloadType : "lazy_load",
                                biddingManager: adSlot.bidManager,
                                dfpAdUnit: adSlot.dfpAdUnit,
                                renderMode: adSlot.dfpAdUnit != "" ? "DFP" : "POSTBID",
                                googleTagSlot: null,
                                timeoutDFP: null,
                                currentAdType: "",
                                adInViewPortTime: 0,
                                totalRequestDfpTimeout: 0,
                                onStartDFPRequest: adSlot.onStartDFPRequest ? adSlot.onStartDFPRequest : function () {},
                                onBackSizeOriginal: adSlot.onBackSizeOriginal ? adSlot.onBackSizeOriginal : function () {},
                                auctionProcess: "ready_new_auction",
                                workerRefresh: null,
                                firstAuctionEnded: false,
                                readyShowAdInViewPort: true,
                                renderAdPostBid: function renderAdPostBid(bidWon) {
                                    if (bidWon) {
                                        vilog("[BannerManager] Start showAd for adSlot ".concat(this.adSlotId, " with renderType = ").concat(this.renderMode, " - ").concat(Math.floor(Date.now() / 1000)));
                                        vilog(bidWon);
                                        this.currentAdType = "ADS";
                                        adSlot.renderAd(bidWon);
                                        pushInfoDebugOverlay(this.adSlotId, bidWon);
                                    } else {
                                        vilog("[BannerManager] Render passback for adSlot ".concat(this.adSlotId));
                                        this.currentAdType = "PASSBACK";
                                        adSlot.passBack();
                                        var dataBid = {
                                            adId: "Passback",
                                            bidder: "Passback",
                                            creativeId: "unknown from Passback"
                                        };
                                        pushInfoDebugOverlay(this.adSlotId, dataBid);
                                    }
                                },
                                renderAdDfp: function renderAdDfp(bidWon) {
                                    vilog("[BannerManager] Start showAd for adSlot ".concat(this.adSlotId, " with renderType = ").concat(this.renderMode, " - ").concat(Math.floor(Date.now() / 1000)));
                                    vilog(bidWon);

                                    try {
                                        adSlot.onBackSizeOriginal();
                                        var adDivId = adSlot.getAdElement().id;
                                        adSlot.getAdElement().innerHTML = "";

                                        if (typeof googletag == "undefined" || typeof googletag.cmd == "undefined") {
                                            this.renderAdPostBid(bidWon);
                                            return;
                                        }

                                        googletag.cmd.push(function () {
                                            var TARGET_KEYS = BannerManager_CONSTANTS.TARGET_KEYS;
                                            googletag.destroySlots([this.googleTagSlot]); // Process currency

                                            var dfpAdUnitObj = this.dfpAdUnit ? processDfpAdUnit(this.dfpAdUnit) : null;

                                            var _ref = bidWon ? processRealCpm(bidWon.cpm, dfpAdUnitObj) : processRealCpm(_this.curFloorObj.price, dfpAdUnitObj),
                                                _ref2 = slicedToArray_default()(_ref, 2),
                                                realCPM = _ref2[0],
                                                granularityMultiplier = _ref2[1];

                                            var dfpAdUnit = dfpAdUnitObj.dfpAdUnit ? dfpAdUnitObj.dfpAdUnit : "";
                                            this.googleTagSlot = googletag.defineSlot(dfpAdUnit, googleTagRequestSizes, adDivId);

                                            if (!this.googleTagSlot) {
                                                this.renderAdPostBid(bidWon);
                                                return;
                                            }

                                            if (this.googleTagSlot && typeof this.googleTagSlot.setForceSafeFrame == "function" && adSlot.safeFrame === "on") {
                                                this.googleTagSlot.setForceSafeFrame(true);
                                            }

                                            this.googleTagSlot.addService(googletag.pubads());
                                            this.googleTagSlot.googleTagRequestSizes = googleTagRequestSizes; // dùng cho pixel đếm request bidder google

                                            this.currentAdType = "ADS";
                                            this.googleTagSlot.clearTargeting(); // this.googleTagSlot.setTargeting(TARGET_KEYS.AD_SLOT, this.tagId);

                                            this.googleTagSlot.setTargeting(TARGET_KEYS.ACCOUNT, adSlot.targetGoogleAccount ? adSlot.targetGoogleAccount : "");
                                            this.googleTagSlot.setTargeting(TARGET_KEYS.AD_WIDTH, bidWon && bidWon.width ? bidWon.width : this.adWidth);
                                            this.googleTagSlot.setTargeting(TARGET_KEYS.AD_HEIGHT, bidWon && bidWon.height ? bidWon.height : this.adHeight);
                                            this.googleTagSlot.setTargeting(TARGET_KEYS.PW_NETWORK, true);
                                            this.googleTagSlot.setTargeting(TARGET_KEYS.PW_LINE_ID, adSlot.targetLineId);
                                            var targetAdSlot = adSlot.targetAdSlot || "";
                                            var targetAdSlotVal = _this.curFloorObj.type != null ? "".concat(targetAdSlot, "_").concat(_this.curFloorObj.abTestId, "_").concat(_this.curFloorObj.type) : targetAdSlot;
                                            this.googleTagSlot.setTargeting(TARGET_KEYS.TARGET_ADSLOT, targetAdSlotVal);

                                            if (bidWon) {
                                                var ggBidAdj = adSlot.googleBidAdjustment ? parseFloat(adSlot.googleBidAdjustment) : 1;
                                                bidWon.adserverTargeting[TARGET_KEYS.PRICE_BUCKET] = getCustomAPDPB(bidWon.mediaType, realCPM, granularityMultiplier, ggBidAdj);
                                                adserverTargeting(bidWon, this.googleTagSlot);
                                                pushInfoDebugOverlay(this.adSlotId, bidWon);
                                            } else {
                                                if (realCPM > 0) {
                                                    this.googleTagSlot.setTargeting(TARGET_KEYS.PRICE_BUCKET, getCustomAPDPB("banner", realCPM, granularityMultiplier, 1));
                                                }

                                                this.googleTagSlot.setTargeting(TARGET_KEYS.IS_EMPTY_ADS, "true");
                                            }

                                            if (bidWon && bidWon.specialBid) {
                                                onSpecialBidWin.add(this.adSlotId, function () {
                                                    this.renderAdPostBid(bidWon);
                                                }.bind(this));
                                            }

                                            onGoogleDfpResonseEmpty.add(this.adSlotId, function () {
                                                this.renderAdPostBid(bidWon);
                                            }.bind(this));
                                            onDfpRequestTimeOut.add(this.adSlotId, function () {
                                                this.markSlotRequestDfpTimeout();
                                                this.renderAdPostBid(bidWon);
                                            }.bind(this)); // render ads

                                            this.onStartDFPRequest();
                                            googletag.pubads().refresh([this.googleTagSlot]);
                                        }.bind(this));
                                    } catch (e) {
                                        this.renderAdPostBid(bidWon);
                                        captureException(e, "[BannerManager - renderAdDfp fail]");
                                    }
                                },
                                markAuctionCompleted: function markAuctionCompleted() {
                                    this.auctionProcess = "completed";

                                    if (this.adRefreshTime > 0) {
                                        clearTimeout(this.workerRefresh);
                                        this.workerRefresh = setTimeout(function () {
                                            vilog("[BannerManager] adRefresh timeout on adSlot ".concat(this.adSlotId, " at time is ").concat(Math.floor(Date.now() / 1000)));

                                            _this.startBidding(this);
                                        }.bind(this), this.adRefreshTime * 1000);
                                    }
                                },
                                startNewAuction: function startNewAuction(resetViewPortTime) {
                                    if (this.adRefreshTime > 0 && this.reloadMode != "signal" || this.reloadMode == "signal") {
                                        clearTimeout(this.workerRefresh);

                                        _this.startBidding(this, resetViewPortTime);
                                    }
                                },
                                markSlotReadyShowAd: function markSlotReadyShowAd() {
                                    this.readyShowAdInViewPort = true;
                                    this.adInViewPortTime = 0;
                                },
                                markSlotRequestDfpTimeout: function markSlotRequestDfpTimeout() {
                                    this.totalRequestDfpTimeout++;

                                    if (this.totalRequestDfpTimeout >= 5) {
                                        this.renderMode = "POSTBID";
                                    }
                                },
                                requireShowAdInViewPort: function requireShowAdInViewPort() {
                                    // các trường hợp render in view port
                                    // 1. signal và postbid
                                    // 2. signal và adloadtype != lazyload 
                                    if (this.adloadType == "lazy_load" && this.renderMode === "DFP") {
                                        return false;
                                    }

                                    if (this.reloadMode == "signal") {
                                        return true;
                                    }

                                    return false;
                                },
                                bidBackHandler: null
                            };
                            vilog("Add new ad slot ".concat(newAdSlot.adSlotId, " success..."), "BannerManager");
                            vilog(newAdSlot, "BannerManager");
                            this.adSlots[adSlot.adSlotId] = newAdSlot;
                            this.startAdWorker(newAdSlot);
                            this.startBidding(newAdSlot);
                        } catch (e) {
                            captureException(e, "[BannerManager - addAdSlot]");
                        }
                    }
                }, {
                    key: "startAdWorker",
                    value: function startAdWorker(adSlot) {
                        var showAdWorker = null;

                        var changeReloadModeAfterLazyLoadComplete = function changeReloadModeAfterLazyLoadComplete() {};

                        var originalReloadMode = adSlot.reloadMode;

                        if (adSlot.adloadType == "lazy_load" && adSlot.reloadMode != "signal") {
                            adSlot.reloadMode = "signal";

                            changeReloadModeAfterLazyLoadComplete = function changeReloadModeAfterLazyLoadComplete() {
                                adSlot.reloadMode = originalReloadMode;
                                clearInterval(showAdWorker);
                            };
                        } // check view port cho ad element nếu set nextAdAfterViewPortTime > 0


                        if (adSlot.nextAdAfterViewPortTime > 0) {
                            var adWatchingCounter = null;

                            var isViewability = function isViewability() {
                                vilog("[BannerManager] start watching worker on adSlot ".concat(adSlot.adSlotId));
                                clearInterval(adWatchingCounter);
                                adWatchingCounter = setInterval(function () {
                                    // check completed ở đây không phải ở ngoài interval vì worker cần chạy khi ad isVisible và InViewPort, nếu set ở ngoài thì woker không chạy được nếu lần đầu ad đã isVisible và InViewPort
                                    if (adSlot.auctionProcess != "completed") {
                                        return;
                                    }

                                    adSlot.adInViewPortTime++;

                                    if (adSlot.reloadMode == "signal") {
                                        // thực hiện bid trước khi hiển thị ads 3 giây
                                        if (adSlot.adInViewPortTime == adSlot.nextAdAfterViewPortTime - bidEstimateTime) {
                                            vilog("[BannerManager] marked slot ".concat(adSlot.adSlotId, " is ready new Auction at time is ").concat(Math.floor(Date.now() / 1000)));
                                            adSlot.startNewAuction(false);
                                        }

                                        if (adSlot.adInViewPortTime == adSlot.nextAdAfterViewPortTime) {
                                            adSlot.markSlotReadyShowAd();
                                        }
                                    } else {
                                        if (adSlot.adInViewPortTime == adSlot.nextAdAfterViewPortTime) {
                                            adSlot.startNewAuction(true);
                                            adSlot.markSlotReadyShowAd();
                                        }
                                    }
                                }, 1000);

                                if (adSlot.requireShowAdInViewPort()) {
                                    showAdWorker = setInterval(function () {
                                        if (!adSlot.readyShowAdInViewPort || typeof adSlot.bidBackHandler !== "function") {
                                            return;
                                        }

                                        adSlot.readyShowAdInViewPort = false;
                                        adSlot.bidBackHandler();
                                        changeReloadModeAfterLazyLoadComplete();
                                    }, 150);
                                }
                            };

                            var isOutViewability = function isOutViewability() {
                                vilog("[BannerManager] Clear biddingWorker on adSlot ".concat(adSlot.adSlotId));
                                clearInterval(adWatchingCounter);
                                clearInterval(showAdWorker);
                            };

                            adSlot.viewPortDetect.inViewPort(isViewability);
                            adSlot.viewPortDetect.outViewPort(isOutViewability);
                        }
                    }
                }, {
                    key: "startBidding",
                    value: function startBidding(adSlot) {
                        var resetViewPortTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

                        if (!isCheckElementVisible(adSlot.adWrapper)) {
                            vilog("[BannerManager] adSlot ".concat(adSlot.adSlotId, " is not visible"));
                            return;
                        }

                        var _this = this;

                        vilog("[BannerManager] Start requestBids for adSlot ".concat(adSlot.adSlotId, "."));
                        adSlot.biddingManager && adSlot.biddingManager.requestBids(function (auctionIsEmptyBid, curFloorObj) {
                            adSlot.bidBackHandler = function () {
                                try {
                                    _this.curFloorObj = curFloorObj;
                                    adSlot.bidBackHandler = null; // check ad element is hidden

                                    if (adSlot.adWrapper.offsetParent == null) {
                                        vilog("[BannerManager] slotId ".concat(adSlot.adSlotId, " is hidden with offsetParent = null... set timeout refresh slot"));
                                        adSlot.markAuctionCompleted();
                                        return;
                                    }

                                    var bidWon = adSlot.biddingManager && adSlot.biddingManager.getHighestBid();
                                    _this.curBidWon = bidWon;

                                    if (bidWon) {
                                        // xử lý render outstream trên banner
                                        if (bidWon.mediaType == "video") {
                                            bidWon.setSpecialBid();
                                        } // logBidData("banner", bidWon); // log redirect bid
                                        // if (adSlot.renderMode == "DFP" && parseFloat(bidWon.adserverTargeting.pw_pb) <= (CONSTANTS.MAX_TARGET_CPM_BANNER * CONFIGS.granularityMultiplier) && bidWon.cpm < (CONSTANTS.MAX_TARGET_CPM_BANNER * CONFIGS.granularityMultiplier)) {


                                        if (!Configs.gbk && adSlot.renderMode == "DFP") {
                                            adSlot.renderAdDfp(bidWon);
                                        } else {
                                            adSlot.renderAdPostBid(bidWon);
                                        }

                                        adSlot.markAuctionCompleted();
                                    } else {
                                        if (!Configs.gbk && adSlot.renderMode == "DFP") {
                                            adSlot.renderAdDfp(null);
                                            adSlot.markAuctionCompleted();
                                        } else {
                                            if (adSlot.currentAdType != "ADS") {
                                                adSlot.renderAdPostBid(null);
                                            }

                                            adSlot.markAuctionCompleted();
                                        }
                                    }
                                } catch (e) {
                                    vilog(e);
                                }
                            };

                            if (!adSlot.requireShowAdInViewPort()) {
                                adSlot.bidBackHandler();
                            }

                            resetViewPortTime && (adSlot.adInViewPortTime = 0);
                            adSlot.firstAuctionEnded = true;
                        });
                    }
                }, {
                    key: "eventHandle",
                    value: function eventHandle(adSlotId) {
                        var _this2 = this;

                        if (Configs.slotIdRegisterEvent[adSlotId]) {
                            return;
                        }

                        googletag.cmd.push(function () {
                            // xử lý render lại các request lên dfp không trả về response
                            googletag.pubads().addEventListener('slotRequested', function (event) {
                                var slotId = event.slot.getSlotElementId();

                                if (slotId != adSlotId) {
                                    return;
                                }

                                _this2.adSlots[adSlotId].timeoutDFP = setTimeout(function () {
                                    vilog("DFP request timeout on slotId ".concat(slotId));
                                    onDfpRequestTimeOut.runAndClear(slotId);
                                }, 3000);
                            });
                            googletag.pubads().addEventListener('slotResponseReceived', function (event) {
                                if (event.slot.getSlotElementId() != adSlotId) {
                                    return;
                                }

                                clearTimeout(_this2.adSlots[adSlotId].timeoutDFP);
                            }); //

                            googletag.pubads().addEventListener('slotRenderEnded', function (event) {
                                var slotId = event.slot.getSlotElementId();

                                if (slotId != adSlotId) {
                                    return;
                                }

                                vilog(event);

                                try {
                                    var issetGoogleAds = event.lineItemId == null && event.isEmpty == false ? true : false; // khi có ads của demand hoặc ads của google được render

                                    if (event.lineItemId != null && event.slot.getTargeting(BannerManager_CONSTANTS.TARGET_KEYS.IS_EMPTY_ADS).indexOf("true") === -1 || issetGoogleAds) {
                                        if (issetGoogleAds) {
                                            vilog("ADX WIN ".concat(slotId, " ======"), "BannerManager");
                                            var dataBid = {
                                                adId: "unknown from Adx",
                                                bidder: "Adx",
                                                creativeId: "unknown from Adx"
                                            };
                                            pushInfoDebugOverlay(adSlotId, dataBid); // gg win -> add bid to bid response

                                            var adSlot = _this2.adSlots && _this2.adSlots.length > 0 ? _this2.adSlots[adSlotID] : null;

                                            if (adSlot && _this2.curBidWon) {
                                                adSlot.biddingManager.addBidToArray(_this2.curBidWon);
                                                _this2.curBidWin = null;
                                            }
                                        } else {
                                            if (event.sourceAgnosticCreativeId && !Configs.creativeIds.includes(event.sourceAgnosticCreativeId)) {
                                                var dataBid = {
                                                    adId: "Direct Campain",
                                                    bidder: "Direct Campain",
                                                    creativeId: "Direct Campain"
                                                };
                                                pushInfoDebugOverlay(adSlotId, dataBid);
                                            }
                                        }
                                    } // khi bid win là special bid


                                    if (event.lineItemId != null && event.slot.getTargeting(BannerManager_CONSTANTS.TARGET_KEYS.SPECIAL_BID).indexOf("true") !== -1 && Configs.creativeIds.includes(event.sourceAgnosticCreativeId)) {
                                        vilog("Special Bid win ".concat(slotId, " ======"), "BannerManager");
                                        onSpecialBidWin.runAndClear(slotId);
                                        return;
                                    } // khi dfp response empty, hoặc không empty nhưng cũng không có ads của demand


                                    if (event.isEmpty === true || event.lineItemId != null && event.slot.getTargeting(BannerManager_CONSTANTS.TARGET_KEYS.IS_EMPTY_ADS).indexOf("true") !== -1) {
                                        vilog("Empty ads on slotId ".concat(slotId), "BannerManager");
                                        onGoogleDfpResonseEmpty.runAndClear(slotId);
                                    }
                                } catch (e) {
                                    captureException(e, "[BannerManager - INIT_SCRIPT]");
                                }
                            });
                        });
                        Configs.slotIdRegisterEvent[adSlotId] = true;
                    }
                }, {
                    key: "removeAdSlotForPassbackOutstream",
                    value: function removeAdSlotForPassbackOutstream(adSlotID) {
                        if (!this.adSlots || this.adSlots.length <= 0) return;

                        if (this.adSlots.hasOwnProperty(adSlotID)) {
                            delete this.adSlots[adSlotID];
                        }
                    }
                }]);

                return BannerManager;
            }();

            var bam = new BannerManager_BannerManager();
            /* harmony default export */ var plugins_BannerManager = (bam);
// CONCATENATED MODULE: ./src/plugins/helper/icon.js


            function renderViIcon(adSlotId) {
                return null;
                var pLeft = '0px';
                var h = window.location.hostname;
                var viIcon = document.createElement("power");
                viIcon.className = "powerIcon powerIgnore";
                viIcon.style.cssText = 'float:left!important;cursor:pointer;opacity:0!important;padding:0!important;margin-left:1px!important;border-top-right-radius:5px!important;background-color:rgba(255, 255, 255, 0.9) !important;overflow:hidden!important;left:' + pLeft + '!important;bottom:0px!important;z-index:9999!important;transition:width 0.3s ease 0s,opacity 0.3s ease-in-out!important;height:16px!important;width:16px!important;';
                viIcon.addEventListener('mouseover', function () {
                    viIcon.style.setProperty("width", "132px", "important");
                });
                viIcon.addEventListener('mouseout', function () {
                    viIcon.style.setProperty("width", "16px", "important");
                });

                if (Configs.enableIcon == "on") {
                    setTimeout(function () {
                        viIcon.style.setProperty("opacity", "1", "important");
                    }, 100);
                }

                viIcon.innerHTML = addIcon();
                viIcon.setAttribute("title", "Visit " + Configs.brandHomepage);
                viIcon.addEventListener("click", function () {
                    window.open("//" + Configs.brandHomepage + "/?ref=" + h, '_blank');
                });
                var viWrapperIC = document.createElement("power");
                viWrapperIC.id = "__icon_" + adSlotId;
                viWrapperIC.append(viIcon);
                return viWrapperIC;
            }

            function addIcon() {
                var textRender = "Ad by</power> <power style=\"font-size:11px!important;font-family:inherit!important;line-height:8px;font-weight:400;\">".concat(Configs.brandName);

                if (Configs.enableIcon === "off") {
                    textRender = "Ad";
                }

                return "<power style=\"display:block;width:initial;\">\n            <power style=\"float:left;display:inline-block;height:14px;width:14px;padding:1px;\">\n                <power style=\"display:block;width:14px;height:14px;\">\n                    <power style=\"display:inherit!important;margin-top:0.5px!important;width:14px!important;height:13px!important;background-image:url('//".concat(Configs.brandIcon, "')!important;background-size:cover!important;\"></power>\n                </power>\n            </power>\n            <power style=\"float:left;display:block;white-space:nowrap;height:12px;padding:2px;\">\n                <power target=\"_blank\" style=\"display:block;text-decoration:none;color:#333;font-family:Arial;line-height:8px;font-weight:400;\" class=\"notranslate\">\n                    <power style=\"font-size:10px!important;font-family:inherit!important;line-height:8px;font-weight:400;\">\n                    ") + textRender + "\n                    </power>\n                </power>\n            </power>\n            <power style=\"clear:both;\"></power>\n        </power>";
            }

            function renderWrapperFinalCls(adUnitCode) {
                var mMarginT = utlis_mobileDetect() ? 8 : 15;
                var mSize = utlis_mobileDetect() ? 13 : 16;
                var textRender = "Ads closed by <span style=\"color:rgba(0,0,0,0.6) !important;font-size: 18px;font-weight: 600;\">" + Configs.brandName + "</span>";

                if (Configs.enableIcon === "off") {
                    textRender = "Ads has been reported";
                }

                return "\n    <div style='text-align: center; width: 100%;'>\n        <div  id='ct_bf_cls_" + adUnitCode + "' style='transition: all 1s linear;z-index: 1; line-height: 1.15em; font-size: " + mSize + "px;margin-top:" + mMarginT + "px;text-align: center; padding: 8px;'>\n            <span style=\"color:rgba(0,0,0,0.6) !important;\"><strong>We'll try not to show that ad again</strong></span>\n        </div>\n        <span id='ct_fn_cls_" + adUnitCode + "' style='transition: all 1s linear; margin-top:" + mMarginT + "px;display: inline-block; visibility: hidden; font-size: " + mSize + "px; line-height: 1.28em; color: rgba(0,0,0,0.4) !important; text-align: center; padding: 0.3em;'>\n            " + textRender + "\n        </span>\n    </div>\n    ";
            }

            function renderWrapperReason() {
                return "\n        <div style='width: 100%;text-align: center;'>\n            <div>\n                <label class='itemrp' data-reason-id='1' data-reason='Ad covered content'>\n                    <div><span>Ad covered content</span></div>\n                </label>\n                <label class='itemrp' data-reason-id='2' data-reason='Not interested in this ad'>\n                    <div><span>Not interested in this ad</span></div>\n                </label>\n                <label class='itemrp' data-reason-id='3' data-reason='Already bought this'>\n                    <div><span>Already bought this</span></div>\n                </label>\n                <label class='itemrp' data-reason-id='4' data-reason='Ad was too personal'>\n                    <div><span>Ad was too personal</span></div>\n                </label>\n                <label class='itemrp' data-reason-id='5' data-reason='Ad with offensive content'>\n                    <div><span>Ad with offensive content</span></div>\n                </label>\n            </div>\n        </div>\n    ";
            }

            function renderWrapperReport(adUnitCode, chosenPosition) {
                var mWidth = utlis_mobileDetect() ? 14 : 18;
                var mSize = utlis_mobileDetect() ? 13 : 16;
                var mSizeAd = utlis_mobileDetect() ? 15 : 18;
                var mSizeBtn = utlis_mobileDetect() ? 12 : 14;
                var mWItem = utlis_mobileDetect() ? 75 : 96;
                var mHItem = utlis_mobileDetect() ? 35 : 50;
                var widthWrapper = "100%";
                var marginLWrapper = "0px";
                var textRender = "Ads by <span style='color:rgba(0,0,0,0.6);font-size: " + mSizeAd + "px;font-weight: 600;'>" + Configs.brandName + "</span>";

                if (Configs.enableIcon === "off") {
                    textRender = "Advertisement report";
                }

                var html = "\n    <div>\n        <div id='close_panel_" + adUnitCode + "' class='close' style='left: 5px;position: absolute; top: 5px; color: black; font-size: 16px; line-height: 15px; opacity: 0.8; height: 18px; width: 18px; user-select: none; cursor: pointer;'>\n            <svg viewBox='0 0 24 24' fill='#ccc' style='max-width: " + mWidth + "px; cursor: pointer;'> <path class='native-arrow' d='M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z'></path> </svg>\n        </div>\n        <div style='text-align: center; width: 100%; font-size: " + mSize + "px;'>\n            <span style='display: inline-block; line-height: 1.28em; color: rgba(0,0,0,0.4); text-align: center; padding: 0.3em;'>\n                " + textRender + "\n            </span>\n        </div>\n        <div id='btns' style='width: 100%; text-align: center;'>\n            <a class='btnads' id='btn_reason_close_" + adUnitCode + "' style='background-color: rgb(66,133,245); color: white;line-height: 1.15em; font-size: " + mSizeBtn + "px;'>\n                <span style='display: inline-block; padding: 0.5em 0.6em; line-height: 1em;'>Stop seeing this ad</span>\n            </a>\n        </div>\n    </div>";

                if (chosenPosition) {
                    widthWrapper = chosenPosition.width + 'px';

                    if (chosenPosition.horizontal === "middle") {
                        marginLWrapper = (document.documentElement.clientWidth - chosenPosition.width) / 2 + 'px';
                    }

                    html += "<style> #" + adUnitCode + " .vi-wrp-cls{left:0px;width: " + widthWrapper + "; height:100%; background-color: #FAFAFA;margin: 0 auto;position: absolute;top:0px;font-family: Arial, sans-serif;overflow: hidden} .itemrp:first-child { margin-top: 8px; } .itemrp { position: relative; z-index: 9110; overflow: hidden; display: inline-block; padding: 1px 5px; width: " + mWItem + "px; height: " + mHItem + "px; background-color: #FFFFFF; cursor: pointer; margin: 4px; box-shadow: 0px 0px 2px rgba(0, 0, 0, 0.12), 0px 1px 3px rgba(0, 0, 0, 0.26); border: none; border-radius: 2px; } .itemrp div { display: -webkit-flex; display: flex; -webkit-align-items: center; align-items: center; -webkit-justify-content: center; justify-content: center; width: 100%; height: 100%; } .itemrp span { color: #4285F4; font-family: Arial, sans-serif; text-align: center; font-size: 12px; line-height: 14px; white-space: normal; } .btnads { display: inline-block; border-radius: 2px; -moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box; box-shadow: 0px 0px 2px rgba(0, 0, 0, 0.12), 0px 1px 3px rgba(0, 0, 0, 0.26); cursor: pointer; font-size: 0.7em; margin: 0 1px 0.4em 1px; } .btnads>span { display: inline-block; padding: 0.5em 0.6em; line-height: 1em; } </style>";
                } else {
                    html += "<style>.vi-wrp-cls{width: 100%; height:100%; background-color: #FAFAFA;margin: 0 auto;position: absolute;top:0px;font-family: Arial, sans-serif;} .itemrp:first-child { margin-top: 8px; } .itemrp { position: relative; z-index: 9110; overflow: hidden; display: inline-block; padding: 1px 5px; width: 96px; height: 50px; background-color: #FFFFFF; cursor: pointer; margin: 4px; box-shadow: 0px 0px 2px rgba(0, 0, 0, 0.12), 0px 1px 3px rgba(0, 0, 0, 0.26); border: none; border-radius: 2px; } .itemrp div { display: -webkit-flex; display: flex; -webkit-align-items: center; align-items: center; -webkit-justify-content: center; justify-content: center; width: 100%; height: 100%; } .itemrp span { color: #4285F4; font-family: Arial, sans-serif; text-align: center; font-size: 12px; line-height: 14px; white-space: normal; } .btnads { display: inline-block; border-radius: 2px; -moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box; box-shadow: 0px 0px 2px rgba(0, 0, 0, 0.12), 0px 1px 3px rgba(0, 0, 0, 0.26); cursor: pointer; font-size: 0.7em; margin: 0 1px 0.4em 1px; } .btnads>span { display: inline-block; padding: 0.5em 0.6em; line-height: 1em; } </style>";
                }

                return html;
            }

            function addIconRp() {
                return "<div class='cbb' aria-hidden='true'>\n                <svg style=\"width: 16px !important; height: 16px !important;vertical-align: initial;display:block;fill: #00aecd !important\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" fill=\"#00aecd\" viewBox=\"0 0 15 15\">\n                    <path d=\"M7.5,1.5a6,6,0,1,0,0,12a6,6,0,1,0,0,-12m0,1a5,5,0,1,1,0,10a5,5,0,1,1,0,-10ZM6.625,11l1.75,0l0,-4.5l-1.75,0ZM7.5,3.75a1,1,0,1,0,0,2a1,1,0,1,0,0,-2Z\" stroke-width='0.1' stroke='#00aecd' ></path>\n                </svg>\n            </div>";
            }
// CONCATENATED MODULE: ./src/plugins/display.js








            var display_CONSTANTS = __webpack_require__(5);

            var SIZE_RESPONSIVE = __webpack_require__(121);

            var onHiddenPowerIcon = new utlis_HandleLog();
            var onShowPowerIcon = new utlis_HandleLog();
            var AD_RESPONSIVE = "responsive";
            var AD_FIXED = "fixed";
            var HORIZONTAL_AD = "horizontal";
            var VERTICAL_AD = "vertical";
            var SQUARE_AD = "square";

            _addEventListener("INIT_SCRIPT", function () {
                var TARGET_KEYS = display_CONSTANTS.TARGET_KEYS;
                googletag.cmd.push(function () {
                    googletag.pubads().addEventListener('slotRenderEnded', function (data) {
                        var slotId = data.slot.getSlotElementId();

                        if (data.lineItemId != null && data.slot.getTargeting(TARGET_KEYS.BIDDER).length > 0) {
                            // trường hợp có demand win -> show icon trên ads
                            onShowPowerIcon.run(slotId, data.slot.getTargeting(TARGET_KEYS.AD_WIDTH)[0], data.slot.getTargeting(TARGET_KEYS.AD_HEIGHT)[0]);
                        } else {
                            // trường hợp ADX win hoặc slot trả về passback -> hide icon trên ads
                            onHiddenPowerIcon.run(slotId);
                        }
                    });
                });
            });

            function getResponsiveSizeAd(maxW, maxH, displaySlot) {
                try {
                    if (typeof_default()(displaySlot) != "object") {
                        return null;
                    }

                    var adSize = displaySlot.adSize;

                    if (adSize != AD_RESPONSIVE) {
                        return {
                            sizeDefined: [displaySlot.w, displaySlot.h],
                            sizeMapping: displaySlot.adunit.mediaTypes.banner.sizes
                        };
                    }

                    if (typeof maxW == "undefined" || !maxW || maxW < 120) {
                        vilog("[Display] Width size Place Ad invalid");
                        return null;
                    }

                    if (typeof maxH == "undefined" || maxH > 1 && maxH < 50) {
                        vilog("[Display] Height size Place Ad invalid");
                        return null;
                    }

                    var resType = displaySlot.responsiveType;
                    var sizeDef = [];
                    var sizeMap = [];
                    var sizeWidth = [];
                    var sizeHeight = [];
                    var minWidth = 120;

                    var validateSizeAd = function validateSizeAd(minW, maxW, maxH, _size) {
                        if (typeof minW == "undefined" || typeof maxW == "undefined" || typeof maxH == "undefined" || !_size || _size.length == 0) {
                            return false;
                        }

                        if (maxH > 1) {
                            if (maxW >= _size[0] && _size[0] >= minW && _size[1] <= maxH) {
                                return true;
                            }
                        } else {
                            if (maxW >= _size[0] && _size[0] >= minW) {
                                return true;
                            }
                        }

                        return false;
                    };

                    var listSizeMap = SIZE_RESPONSIVE[resType];

                    for (var i = 0; i < listSizeMap.length; i++) {
                        var item = listSizeMap[i];

                        if (validateSizeAd(minWidth, maxW, maxH, item)) {
                            sizeMap.push(item);
                            sizeWidth.push(item[0]);
                            sizeHeight.push(item[1]);
                        }
                    }

                    if (sizeWidth.length > 0 && sizeHeight.length > 0) {
                        sizeDef = [Math.max.apply(Math, sizeWidth), Math.max.apply(Math, sizeHeight)];
                    }

                    return {
                        sizeDefined: sizeDef,
                        sizeMapping: sortedArray(sizeMap)
                    };
                } catch (error) {
                    captureException(error, "[Display - getResponsiveSizeAd]");
                }
            }

            function getHeightElement(el) {
                if (!el) {
                    return;
                }

                var h = null;

                while (el) {
                    if (el.offsetHeight >= 60 && isCheckElementVisible(el)) {
                        h = el.offsetHeight;
                        break;
                    }

                    el = el.parentNode;
                }

                return h;
            }

            function displayBanner(adSlot) {
                var displaySlotObj = Configs.adsTags.displaySlot;

                if (!displaySlotObj) {
                    vilog("[Display] displaySlot is null");
                    return;
                }

                ;

                if (!displaySlotObj[adSlot]) {
                    vilog("[Display] displaySlot[adSlot] is null - " + adSlot);
                    return;
                }

                ;
                var displaySlot = displaySlotObj[adSlot];
                var adElements = document.getElementsByClassName(Configs.adClass);

                if (adElements.length == 0) {
                    vilog("[Display] adElements.length == 0 - " + adSlot);
                    return;
                }

                ;
                vilog("[Display] Start display adSlot: " + adSlot);
                var adSize = displaySlot.adSize;
                var stt = 0;

                var _loop = function _loop() {
                    var _adunitList = [];
                    var adWrapper = adElements[i];

                    if (adWrapper.dataset.adSlot != adSlot) {
                        return "continue";
                    }

                    stt++;

                    if (adWrapper.dataset.id) {
                        return "continue";
                    }

                    var adSlotID = "".concat(adSlot, "_").concat(stt);
                    var adSlotContainerID = "container_".concat(adSlotID);
                    var adContainerHtml = "<".concat(Configs.tagElement, " id=\"").concat(adSlotContainerID, "\" style=\"display:block!important;position:relative!important;margin:0 auto!important;visibility: visible;\"><").concat(Configs.tagElement, " style=\"display:flex;visibility: visible;\" id=\"").concat(adSlotID, "\"></").concat(Configs.tagElement, "></").concat(Configs.tagElement, ">");

                    if (!isCheckElementVisible(adWrapper)) {
                        vilog("[Display] ".concat(adSlotID, " not visible"));
                        return "continue";
                    }

                    var mHeight = getHeightElement(adWrapper.parentNode);

                    if (adSize == AD_RESPONSIVE && (typeof mHeight == "undefined" || mHeight < 1)) {
                        vilog("[Display] Ad slot ".concat(adSlotID, " not space render Ad"));
                        return "continue";
                    }

                    var sizeObj = getResponsiveSizeAd(adWrapper.parentNode.offsetWidth, mHeight, displaySlot);

                    if (!sizeObj || isObjEmpty(sizeObj) || sizeObj.sizeDefined.length == 0 || sizeObj.sizeDefined.length == 0) {
                        vilog("[Display] ".concat(adSlotID, " not define Size"));
                        return "continue";
                    }

                    var adWidth = sizeObj.sizeDefined[0];
                    var adHeight = sizeObj.sizeDefined[1];
                    vilog("[Display] Size Ad slot ".concat(adSlotID, " ").concat(JSON.stringify(sizeObj)));
                    adWrapper.dataset.id = adSlotID;
                    adWrapper.innerHTML = adContainerHtml;
                    adWrapper.style.setProperty("display", "block", "important");
                    adWrapper.style.setProperty("visibility", "visible", "important");
                    adWrapper.style.setProperty("opacity", "1", "important");
                    adWrapper.style.setProperty("margin", "0 auto", "important");
                    adWrapper.style.setProperty("overflow", "hidden"); // Center Ads

                    adWrapper.style.setProperty("display", "flex", "important");
                    adWrapper.style.setProperty("justify-content", "center", "important");
                    adWrapper.style.setProperty("align-items", "center", "important");

                    if (utlis_mobileDetect()) {
                        adWrapper.style.setProperty("width", "initial", "important");
                        adWrapper.style.setProperty("height", "initial", "important");
                        adWrapper.style.setProperty("min-width", adWidth + "px", "important");
                        adWrapper.style.setProperty("min-height", adHeight + "px", "important");
                    } else {
                        adWrapper.style.setProperty("width", adWidth + "px", "important");
                        adWrapper.style.setProperty("height", "initial", "important");
                        adWrapper.style.setProperty("min-height", adHeight + "px", "important");
                    }

                    createInfoDebugOverlay(adSlotID); // add adunit

                    var adunit = JSON.parse(JSON.stringify(displaySlot.adunit));
                    adunit.code = adSlotID;

                    if (adSize == AD_RESPONSIVE) {
                        adunit.bids = getBidsForAdSize(sizeObj.sizeMapping[0], adunit.bids);
                    }

                    adunit.mediaTypes.banner.sizes = sizeObj.sizeMapping;

                    _adunitList.push(adunit);

                    var viewPortDetect = newViewPortDetect(adWrapper, {
                        threshold: [51]
                    });
                    var floorPrice = isNaN(parseFloat(displaySlot.floorPrice)) ? 0 : parseFloat(displaySlot.floorPrice);

                    var _getFloorTest = getFloorTest(displaySlot.floorTest, adunit.code),
                        _getFloorTest2 = slicedToArray_default()(_getFloorTest, 2),
                        floorTest = _getFloorTest2[0],
                        testCaseId = _getFloorTest2[1];

                    var biddingManager = new helper_BidManager({
                        slotId: adSlotID,
                        tagId: displaySlot.zid,
                        floorPrice: floorPrice,
                        dynamicFloor: getDynamicFloor(displaySlot.dynamicFloor, adunit.code),
                        abTestFloorId: typeof displaySlot.abTestId === "number" ? displaySlot.abTestId : 0,
                        floorTest: floorTest,
                        testCaseId: testCaseId,
                        adUnits: _adunitList,
                        adWidth: adWidth,
                        adHeight: adHeight,
                        viewPortDetect: viewPortDetect,
                        tagWidth: displaySlot.w,
                        tagHeight: displaySlot.h,
                        buildBannerFromNative: function buildBannerFromNative(bidWon) {
                            return getNativeAd({
                                width: adWidth,
                                height: adHeight,
                                adId: bidWon.adId,
                                pubUrl: window.location.href
                            });
                        }
                    });
                    var newBannerAdSlot = {
                        bidManager: biddingManager,
                        targetGoogleAccount: typeof displaySlot.targetGoogleAccount === "string" ? displaySlot.targetGoogleAccount : "",
                        googleBidAdjustment: displaySlot.googleBidAdjustment ? displaySlot.googleBidAdjustment : null,
                        targetLineId: displaySlot.targetLineId ? displaySlot.targetLineId : "",
                        targetAdSlot: displaySlot.targetAdSlot ? displaySlot.targetAdSlot : "",
                        adSlotId: adSlotID,
                        tagId: displaySlot.zid,
                        adWidth: adWidth,
                        adHeight: adHeight,
                        requestSizes: adunit.mediaTypes.banner.sizes,
                        adRefreshTime: Configs.reloadMode === "signal" ? 0 : Configs.bannerRefreshTime,
                        nextAdAfterViewPortTime: Configs.bannerRefreshTimeInViewPort,
                        adWrapper: adWrapper,
                        reloadMode: Configs.reloadMode,
                        adloadType: Configs.adloadType,
                        safeFrame: Configs.safeFrame,
                        viewPortDetect: viewPortDetect,
                        dfpAdUnit: typeof displaySlot.dfpAdUnit === "string" ? displaySlot.dfpAdUnit : "",
                        renderAd: function renderAd(bidWon) {
                            _renderAd(bidWon, this.getAdElement(), adSlotID, adWidth, adHeight);

                            onShowPowerIcon.run(adSlotID, bidWon.width, bidWon.height);
                        },
                        passBack: function passBack() {
                            try {
                                onHiddenPowerIcon.run(adSlotID);
                                var passBack = typeof displaySlot.pass_back === "string" && displaySlot.pass_back != "" ? displaySlot.pass_back : null;

                                if (passBack) {
                                    if (Configs.pbRender === "iframe") {
                                        display_renderPassbackInIframe(this.getAdElement(), adSlotID, adWidth, adHeight, passBack);
                                    } else {
                                        renderPassbackInRoot(this.getAdElement(), passBack);
                                    }
                                }
                            } catch (e) {}

                            if (adWidth > 1 && adHeight > 1) {
                                var adContainer = adWrapper.querySelector("#" + adSlotContainerID);
                                adContainer.style.setProperty("width", "".concat(adWidth, "px"), "important");
                                adContainer.style.setProperty("min-height", "".concat(adHeight, "px"), "important"); // Center Passback

                                adContainer.style.setProperty("display", "flex", "important");
                                adContainer.style.setProperty("justify-content", "center", "important");
                                adContainer.style.setProperty("align-items", "center", "important");
                            }
                        },
                        onStartDFPRequest: function onStartDFPRequest() {
                            onHiddenPowerIcon.run(adSlotID);
                        },
                        onBackSizeOriginal: function onBackSizeOriginal() {
                            try {
                                if (adWidth > 1 && adHeight > 1) {
                                    var adContainer = adWrapper.querySelector("#" + adSlotContainerID);

                                    if (adContainer) {
                                        adContainer.style.setProperty("width", "".concat(adWidth, "px"), "important");
                                        adContainer.style.setProperty("min-height", "".concat(adHeight, "px"), "important");
                                        adContainer.style.setProperty("display", "flex", "important");
                                        adContainer.style.setProperty("justify-content", "center", "important");
                                        adContainer.style.setProperty("align-items", "center", "important");
                                    }
                                }
                            } catch (error) {}
                        },
                        getAdElement: function getAdElement() {
                            var adEl = adWrapper.querySelector("#" + adSlotID);

                            if (adEl != null) {
                                return adEl;
                            } // xử lý trường hợp khi render pasback thì pub replace content trong div adWrapper nên khi tạo lại ad element cần remove hết html mà pub đã in vào adWrapper (ví dụ: integral-calculator.com)


                            adWrapper.innerHTML = adContainerHtml;
                            return adWrapper.querySelector("#" + adSlotID);
                        },
                        getAdPowerIcon: function getAdPowerIcon() {
                            try {
                                var iconEl = adWrapper.querySelector("#__icon_" + adSlotID);

                                if (iconEl != null) {
                                    return iconEl;
                                }

                                var el = renderViIcon(adSlotID);

                                if (el) {
                                    el.style.setProperty("display", "none", "important");
                                }

                                if (adWrapper && adWrapper.querySelector("#" + adSlotContainerID) && el) {
                                    adWrapper.querySelector("#" + adSlotContainerID).appendChild(el);
                                }

                                return el;
                            } catch (e) {
                                // captureException(e, "[Display - getAdPowerIcon]");
                                return null;
                            }
                        },
                        issetAdElement: function issetAdElement() {
                            var adEl = adWrapper.querySelector("#" + adSlotID);

                            if (adEl == null) {
                                return false;
                            }

                            return true;
                        }
                    };
                    onShowPowerIcon.add(adSlotID, function (_adWidth, _adHeight) {
                        try {
                            if (_adWidth > 1 && _adHeight > 1 && Configs.dataBidWin[adSlotID] && Configs.dataBidWin[adSlotID].mediaType != "video") {
                                var adContainer = adWrapper.querySelector("#" + adSlotContainerID);
                                adContainer.style.setProperty("width", "".concat(_adWidth, "px"), "important");
                                adContainer.style.setProperty("height", "".concat(_adHeight, "px"), "important");
                            }

                            var _powerIcon = newBannerAdSlot.getAdPowerIcon();

                            if (_powerIcon === null) {
                                return;
                            }

                            _powerIcon.style.cssText = "position: absolute!important; bottom: 0px!important; left: 0px!important; display: inline-block !important;";
                        } catch (e) {
                            captureException(e, "[Display - onShowPowerIcon]");
                        }
                    });
                    onHiddenPowerIcon.add(adSlotID, function () {
                        var _powerIcon = newBannerAdSlot.getAdPowerIcon();

                        if (_powerIcon === null) {
                            return;
                        }

                        _powerIcon.style.setProperty("display", "none", "important");
                    });

                    var _addToBannerManager = function addToBannerManager() {
                        _addToBannerManager = function addToBannerManager() {};

                        plugins_BannerManager.addAdSlot(newBannerAdSlot);
                    };

                    if (Configs.adloadType == "lazy_load") {
                        var clearViewportDetect = function clearViewportDetect() {};

                        clearViewportDetect = isInViewPort(adWrapper, function () {
                            _addToBannerManager();

                            clearViewportDetect();
                        }, function () {}, {
                            threshold: [10]
                        });

                        try {
                            // ước lượng thời gian bid trước khi scroll đến vị trí của adslot dựa trên khoảng cách của adslot đến view port để thực hiện bid trước khi kéo đến -> ads hiển thị nhanh nhất có thể khi in view port
                            var adToViewPortSpace = 0;

                            if (adWrapper.getBoundingClientRect().top > 0) {
                                adToViewPortSpace = adWrapper.getBoundingClientRect().top - window.innerHeight;
                            } else {
                                adToViewPortSpace = Math.abs(adWrapper.getBoundingClientRect().bottom);
                            }

                            if (adToViewPortSpace > 0) {
                                var timeOutToRequestBid = Math.round(adToViewPortSpace / 1600);
                                setTimeout(_addToBannerManager, timeOutToRequestBid * 1000);
                                vilog("TimeOutToRequestBid: ".concat(timeOutToRequestBid));
                            }
                        } catch (e) {
                            _addToBannerManager();

                            captureException(e, "[Display - addToBannerManager]");
                        }
                    } else {
                        _addToBannerManager();
                    }
                };

                for (var i = 0; i < adElements.length; i++) {
                    var _ret = _loop();

                    if (_ret === "continue") continue;
                }
            }

            function _renderAd(bidWon, adElement, adSlotId, adWidth, adheight) {
                try {
                    var eventData = {
                        slotId: adSlotId,
                        bidderCode: bidWon.bidderCode,
                        cpm: bidWon.cpm,
                        adSize: bidWon.size ? bidWon.size : "".concat(bidWon.width, "x").concat(bidWon.height),
                        mediaType: bidWon.mediaType
                    };

                    _eventFire("AD_START_RENDER", eventData);

                    if (bidWon.specialBid) {
                        var iframeDoc = renderIframeForSmartBanner(adElement, adSlotId, adWidth, adheight);

                        if (navigator.userAgent && navigator.userAgent.toLowerCase().indexOf('firefox/') > -1) {
                            var firefoxVerRegx = /firefox\/([\d\.]+)/;
                            var firefoxVer = navigator.userAgent.toLowerCase().match(firefoxVerRegx)[1]; // grabs the text in the 1st matching group

                            if (firefoxVer && parseInt(firefoxVer, 10) < 67) {
                                iframeDoc.open('text/html', 'replace');
                            }
                        }

                        iframeDoc.write(bidWon.ad);
                        iframeDoc.close();

                        _eventFire("AD_RENDER_EDNED", eventData);

                        return;
                    }

                    if (Configs.noneSafeFrameBidder.indexOf(bidWon.bidderCode) !== -1 || Configs.safeFrame !== 'on' || bidWon.mediaType == "native") {
                        var _iframeDoc = renderIframeForSmartBanner(adElement, adSlotId, adWidth, adheight);

                        apdpbjs.renderAd(_iframeDoc, bidWon.adId);
                    } else {
                        adElement.innerHTML = '<div id="pw_sf_' + adSlotId + '"></div>';
                        renderSafeFrame('pw_sf_' + adSlotId, {
                            width: adWidth,
                            height: adheight
                        }, bidWon.ad);
                    }

                    _eventFire("AD_RENDER_EDNED", eventData);
                } catch (e) {
                    captureException(e, "[Display - renderAd]");
                }
            }


            function display_renderPassbackInIframe(adElement, adSlotId, adWidth, adHeight, passbackScript) {
                try {
                    var iframeDoc = renderIframeForSmartBanner(adElement, adSlotId, adWidth, adHeight);

                    if (iframeDoc) {
                        iframeDoc.open();
                        iframeDoc.write(passbackScript);
                        iframeDoc.close(); // Center Passback

                        var bodyIframe = iframeDoc.body;
                        bodyIframe.style.setProperty("display", "flex", "important");
                        bodyIframe.style.setProperty("justify-content", "center", "important");
                        bodyIframe.style.setProperty("align-items", "center", "important");
                    }
                } catch (e) {
                    captureException(e, "[Display - renderPassbackInIframe]");
                }
            }
            function renderPassbackInRoot(adElement, passbackString) {
                try {
                    adElement.innerHTML = passbackString;
                    setTimeout(function () {
                        var scripts = adElement.getElementsByTagName('script');

                        if (scripts.length > 0) {
                            var scriptExcutes = [];
                            var scLoad = 0;
                            var scLoaded = 0;

                            var scriptExcuter = function scriptExcuter() {
                                if (scLoad === scLoaded) {
                                    scriptExcutes.forEach(function (script) {
                                        Function(script)();
                                    });
                                }
                            };

                            for (var i = 0; i < scripts.length; i++) {
                                if (scripts[i].src) {
                                    scLoad++;
                                } else {
                                    scriptExcutes.push(scripts[i].innerText);
                                }
                            }

                            for (var _i = 0; _i < scripts.length; _i++) {
                                if (scripts[_i].src) {
                                    var scriptLoader = document.createElement("script");
                                    scriptLoader.src = scripts[_i].src;

                                    scriptLoader.onload = function () {
                                        scLoaded++;
                                        scriptExcuter();
                                    };

                                    document.getElementsByTagName('head')[0].appendChild(scriptLoader);
                                }
                            }

                            if (!scLoad) scriptExcuter();
                        }
                    }, 100);
                } catch (e) {
                    captureException(e, "[Display - renderPassbackInRoot]");
                }
            }
// EXTERNAL MODULE: ./src/plugins/template/video/html/interstitial/template.html
            var interstitial_template = __webpack_require__(39);
            var template_default = /*#__PURE__*/__webpack_require__.n(interstitial_template);

// CONCATENATED MODULE: ./src/plugins/Interstitial.js





            function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

            function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

            function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }








            var Interstitial_CONSTANTS = __webpack_require__(5);

            var Interstitial_Interstitial = /*#__PURE__*/function () {
                function Interstitial() {
                    classCallCheck_default()(this, Interstitial);

                    // Init Config
                    this.initConfig = Configs.adsTags && Configs.adsTags.interstitial ? Configs.adsTags.interstitial : null;

                    if (!this.initConfig || !this.initConfig.adunitBanner || (this.initConfig.adunitBanner.bids == null || this.initConfig.adunitBanner.bids == "") && (this.initConfig.dfpAdUnit == null || this.initConfig.dfpAdUnit == "")) {
                        this.logMess("Config is Empty...");
                        return;
                    }

                    var listAtag = document.getElementsByTagName("a");

                    if (!listAtag || listAtag.length == 0) {
                        this.logMess("No A tag in page...");
                        return;
                    }

                    this.initConfig.floorPrice = isNaN(parseFloat(this.initConfig.floorPrice)) ? 0 : parseFloat(this.initConfig.floorPrice); // this.initConfig.dynamicFloor = isNaN(parseFloat(this.initConfig.dynamicFloor)) ? 0 : parseFloat(this.initConfig.dynamicFloor);

                    this.curFloorObj = null; // Current floor price obj after requestbid | price, type

                    this.initConfig.isInit = false; // Init Status: true -> succ

                    this.initConfig.frequencyCaps = 1; // this.initConfig.frequencyCaps || 1; // gg 1h | Frequency Ads: 1h, 2h, 3h show 1 time
                    // Check Time to show Interstitial

                    var isAvailable = this.availableTimeShowAds(this.initConfig.frequencyCaps);

                    if (!isAvailable) {
                        this.logMess("Time to show intersitial Ads is over...");
                        return;
                    }

                    if (typeof Storage != "undefined" && localStorage.getItem("__lsv__")) {
                        this.logMess("Interstitial GG actived...");
                        return;
                    }

                    if (this.interstitialInited) {
                        this.logMess("Interstitial inited...");
                        return;
                    } // Setting Final


                    this.adSlot = "".concat(this.initConfig.adSlot);
                    this.interstitialSetting = {}; // All Ads Params

                    this.bidManager = null;
                    this.ggTagSlot = null; // googletag

                    this.curBidWin = null; // Current Bid Win

                    this.isAdsReady = false; // Check Ads is have

                    this.isGGWin = false; // true: GG win

                    this.showAdByGoogle = false; // true: GG win => auto render ads gg

                    this.timerRefreshAds = null; // Auto Refresh Ads

                    this.adRefreshTime = 30 * 1000; // 30s

                    this.timeExpiredAds = null; // Time expired Ads response
                    // All Element

                    this.adsPlaceholderWrapper = null;
                    this.adsPlaceholder = null;
                    this.viewPortDetect = null;
                    this.isRequestModeDFP = !Configs.gbk && this.initConfig.dfpAdUnit ? true : false;
                    this.adUnitPath = null;
                    this.interstitialInited = false;
                    this.isStyleCss = false;
                    this.init();
                    this.eventListener();
                }

                createClass_default()(Interstitial, [{
                    key: "eventListener",
                    value: function eventListener() {
                        _addEventListener("INTERSTITIAL_READY_RENDER_AD", this.styleShowAds.bind(this));
                    } // Init View + Bids Manager

                }, {
                    key: "init",
                    value: function init() {
                        var _this = this;

                        this.createAdsWrapper(); // Add event listener click on adPlacement

                        var arrHref = ['', '#', 'javascript:;', 'javascript:void(0);'];
                        var listAtag = document.getElementsByTagName("a");

                        var _loop = function _loop(i) {
                            var atag = listAtag[i];

                            if (atag.getAttribute('target') !== "_blank" && !arrHref.includes(atag.getAttribute("href"))) {
                                atag.addEventListener("click", function (e) {
                                    _this.logMess("User clicked to show Ads");

                                    if (_this.showAdByGoogle) {
                                        _this.logMess("Show Ads DFP. " + _this.adSlot);

                                        setTimeout(function () {
                                            return _this.setCookie(_this.initConfig.frequencyCaps);
                                        }, 500);
                                        return;
                                    } // Check ads expired time


                                    _this.initConfig.href = atag.getAttribute("href");
                                    e.preventDefault();

                                    if (_this.initConfig.isInit && _this.isAdsReady) {
                                        if (_this.curBidWin) {
                                            _this.showAds();
                                        } else {
                                            // gg not win => show ads demand
                                            // this.showAds();
                                            _this.redirectAfterAds(false);
                                        }
                                    } else {
                                        _this.logMess("Ads is not ready.");

                                        _this.redirectAfterAds(false);
                                    }
                                });
                            }
                        };

                        for (var i = 0; i < listAtag.length; i++) {
                            _loop(i);
                        }

                        this.initBidManager();
                        this.interstitialInited = true;
                    }
                }, {
                    key: "createAdsWrapper",
                    value: function createAdsWrapper() {
                        // init size
                        var _this$getAdsSize = this.getAdsSize(),
                            _this$getAdsSize2 = slicedToArray_default()(_this$getAdsSize, 2),
                            wrapperWidth = _this$getAdsSize2[0],
                            wrapperHeight = _this$getAdsSize2[1];

                        this.interstitialSetting = {
                            href: this.initConfig.href,
                            isBanner: false,
                            adSlot: this.adSlot,
                            adsPlaceholderWrapperID: "".concat(this.adSlot, "_interstitial_wrapper"),
                            // Size Ads
                            wrapperWidth: wrapperWidth,
                            wrapperHeight: wrapperHeight,
                            adsPlacementWrapperID: "".concat(this.adSlot, "_interstitial_placement_wrapper"),
                            adsPlacementWrapper: utlis_mobileDetect() ? "adsWrapperMobile" : "adsWrapperDesktop",
                            adsPlacementWrapperStyle: utlis_mobileDetect() ? "" : "style=\"width: ".concat(wrapperWidth, "px; height: ").concat(wrapperHeight + 50, "px;\""),
                            topBtnAds: utlis_mobileDetect() ? "topBtnAds" : '',
                            // Title
                            titleStyle: "style=\"text-decoration: none; color: ".concat(utlis_mobileDetect() ? '#fff' : '#5F6368', "\" "),
                            titleLink: "//".concat(Configs.brandHomepage, "/?ref=").concat(window.location.hostname),
                            titleText: Configs.brandName,
                            adsBtnCloseID: "".concat(this.adSlot, "_interstitial_close"),
                            adsBtnReportID: "".concat(this.adSlot, "_interstitial_report"),
                            adsByID: "".concat(this.adSlot, "_interstitial_by"),
                            isShowFeedback: false,
                            // true -> show feedback | false -> hide feedback
                            adsFeedbackID: "".concat(this.adSlot, "_interstitial_feedback"),
                            adsFeedbackStyle: "style=\"width: ".concat(utlis_mobileDetect() ? '100%' : wrapperWidth + "px", "; height: ").concat(utlis_mobileDetect() ? '' : wrapperHeight + "px", ";\""),
                            // Ads ID
                            adsContentWrapperID: "".concat(this.adSlot, "_interstitial_content_wrapper"),
                            adsContentID: "".concat(this.adSlot, "_interstitial_content"),
                            // Ads Content
                            adsContentBannerStyle: utlis_mobileDetect() ? "position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);" : "margin-top: 20px;" + "box-shadow:0px 10px 22px rgba(0,0,0,0.65)"
                        }; // Insert Render to body

                        document.body.insertAdjacentHTML("beforeend", handleBarsCustom(template_default.a, this.interstitialSetting)); // Ads Placeholder:

                        this.adsPlaceholderWrapper = document.getElementById(this.interstitialSetting.adsPlaceholderWrapperID);
                        this.addHandlerController();
                        createInfoDebugOverlay(this.adSlot);
                        this.hideAds();
                    }
                }, {
                    key: "addHandlerController",
                    value: function addHandlerController() {
                        var _this2 = this;

                        // Close Event
                        var closeAdsBtn = document.getElementById(this.interstitialSetting.adsBtnCloseID);

                        if (closeAdsBtn) {
                            closeAdsBtn.addEventListener("click", function () {
                                var isSetCookie = _this2.interstitialSetting.isBanner ? false : true;

                                _this2.redirectAfterAds(isSetCookie);
                            });
                        } // Background Event = close event


                        if (this.adsPlaceholderWrapper) {
                            this.adsPlaceholderWrapper.addEventListener("click", function (e) {
                                if (!document.getElementById(_this2.interstitialSetting.adsPlacementWrapperID).contains(e.target)) {
                                    var isSetCookie = _this2.interstitialSetting.isBanner ? false : true;

                                    _this2.redirectAfterAds(isSetCookie);
                                }
                            });
                        } // Event show Feedback


                        var reportAdsBtn = document.getElementById(this.interstitialSetting.adsBtnReportID);

                        if (reportAdsBtn) {
                            reportAdsBtn.addEventListener("click", function () {
                                // Show Feedback Form
                                _this2.interstitialSetting.isShowFeedback = true;
                                var feedbackAdsID = document.getElementById(_this2.interstitialSetting.adsFeedbackID);
                                if (feedbackAdsID) feedbackAdsID.style.display = "block";
                            });
                        } // Event Close Feedback (click on background)


                        var adsFeedbackIDWrapper = document.getElementById(this.interstitialSetting.adsFeedbackID);
                        adsFeedbackIDWrapper.addEventListener('click', function (e) {
                            if (!document.getElementById("pp_interstitial_survey").contains(e.target)) {
                                // Hide Feedback Form
                                _this2.interstitialSetting.isShowFeedback = false;
                                var feedbackID = document.getElementById(_this2.interstitialSetting.adsFeedbackID);
                                if (feedbackID) feedbackID.style.display = "none";
                            }
                        }); // Event for item feedback

                        var itemfb = document.getElementsByClassName("itemfb");
                        Array.from(itemfb).forEach(function (item, index) {
                            item.addEventListener('click', function () {
                                // Hide Feedback Form
                                var feedbackID = document.getElementById(_this2.interstitialSetting.adsFeedbackID);
                                if (feedbackID) feedbackID.style.display = "none"; // Send feedback

                                var bidder = _this2.curBidWin;

                                if (bidder) {
                                    var obj = {
                                        adslotId: _this2.adSlot,
                                        adFormat: "interstitial_" + bidder.mediaType,
                                        reason: item.getAttribute('data-reason')
                                    };

                                    _this2.logMess(obj); // sendReportOfUsers(bidder, obj);

                                }

                                setTimeout(function () {
                                    return _this2.redirectAfterAds();
                                }, 500);
                            });
                        });
                    }
                }, {
                    key: "initBidManager",
                    value: function initBidManager() {
                        var _this3 = this;

                        this.logMess("Init BidManger"); // Check Request to DFP or Not: dfpAdUnit != null && != "" -> request (Create Listener to Handle Event)

                        if (this.isRequestModeDFP) this.createGoogleTagListenerHandle();
                        var bannerSizeAval = this.getBannerSizeAvalible();

                        if (!bannerSizeAval) {
                            this.logMess("Banner size is Empty.");
                            return;
                        }

                        var adUnitList = []; // Bid Banner

                        this.initConfig.adunitBanner.mediaTypes = {
                            banner: {
                                sizes: bannerSizeAval
                            }
                        }; // Add ortb2Imp

                        if (!this.initConfig.adunitBanner.ortb2Imp) {
                            this.initConfig.adunitBanner.ortb2Imp = {
                                instl: 1
                            };
                        }

                        adUnitList.push(this.initConfig.adunitBanner); // Check Ad In Out Of View

                        this.viewPortDetect = newViewPortDetect(this.adsPlaceholderWrapper, {
                            threshold: [51]
                        }, false);
                        this.viewPortDetect.inViewPort(function () {
                            // this.logMess(`AdSlot ${this.adSlot} - inView.`);
                            if (_this3.timerRefreshAds) _this3.timerRefreshAds.resume();
                        });
                        this.viewPortDetect.outViewPort(function () {
                            // this.logMess(`AdSlot ${this.adSlot} - outView.`);
                            if (_this3.timerRefreshAds) _this3.timerRefreshAds.pause();
                        });
                        var adUnitCode = this.initConfig.adunitBanner.code;

                        var _getFloorTest = getFloorTest(this.initConfig.floorTest, adUnitCode),
                            _getFloorTest2 = slicedToArray_default()(_getFloorTest, 2),
                            floorTest = _getFloorTest2[0],
                            testCaseId = _getFloorTest2[1]; // Create BidManger


                        this.bidManager = new helper_BidManager({
                            slotId: this.adSlot,
                            tagId: this.initConfig.zid,
                            floorPrice: this.initConfig.floorPrice,
                            dynamicFloor: getDynamicFloor(this.initConfig.dynamicFloor, adUnitCode),
                            abTestFloorId: this.initConfig.abTestId,
                            floorTest: floorTest,
                            testTime: this.initConfig.timeTest,
                            testCaseId: testCaseId,
                            adUnits: adUnitList,
                            adWidth: this.interstitialSetting.wrapperWidth,
                            adHeight: this.interstitialSetting.wrapperHeight,
                            tagWidth: this.initConfig.w ? this.initConfig.w : 1,
                            tagHeight: this.initConfig.h ? this.initConfig.h : 1,
                            viewPortDetect: this.viewPortDetect,
                            buildBannerFromNative: function buildBannerFromNative(bidWin) {
                                if (!bidWin) return;
                                return getNativeAd({
                                    adId: bidWin.adId,
                                    width: bidWin.size ? bidWin.width : _this3.initConfig.w,
                                    height: bidWin.size ? bidWin.height : _this3.initConfig.h,
                                    pubUrl: window.location.href
                                });
                            }
                        });
                        this.startNewAuction();
                    } // Request Bid + DFP + Render Ads

                }, {
                    key: "startNewAuction",
                    value: function startNewAuction() {
                        var _this4 = this;

                        if (this.interstitialSetting.userClose) return; // Check client size enough to init Ads

                        if (!this.checkClientSize()) {
                            this.logMess("Client's Width or Height dont have enough to show Ads.");
                            this.initAdRefreshTimer();
                            return;
                        }

                        if (this.initConfig.adunitBanner.bids == null || this.initConfig.adunitBanner.bids.length == 0) {
                            delete this.initConfig.adunitBanner.ortb2Imp;
                        }

                        this.logMess("Start New Auction: " + this.adSlot);
                        this.bidManager.requestBids(function (auctionIsEmptyBid, curFloorObj) {
                            _this4.curFloorObj = curFloorObj;
                            _this4.initConfig.isInit = true;

                            if (auctionIsEmptyBid && !_this4.isRequestModeDFP) {
                                _this4.logMess("Bid Response is Empty and Not request to DFP...");

                                _this4.initAdRefreshTimer();

                                return;
                            }

                            if (_this4.bidManager.bidResponses.length > 0) {
                                _this4.logMess("Have Bid Response.");

                                _this4.timeExpiredAds = Date.now();

                                _this4.processBids();
                            } else {
                                _this4.logMess("Bid Response is Empty...");

                                _this4.processBids();
                            }
                        });
                    }
                }, {
                    key: "processBids",
                    value: function processBids() {
                        this.logMess("BidManager Get Highest Bid");
                        this.curBidWin = this.bidManager.getHighestBid(this.initConfig.floorPrice);
                        var dfpAdUnitObj = this.isRequestModeDFP ? processDfpAdUnit(this.initConfig.dfpAdUnit) : null;

                        if (this.curBidWin) {
                            this.setupBannerAds();
                            this.processBannerAds(dfpAdUnitObj);
                        } else if (!this.curBidWin && dfpAdUnitObj) {
                            // Remove timer refresh ads when user click show ads
                            if (this.timerRefreshAds) {
                                this.timerRefreshAds.pause();
                                this.timerRefreshAds = null;
                            }

                            this.setupBannerAds();
                            this.processBannerAds(dfpAdUnitObj);
                        } else {
                            this.redirectAfterAds(false);
                        }
                    } // Banner Ads

                }, {
                    key: "setupBannerAds",
                    value: function setupBannerAds() {
                        this.interstitialSetting.isBanner = true;

                        var _this$getAdsSize3 = this.getAdsSize(true),
                            _this$getAdsSize4 = slicedToArray_default()(_this$getAdsSize3, 2),
                            wrapperWidth = _this$getAdsSize4[0],
                            wrapperHeight = _this$getAdsSize4[1];

                        var wBanner = this.curBidWin && this.curBidWin.width ? this.curBidWin.width : wrapperWidth;
                        var hBanner = this.curBidWin && this.curBidWin.height ? this.curBidWin.height : wrapperHeight;
                        this.interstitialSetting.wrapperWidth = wBanner;
                        this.interstitialSetting.wrapperHeight = hBanner; // Change size adsPlacementWrapperID

                        var adsPlacementWrapperID = document.getElementById(this.interstitialSetting.adsPlacementWrapperID);
                        adsPlacementWrapperID.style.cssText = utlis_mobileDetect() ? "width: 100%; height: 100%" : "min-width: ".concat(wBanner, "px; height: ").concat(hBanner + 35, "px;"); // Change css banner

                        var adsContentWrapperID = document.getElementById(this.interstitialSetting.adsContentWrapperID);
                        adsContentWrapperID.style.cssText = this.interstitialSetting.adsContentBannerStyle;
                    }
                }, {
                    key: "processBannerAds",
                    value: function processBannerAds(dfpAdUnitObj) {
                        if (dfpAdUnitObj) {
                            this.requestDFP(dfpAdUnitObj);
                        } else {
                            this.renderAds();
                        }
                    }
                }, {
                    key: "requestDFP",
                    value: function requestDFP(dfpAdUnitObj) {
                        var _this5 = this;

                        try {
                            this.logMess("Repuest to DFP: " + this.adSlot); // Define Slot + Add Target to DFP Slots

                            googletag.cmd.push(function () {
                                if (_this5.ggTagSlot) googletag.destroySlots([_this5.ggTagSlot]);
                                var bidWin = _this5.curBidWin; // Process currency

                                var _ref = bidWin ? processRealCpm(bidWin.cpm, dfpAdUnitObj) : processRealCpm(_this5.curFloorObj.price, dfpAdUnitObj),
                                    _ref2 = slicedToArray_default()(_ref, 2),
                                    realCPM = _ref2[0],
                                    granularityMultiplier = _ref2[1];

                                var dfpAdUnit = dfpAdUnitObj.dfpAdUnit ? dfpAdUnitObj.dfpAdUnit : "";
                                var adWidth = bidWin && bidWin.width ? bidWin.width : _this5.interstitialSetting.wrapperWidth;
                                var adHeight = bidWin && bidWin.height ? bidWin.height : _this5.interstitialSetting.wrapperHeight;
                                var adSize = [[parseInt(adWidth), parseInt(adHeight)]]; // Define a web interstitial ad slot.

                                _this5.ggTagSlot = googletag.defineOutOfPageSlot(dfpAdUnit, googletag.enums.OutOfPageFormat.INTERSTITIAL);

                                if (_this5.ggTagSlot) {
                                    if (Configs.safeFrame === "on") {
                                        _this5.ggTagSlot.setForceSafeFrame(true);
                                    }

                                    _this5.ggTagSlot.addService(googletag.pubads());

                                    _this5.ggTagSlot.googleTagRequestSizes = adSize; // dùng cho pixel đếm request bidder google

                                    var TARGET_KEYS = Interstitial_CONSTANTS.TARGET_KEYS;

                                    _this5.ggTagSlot.clearTargeting();

                                    _this5.ggTagSlot.setTargeting(TARGET_KEYS.ACCOUNT, _this5.initConfig.targetGoogleAccount ? _this5.initConfig.targetGoogleAccount : "");

                                    _this5.ggTagSlot.setTargeting(TARGET_KEYS.AD_SLOT, _this5.initConfig.zid);

                                    _this5.ggTagSlot.setTargeting(TARGET_KEYS.AD_WIDTH, adWidth);

                                    _this5.ggTagSlot.setTargeting(TARGET_KEYS.AD_HEIGHT, adHeight);

                                    _this5.ggTagSlot.setTargeting(TARGET_KEYS.PW_NETWORK, true);

                                    _this5.ggTagSlot.setTargeting(TARGET_KEYS.PW_LINE_ID, _this5.initConfig.targetLineId ? _this5.initConfig.targetLineId : "");

                                    _this5.ggTagSlot.setTargeting(TARGET_KEYS.PW_SLOT, _this5.adSlot);

                                    var targetAdSlot = _this5.initConfig.targetAdSlot || "";
                                    var targetAdSlotVal = _this5.curFloorObj.type != null ? "".concat(targetAdSlot, "_").concat(_this5.curFloorObj.abTestId, "_").concat(_this5.curFloorObj.type) : targetAdSlot;

                                    _this5.ggTagSlot.setTargeting(TARGET_KEYS.TARGET_ADSLOT, targetAdSlotVal);

                                    if (bidWin) {
                                        var ggBidAdj = _this5.initConfig.googleBidAdjustment ? parseFloat(_this5.initConfig.googleBidAdjustment) : 1;
                                        bidWin.adserverTargeting[TARGET_KEYS.PRICE_BUCKET] = getCustomAPDPB(bidWin.mediaType, realCPM, granularityMultiplier, ggBidAdj);
                                        adserverTargeting(bidWin, _this5.ggTagSlot);

                                        _this5.ggTagSlot.setTargeting(TARGET_KEYS.AD_ID, "");

                                        pushInfoDebugOverlay(_this5.adSlot, bidWin);
                                    } else {
                                        if (realCPM > 0) {
                                            _this5.ggTagSlot.setTargeting(TARGET_KEYS.PRICE_BUCKET, getCustomAPDPB("banner", realCPM, granularityMultiplier, 1));
                                        }

                                        _this5.ggTagSlot.setTargeting(TARGET_KEYS.IS_EMPTY_ADS, "true");
                                    } // Request to DFP


                                    googletag.pubads().refresh([_this5.ggTagSlot]);
                                } else {
                                    _this5.logMess("Page or device does not support interstitials.");

                                    _this5.renderAds();
                                }
                            });
                        } catch (e) {
                            this.renderAds();
                            captureException(e, "[interstitial - requestDFP Fail]");
                        }
                    }
                }, {
                    key: "renderAds",
                    value: function renderAds() {
                        var adSlot = this.adSlot;

                        if (!this.curBidWin) {
                            this.logMess("BidWin is Empty: " + adSlot);
                            return;
                        }

                        try {
                            this.logMess("Start Render Banner for adSlot: ".concat(adSlot, "."));
                            this.isAdsReady = true; // Validate Size Ads

                            var bidWin = this.curBidWin;
                            var adWidth = bidWin && bidWin.width ? bidWin.width : this.interstitialSetting.wrapperWidth;
                            var adheight = bidWin && bidWin.height ? bidWin.height : this.interstitialSetting.wrapperHeight;
                            var adSlotIdWrapper = document.getElementById(this.interstitialSetting.adsContentID);
                            adSlotIdWrapper.style.cssText += "height: ".concat(adheight, "px;");
                            _renderAd(bidWin, adSlotIdWrapper, adSlot, adWidth, adheight);
                            pushInfoDebugOverlay(adSlot, bidWin);
                        } catch (e) {
                            this.logMess(e);
                        }
                    }
                }, {
                    key: "createGoogleTagListenerHandle",
                    value: function createGoogleTagListenerHandle() {
                        var _this6 = this;

                        var adSlot = this.adSlot;
                        this.logMess("Create GoogleTag ListenerHandle: " + adSlot);
                        var dfpAdUnit = this.initConfig.dfpAdUnit || null;
                        var timeoutId = null;
                        googletag.cmd.push(function () {
                            googletag.pubads().setTargeting("hb_domain", Configs.domainName);
                            googletag.pubads().enableSingleRequest();
                            googletag.enableServices();
                            googletag.pubads().addEventListener('slotOnload', function (event) {
                                if (_this6.ggTagSlot === event.slot) {
                                    _this6.logMess("slotOnload: " + event.slot.getSlotElementId());

                                    _this6.isAdsReady = true;
                                }
                            }); // Xử lý render lại các request lên dfp không trả về response

                            googletag.pubads().addEventListener('slotRequested', function (event) {
                                var adUnitSlot = event.slot.getAdUnitPath();
                                if (adUnitSlot != dfpAdUnit) return;
                                var slotId = event.slot.getSlotElementId();
                                _this6.adUnitPath = slotId;

                                _this6.logMess("slotRequested: " + slotId);

                                timeoutId = setTimeout(function () {
                                    _this6.logMess("DFP request timeout on slotId ".concat(slotId));

                                    _this6.isAdsReady = false;
                                }, 1000);
                            });
                            googletag.pubads().addEventListener('slotResponseReceived', function (event) {
                                var adUnitSlot = event.slot.getAdUnitPath();
                                if (adUnitSlot != dfpAdUnit) return;
                                var slotId = event.slot.getSlotElementId();

                                _this6.logMess("slotResponseReceived: " + slotId);

                                clearTimeout(timeoutId);
                            });
                            googletag.pubads().addEventListener('slotRenderEnded', function (event) {
                                var adUnitSlot = event.slot.getAdUnitPath();
                                if (adUnitSlot != dfpAdUnit) return;
                                var slotId = event.slot.getSlotElementId();

                                _this6.logMess("slotRenderEnded: " + slotId);

                                _this6.logMess(event);

                                try {
                                    var issetGoogleAds = event.lineItemId == null && event.isEmpty == false ? true : false; // khi có ads của demand hoặc ads của google được render

                                    if (event.lineItemId != null && event.slot.getTargeting(Interstitial_CONSTANTS.TARGET_KEYS.IS_EMPTY_ADS).indexOf("true") === -1 || issetGoogleAds) {
                                        if (issetGoogleAds) {
                                            _this6.logMess("ADX WIN ".concat(slotId, " ======"));

                                            var dataBid = {
                                                adId: "unknown from Adx",
                                                bidder: "Adx",
                                                creativeId: "unknown from Adx"
                                            };
                                            pushInfoDebugOverlay(adSlot, dataBid); // gg win -> add bid to bid response

                                            if (_this6.curBidWin) {
                                                _this6.bidManager.addBidToArray(_this6.curBidWin);

                                                _this6.curBidWin = null;
                                            }

                                            _this6.isGGWin = true;
                                            _this6.showAdByGoogle = true;
                                        } else {
                                            _this6.logMess("AD Render ".concat(slotId, " ======"));

                                            if (event.sourceAgnosticCreativeId && !Configs.creativeIds.includes(event.sourceAgnosticCreativeId)) {
                                                var dataBid = {
                                                    adId: "unknown",
                                                    bidder: "Direct Campain",
                                                    creativeId: "unknown"
                                                };
                                                pushInfoDebugOverlay(adSlot, dataBid);
                                            } else {
                                                _this6.logMess("Render Interstitial with POSTBID");

                                                _this6.renderAds();

                                                if (_this6.adUnitPath) {
                                                    var gptElem = document.getElementById(_this6.adUnitPath);

                                                    if (gptElem) {
                                                        gptElem.remove();
                                                    }
                                                }

                                                if (_this6.ggTagSlot) {
                                                    googletag.destroySlots([_this6.ggTagSlot]);
                                                }
                                            }
                                        }

                                        _this6.isAdsReady = true; // this.onChangeElement();
                                    } // khi bid win là special bid


                                    if (event.lineItemId != null && event.slot.getTargeting(Interstitial_CONSTANTS.TARGET_KEYS.SPECIAL_BID).indexOf("true") !== -1 && Configs.creativeIds.includes(event.sourceAgnosticCreativeId)) {
                                        _this6.logMess("Special Bid win on slotId ".concat(slotId));

                                        _this6.renderAds();

                                        return;
                                    } // khi dfp response empty, hoặc không empty nhưng cũng không có ads của demand


                                    if (event.isEmpty === true || event.lineItemId != null && event.slot.getTargeting(Interstitial_CONSTANTS.TARGET_KEYS.IS_EMPTY_ADS).indexOf("true") !== -1) {
                                        _this6.logMess("DFP Ads empty on slotId ".concat(slotId));

                                        _this6.renderAds();
                                    }
                                } catch (e) {
                                    captureException(e, "[interstitial - INIT_SCRIPT]");
                                }
                            });
                        });
                    }
                }, {
                    key: "styleShowAds",
                    value: function styleShowAds() {
                        try {
                            if (!this.showAdByGoogle || !this.adUnitPath || this.isStyleCss) {
                                return;
                            }

                            this.isStyleCss = true;
                            var gptID = this.adUnitPath;

                            if (!gptID) {
                                return;
                            }

                            var cmID = gptID.replaceAll("gpt_unit_", "");
                            var containerId = "google_ads_iframe_".concat(cmID, "__container__");
                            var iframmeId = "google_ads_iframe_".concat(cmID);
                            var ggAdCtn = document.getElementById(containerId);

                            if (ggAdCtn) {
                                ggAdCtn.style.width = "100vw";
                                ggAdCtn.style.height = "100vh";
                                var iframeGG = document.getElementById(iframmeId);

                                if (iframeGG) {
                                    iframeGG.style.width = "100vw";
                                    iframeGG.style.height = "100vh";
                                }
                            }
                        } catch (error) {}
                    }
                }, {
                    key: "onChangeElement",
                    value: function onChangeElement() {
                        try {
                            if (!this.adUnitPath) {
                                return;
                            }

                            var gptID = this.adUnitPath;

                            if (!gptID) {
                                return;
                            }

                            var cmID = gptID.replaceAll("gpt_unit_", "");
                            var containerId = "google_ads_iframe_".concat(cmID, "__container__");
                            var ggAdCtn = document.getElementById(containerId);
                            var config = {
                                attributes: true,
                                childList: true,
                                subtree: true
                            };

                            var callback = function callback(mutationsList, observer) {
                                var _iterator = _createForOfIteratorHelper(mutationsList),
                                    _step;

                                try {
                                    for (_iterator.s(); !(_step = _iterator.n()).done;) {
                                        var mutation = _step.value;

                                        if (mutation.type === 'attributes' && mutation.attributeName == "style") {
                                            vilog('[Interstitial] The ' + mutation.attributeName + ' attribute was modified.');

                                            _eventFire("INTERSTITIAL_READY_RENDER_AD");
                                        }
                                    }
                                } catch (err) {
                                    _iterator.e(err);
                                } finally {
                                    _iterator.f();
                                }
                            };

                            var observer = new MutationObserver(callback);
                            observer.observe(ggAdCtn, config);
                        } catch (error) {}
                    } // Ads Render Handle

                }, {
                    key: "addRenderAdsCss",
                    value: function addRenderAdsCss() {
                        if (!this.adsPlaceholder) return;
                        this.adsPlaceholder.style.cssText = "z-index: 999999!important; position: absolute!important; width: 100%!important; height: 100%!important; top: 0!important; left: 0!important; background: #000!important; display:block!important;padding:0!important;margin:0!important";
                    }
                }, {
                    key: "removeRenderAds",
                    value: function removeRenderAds() {
                        this.adsPlaceholder.innerHTML = "";
                        this.adsPlaceholder.style.cssText = "";
                    } // Refresh + show hide ads

                }, {
                    key: "initAdRefreshTimer",
                    value: function initAdRefreshTimer() {
                        var _this7 = this;

                        var isReset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

                        if (isReset) {
                            if (this.timerRefreshAds) this.timerRefreshAds.pause();
                            this.timerRefreshAds = null;
                        }

                        if (this.timerRefreshAds) return;
                        this.logMess("Init AdsRefreshTimer for adSlot ".concat(this.adSlot, " call after ").concat(this.adRefreshTime / 1000, "s"));
                        this.timerRefreshAds = new TimerDelay(function () {
                            _this7.logMess("AdRefresh timeout on adSlot ".concat(_this7.adSlot, " at time is ").concat(Math.floor(Date.now() / 1000), " => Start new Auction."));

                            _this7.timerRefreshAds.pause();

                            _this7.timerRefreshAds = null;

                            _this7.startNewAuction();
                        }, this.adRefreshTime);
                        this.timerRefreshAds.start();
                    }
                }, {
                    key: "showAds",
                    value: function showAds() {
                        var _this8 = this;

                        if (!this.adsPlaceholderWrapper) return;
                        this.adsPlaceholderWrapper.classList.remove("pubpower_hidden");
                        this.adsPlaceholderWrapper.classList.add("pubpower_show");
                        setTimeout(function () {
                            return _this8.setCookie(_this8.initConfig.frequencyCaps);
                        }, 500);
                    }
                }, {
                    key: "hideAds",
                    value: function hideAds() {
                        var isHide = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                        if (!this.adsPlaceholderWrapper) return;
                        this.adsPlaceholderWrapper.classList.remove("pubpower_show");
                        this.adsPlaceholderWrapper.classList.add("pubpower_hidden");
                    }
                }, {
                    key: "getBannerSizeAvalible",
                    value: function getBannerSizeAvalible() {
                        var _this9 = this;

                        var listMobileSize = [[320, 480], [480, 320], [768, 1024], [1024, 768]];
                        var listDesktopSize = [[320, 480], [300, 250], [336, 280]];
                        var listSize = utlis_mobileDetect() ? listMobileSize : listDesktopSize;
                        var sizeAvailable = [];
                        listSize.forEach(function (size) {
                            if (_this9.checkClientSize(size[0], size[1])) {
                                sizeAvailable.push(size);
                            }

                            ;
                        });
                        return sizeAvailable;
                    }
                }, {
                    key: "getAdsSize",
                    value: function getAdsSize() {
                        var _this10 = this;

                        var isBanner = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

                        // const isPortrait = () => window.innerHeight > window.innerWidth;
                        var max = function max(array) {
                            return Math.max.apply(null, array);
                        };

                        var listMobileSize = [[320, 480], [480, 320], [768, 1024], [1024, 768]];
                        var listDesktopSize = [[320, 480], [300, 250], [336, 280]];
                        var wrapperWidth = null;
                        var wrapperHeight = null;

                        if (isBanner) {
                            // Get max size for banner
                            var listSize = utlis_mobileDetect() ? listMobileSize : listDesktopSize;
                            var sizeAvailable = [];
                            var listW = []; // All width to available to get max

                            listSize.forEach(function (size) {
                                if (_this10.checkClientSize(size[0], size[1])) {
                                    listW.push(size[0]);
                                    sizeAvailable.push(size);
                                }

                                ;
                            });
                            var maxW = max(listW);
                            var sizeMax = sizeAvailable.filter(function (size) {
                                return size[0] == maxW;
                            })[0];
                            wrapperWidth = sizeMax ? sizeMax[0] : sizeAvailable[0][0];
                            wrapperHeight = sizeMax ? sizeMax[1] : sizeAvailable[0][1];
                        } else {
                            var w = document.documentElement.clientWidth;
                            wrapperWidth = utlis_mobileDetect() ? w <= 480 ? Math.round(w * 0.9) : Math.round(w * 0.5) : 410;
                            wrapperHeight = Math.round(parseInt(wrapperWidth * 0.5625));
                        }

                        return [wrapperWidth, wrapperHeight];
                    }
                }, {
                    key: "checkClientSize",
                    value: function checkClientSize(w, h) {
                        var wCheck = w || this.interstitialSetting.wrapperWidth;
                        var hCheck = h || this.interstitialSetting.wrapperHeight;

                        if (window.innerWidth < wCheck || window.innerHeight < hCheck) {
                            return false;
                        }

                        return true;
                    }
                }, {
                    key: "redirectAfterAds",
                    value: function redirectAfterAds() {
                        var isSetCookie = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
                        this.logMess("Link redirect: " + this.initConfig.href);

                        if (this.timerRefreshAds) {
                            this.timerRefreshAds.pause();
                            this.timerRefreshAds = null;
                        }

                        if (this.viewPortDetect) {
                            this.viewPortDetect.clear();
                            this.viewPortDetect = null;
                        } // Set new cookie time for next ads


                        if (isSetCookie) this.setCookie(this.initConfig.frequencyCaps);
                        if (this.initConfig.href) window.location.href = this.initConfig.href;
                    } // Other

                }, {
                    key: "setCookie",
                    value: function setCookie(frequencyCaps) {
                        var cookieName = "inter_stime";
                        var ONE_HOUR = 60 * 60 * 1000;
                        /* ms */

                        var expiredTimes = frequencyCaps * ONE_HOUR;
                        var d = new Date();
                        d.setTime(d.getTime() + expiredTimes);
                        var expires = "expires=" + d.toUTCString();
                        var cookie = {
                            frequency: parseInt(frequencyCaps),
                            expiredTime: d.getTime()
                        };
                        document.cookie = cookieName + "=" + JSON.stringify(cookie) + ";" + expires + ";path=/";
                    }
                }, {
                    key: "availableTimeShowAds",
                    value: function availableTimeShowAds(frequencyCaps) {
                        var keyCookie = "inter_stime";

                        try {
                            var dataCookie = getCookie(keyCookie);

                            if (dataCookie) {
                                dataCookie = JSON.parse(dataCookie); // Check if change frequency on server + frequency changed < current frequency -> reset cookie

                                if (dataCookie.frequency != frequencyCaps) {
                                    this.setCookie(frequencyCaps);
                                    return true;
                                } else {
                                    // Check expiredTime
                                    if (dataCookie && dataCookie.expiredTime && dataCookie.expiredTime < Date.now()) {
                                        return true;
                                    } else {
                                        return false;
                                    }
                                }
                            } else {
                                // Frist Time Init
                                return true;
                            }
                        } catch (e) {
                            this.logMess("Error: " + e);
                            return false;
                        }
                    }
                }, {
                    key: "logMess",
                    value: function logMess(mess) {
                        if (typeof_default()(mess) === "object") {
                            vilog("".concat(JSON.stringify(mess)), "Interstitial");
                        } else {
                            vilog("".concat(mess), "Interstitial");
                        }
                    }
                }]);

                return Interstitial;
            }();


// EXTERNAL MODULE: ./src/plugins/template/video/html/stickybanner/template.html
            var stickybanner_template = __webpack_require__(40);
            var stickybanner_template_default = /*#__PURE__*/__webpack_require__.n(stickybanner_template);

// EXTERNAL MODULE: ./src/plugins/template/video/html/stickybanner/desktop_adsclose.html
            var desktop_adsclose = __webpack_require__(41);
            var desktop_adsclose_default = /*#__PURE__*/__webpack_require__.n(desktop_adsclose);

// EXTERNAL MODULE: ./src/plugins/template/video/html/stickybanner/mobile_adsclose.html
            var mobile_adsclose = __webpack_require__(42);
            var mobile_adsclose_default = /*#__PURE__*/__webpack_require__.n(mobile_adsclose);

// EXTERNAL MODULE: ./src/plugins/template/video/html/stickybanner/mobile/button_arrow_down.html
            var button_arrow_down = __webpack_require__(43);
            var button_arrow_down_default = /*#__PURE__*/__webpack_require__.n(button_arrow_down);

// EXTERNAL MODULE: ./src/plugins/template/video/html/stickybanner/mobile/button_arrow_up.html
            var button_arrow_up = __webpack_require__(44);
            var button_arrow_up_default = /*#__PURE__*/__webpack_require__.n(button_arrow_up);

// CONCATENATED MODULE: ./src/plugins/StickyBanner.js















            var StickyBanner_CONSTANTS = __webpack_require__(5);

            var StickyBanner_StickyBanner = /*#__PURE__*/function () {
                function StickyBanner(adSlot) {
                    classCallCheck_default()(this, StickyBanner);

                    if (!adSlot) {
                        this.logMess("adSlot is Empty...");
                        return;
                    }

                    var isExit = document.getElementsByClassName("power_stickybanner__wrapper")[0];

                    if (isExit) {
                        this.logMess("StickyBanner is already exist...");
                        return;
                    } // Init Config


                    this.initConfig = Configs.adsTags.stickyBanner[adSlot];

                    if (!this.initConfig) {
                        this.logMess("Config is Empty...");
                        return;
                    }

                    this.initConfig.floorPrice = isNaN(parseFloat(this.initConfig.floorPrice)) ? 0 : parseFloat(this.initConfig.floorPrice); // this.initConfig.dynamicFloor = isNaN(parseFloat(this.initConfig.dynamicFloor)) ? 0 : parseFloat(this.initConfig.dynamicFloor);

                    this.curFloorObj = null; // Current floor price obj after requestbid | price, type

                    this.initConfig.isInit = false; // Init Status: true -> succ

                    this.initConfig.hideIconBrand = false; // Icon + close btn corner
                    // StickyBanner Setting Final

                    this.adSlot = "".concat(this.initConfig.adSlot);
                    this.stickyBannerSetting = {}; // All Ads Params

                    this.bidManager = null;
                    this.ggTagSlot = null; // googletag

                    this.curBidWin = null; // Current Bid Win

                    this.adRefreshTime = 30; // 30s

                    this.totalRequestDfp = 0; // Total Request to DFP (Max: 5)

                    this.maxRequestDFP = 5;
                    this.numberRequestBid = 0;
                    this.maxRequestNoBid = 20;
                    this.readyRenderAds = false; // All StickyBanner Element

                    this.adsPlaceholder = null;
                    this.viewPortDetect = null;
                    this.bodyMarginTop = 0;
                    this.inActiveViewWorker = null;
                    this.adCounter = 0;
                    this.init();
                } // Init View + Bids Manager


                createClass_default()(StickyBanner, [{
                    key: "init",
                    value: function init() {
                        if (!this.initConfig) return;
                        if (!this.initConfig.adunit) return;
                        if (this.initConfig.isInit) return;
                        this.initConfig.isInit = true; // CSS Banner Position

                        var stickyBannerPos = {
                            "top": "power_top",
                            // Mobile
                            "bottom": "power_bottom",
                            // Mobile
                            "bottom_center": "power_bottom_center",
                            // Desktop
                            "bottom_left": "power_bottom_left",
                            // Desktop
                            "bottom_right": "power_bottom_right",
                            // Desktop
                            "top_center": "power_top_center" // Desktop

                        }; // Setting

                        var iconAndCloseSetting = {
                            tempHtml: screen.width > 768 ? desktop_adsclose_default.a : mobile_adsclose_default.a,
                            linePosition: this.initConfig.position == "top" ? "power_line_top" : "",
                            // css mobile
                            btnClosePosition: this.initConfig.position == "top" ? "power_adsclose_top" : "power_adsclose_bottom",
                            // css mobile
                            adsBtnCloseID: this.adSlot + "_powerStickyBannerClose",
                            hideIconBrand: "power_hiden",
                            // this.initConfig.hideIconBrand ? "power_hidden" : "",
                            iconBrand: "//" + Configs.staticDomain + "/media/icon/vi-logo.svg",
                            linkBrandRP: "//" + Configs.brandHomepage + "?ref=" + window.location.hostname,
                            hideBtnClose: !this.initConfig.closeBtn ? "power_hiden" : "",
                            butttonArrowContent: screen.width <= 768 ? this.initConfig.position == "top" ? button_arrow_up_default.a : button_arrow_down_default.a : ""
                        };
                        this.stickyBannerSetting = {
                            adunit: this.initConfig.adunit,
                            adSlot: this.adSlot,
                            adSlotIdWrapper: this.adSlot,
                            // id for ads
                            adsPlaceholderWrapperID: "".concat(this.adSlot, "_stickybanner_wrapper"),
                            // adslot_typeads
                            // Size Ads
                            widthIframeAd: this.initConfig.adSize[0],
                            heightIframeAd: this.initConfig.adSize[1],
                            // Sticky Banner Position
                            bannerPosition: stickyBannerPos[this.initConfig.position],
                            // Setting + Render: Icon Brand + Btn Close
                            iconAndCloseWrapper: !utlis_mobileDetect() ? "power_adsclose_pc__wrapper power_adsclose_".concat(this.initConfig.position, " ").concat(iconAndCloseSetting.hideBtnClose) : this.initConfig.position == "top" ? "power_adsclose_mobile__wrapper power_adsclose_mobile_wrapper_top" : "power_adsclose_mobile__wrapper power_adsclose_mobile_wrapper_bottom",
                            iconBrandAndCloseHtml: handleBarsCustom(iconAndCloseSetting.tempHtml, iconAndCloseSetting),
                            iconAndCloseSetting: iconAndCloseSetting,
                            // User Click Close: true -> dont bid
                            userClose: false,
                            classWrapperAd: Configs.adClass
                        }; // Insert Render to body

                        document.body.insertAdjacentHTML("beforeend", handleBarsCustom(stickybanner_template_default.a, this.stickyBannerSetting));
                        createInfoDebugOverlay(this.adSlot); // Add Btn Close Handler

                        this.addBtnCloseHandler(); // Ads Placeholder:

                        this.adsPlaceholder = document.getElementById(this.stickyBannerSetting.adsPlaceholderWrapperID);
                        this.addPositionHide();
                        this.bodyMarginTop = document.body.style.marginTop;
                        this.initBidManager();
                    }
                }, {
                    key: "actionInView",
                    value: function actionInView() {
                        var _this = this;

                        this.logMess("AdSlot ".concat(this.adSlot, " - inView."));
                        this.inActiveViewWorker = setInterval(function () {
                            _this.adCounter++;

                            if (_this.adCounter == _this.adRefreshTime - 3) {
                                // thực hiện request bid trước khi replace ads 3 giây
                                _this.logMess("Refresh Bid -----------------");

                                _this.startNewAuction();
                            }

                            if (_this.adCounter == _this.adRefreshTime) {
                                _this.readyRenderAds = true;
                            }
                        }, 1000);
                    }
                }, {
                    key: "actionOutView",
                    value: function actionOutView() {
                        this.logMess("AdSlot ".concat(this.adSlot, " - outView."));
                        clearInterval(this.inActiveViewWorker);
                    }
                }, {
                    key: "initBidManager",
                    value: function initBidManager() {
                        var _this2 = this;

                        this.logMess("Init BidManger"); // Check Request to DFP or Not: dfpAdUnit != null && != "" -> request (Create Listener to Handle Event)

                        if (this.initConfig.dfpAdUnit) this.createGoogleTagListenerHandle(); // Check Ad In Out Of View

                        this.viewPortDetect = newViewPortDetect(this.adsPlaceholder, {
                            threshold: [51]
                        });
                        this.viewPortDetect.inViewPort(function () {
                            _this2.actionInView();
                        });
                        this.viewPortDetect.outViewPort(function () {
                            _this2.actionOutView();
                        });
                        var adUnitCode = this.stickyBannerSetting.adunit.code;

                        var _getFloorTest = getFloorTest(this.initConfig.floorTest, adUnitCode),
                            _getFloorTest2 = slicedToArray_default()(_getFloorTest, 2),
                            floorTest = _getFloorTest2[0],
                            testCaseId = _getFloorTest2[1]; // Create BidManger


                        this.bidManager = new helper_BidManager({
                            slotId: this.adSlot,
                            tagId: this.initConfig.zid,
                            floorPrice: this.initConfig.floorPrice,
                            dynamicFloor: getDynamicFloor(this.initConfig.dynamicFloor, adUnitCode),
                            abTestFloorId: this.initConfig.abTestId,
                            floorTest: floorTest,
                            testTime: this.initConfig.timeTest,
                            testCaseId: testCaseId,
                            adUnits: [this.stickyBannerSetting.adunit],
                            adWidth: this.initConfig.adSize[0],
                            adHeight: this.initConfig.adSize[1],
                            tagWidth: this.initConfig.w,
                            tagHeight: this.initConfig.h,
                            viewPortDetect: this.viewPortDetect,
                            buildBannerFromNative: function buildBannerFromNative(bidWin) {
                                if (!bidWin) return;
                                return getNativeAd({
                                    adId: bidWin.adId,
                                    width: bidWin.size ? bidWin.width : _this2.initConfig.adSize[0],
                                    height: bidWin.size ? bidWin.height : _this2.initConfig.adSize[1],
                                    pubUrl: window.location.href
                                });
                            }
                        });
                        this.startNewAuction();

                        if (Configs.clientTracking.isVisible) {
                            this.adCronjob = setInterval(this.adWorker.bind(this), 500);
                        }

                        _addEventListener("IS_VISIBLE", this.stickyBannerAdWorker.bind(this));

                        _addEventListener("IS_NOT_VISIBLE", this.stickyBannerAdWorker.bind(this));
                    }
                }, {
                    key: "adWorker",
                    value: function adWorker() {
                        if (this.stickyBannerSetting.userClose) {
                            return;
                        }

                        if (this.readyRenderAds == false) {
                            return;
                        }

                        this.readyRenderAds = false;
                        this.processBids();
                    }
                }, {
                    key: "stickyBannerAdWorker",
                    value: function stickyBannerAdWorker() {
                        if (Configs.clientTracking.isVisible) {
                            this.adCronjob = setInterval(function () {
                                this.adWorker();
                            }.bind(this), 500);
                        } else {
                            if (this.adCronjob) {
                                clearInterval(this.adCronjob);
                            }
                        }
                    } // Request Bid + DFP + Render Ads

                }, {
                    key: "startNewAuction",
                    value: function startNewAuction() {
                        var _this3 = this;

                        if (this.stickyBannerSetting.userClose) return;

                        if (this.numberRequestBid > this.maxRequestNoBid) {
                            if (this.adCronjob) {
                                clearInterval(this.adCronjob);
                            }

                            this.logMess("Limit request No bid");
                            return;
                        } // Check client size enough to init Ads


                        if (!this.checkClientSize()) {
                            this.logMess("Client's Width or Height dont have enough to show Ads.");
                            setTimeout(function () {
                                this.startNewAuction();
                            }.bind(this), 3000);
                            return;
                        }

                        this.logMess("Start New Auction: " + this.adSlot);
                        this.bidManager.requestBids(function (auctionIsEmptyBid, curFloorObj) {
                            _this3.curFloorObj = curFloorObj;
                            var isRequestDFP = !Configs.gbk && _this3.initConfig.dfpAdUnit ? true : false;

                            if (auctionIsEmptyBid && !isRequestDFP) {
                                _this3.logMess("Bid Response is Empty and Not request to DFP...");

                                setTimeout(function () {
                                    this.startNewAuction();
                                }.bind(_this3), 3000);
                                return;
                            }

                            _this3.readyRenderAds = true;
                        });
                        this.numberRequestBid++;
                    }
                }, {
                    key: "processBids",
                    value: function processBids() {
                        var isRequestDFP = !Configs.gbk && this.initConfig.dfpAdUnit ? true : false;
                        this.logMess("BidManager Get Highest Bid");
                        this.curBidWin = this.bidManager.getHighestBid();

                        if (isRequestDFP && this.totalRequestDfp <= this.maxRequestDFP) {
                            this.requestDFP();
                        } else {
                            this.renderAds();
                        }
                    }
                }, {
                    key: "requestDFP",
                    value: function requestDFP() {
                        var _this4 = this;

                        try {
                            this.logMess("Request to DFP: " + this.adSlot); // Define Slot + Add Target to DFP Slots

                            googletag.cmd.push(function () {
                                if (_this4.ggTagSlot) googletag.destroySlots([_this4.ggTagSlot]);
                                var bidWin = _this4.curBidWin; // Process currency

                                var dfpAdUnitObj = _this4.initConfig.dfpAdUnit ? processDfpAdUnit(_this4.initConfig.dfpAdUnit) : null;

                                var _ref = bidWin ? processRealCpm(bidWin.cpm, dfpAdUnitObj) : processRealCpm(_this4.curFloorObj.price, dfpAdUnitObj),
                                    _ref2 = slicedToArray_default()(_ref, 2),
                                    realCPM = _ref2[0],
                                    granularityMultiplier = _ref2[1];

                                var dfpAdUnit = dfpAdUnitObj.dfpAdUnit ? dfpAdUnitObj.dfpAdUnit : "";
                                var adWidth = bidWin && bidWin.width ? bidWin.width : _this4.stickyBannerSetting.widthIframeAd;
                                var adHeight = bidWin && bidWin.height ? bidWin.height : _this4.stickyBannerSetting.heightIframeAd;
                                var adSize = [[parseInt(adWidth), parseInt(adHeight)]];
                                _this4.ggTagSlot = googletag.defineSlot(dfpAdUnit, adSize, _this4.stickyBannerSetting.adSlotIdWrapper);

                                if (Configs.safeFrame === "on") {
                                    _this4.ggTagSlot.setForceSafeFrame(true);
                                }

                                _this4.ggTagSlot.addService(googletag.pubads());

                                _this4.ggTagSlot.googleTagRequestSizes = adSize; // dùng cho pixel đếm request bidder google

                                var TARGET_KEYS = StickyBanner_CONSTANTS.TARGET_KEYS;

                                _this4.ggTagSlot.clearTargeting();

                                _this4.ggTagSlot.setTargeting(TARGET_KEYS.ACCOUNT, _this4.initConfig.targetGoogleAccount ? _this4.initConfig.targetGoogleAccount : ""); // this.ggTagSlot.setTargeting(TARGET_KEYS.AD_SLOT, this.initConfig.zid);


                                _this4.ggTagSlot.setTargeting(TARGET_KEYS.AD_WIDTH, adWidth);

                                _this4.ggTagSlot.setTargeting(TARGET_KEYS.AD_HEIGHT, adHeight);

                                _this4.ggTagSlot.setTargeting(TARGET_KEYS.PW_NETWORK, true);

                                _this4.ggTagSlot.setTargeting(TARGET_KEYS.PW_LINE_ID, _this4.initConfig.targetLineId ? _this4.initConfig.targetLineId : "");

                                var targetAdSlot = _this4.initConfig.targetAdSlot || "";
                                var targetAdSlotVal = _this4.curFloorObj.type != null ? "".concat(targetAdSlot, "_").concat(_this4.curFloorObj.abTestId, "_").concat(_this4.curFloorObj.type) : targetAdSlot;

                                _this4.ggTagSlot.setTargeting(TARGET_KEYS.TARGET_ADSLOT, targetAdSlotVal);

                                if (bidWin) {
                                    var ggBidAdj = _this4.initConfig.googleBidAdjustment ? parseFloat(_this4.initConfig.googleBidAdjustment) : 1;
                                    bidWin.adserverTargeting[TARGET_KEYS.PRICE_BUCKET] = getCustomAPDPB(bidWin.mediaType, realCPM, granularityMultiplier, ggBidAdj);
                                    adserverTargeting(bidWin, _this4.ggTagSlot);
                                    pushInfoDebugOverlay(_this4.adSlot, bidWin);
                                } else {
                                    if (realCPM > 0) {
                                        _this4.ggTagSlot.setTargeting(TARGET_KEYS.PRICE_BUCKET, getCustomAPDPB("banner", realCPM, granularityMultiplier, 1));
                                    }

                                    _this4.ggTagSlot.setTargeting(TARGET_KEYS.IS_EMPTY_ADS, "true");
                                } // Request to DFP


                                googletag.pubads().refresh([_this4.ggTagSlot]);
                            });
                        } catch (e) {
                            this.renderAds();
                            captureException(e, "[StickyBanner - requestDFP Fail]");
                        }
                    }
                }, {
                    key: "renderAds",
                    value: function renderAds() {
                        var adSlot = this.adSlot;

                        if (!this.curBidWin) {
                            this.logMess("BidWin is Empty: " + adSlot);
                            this.hideAds();
                            this.clearChildAdContainer();
                            setTimeout(function () {
                                this.startNewAuction();
                            }.bind(this), 3000);
                            return;
                        }

                        this.logMess("Start Show Ad for adSlot: ".concat(adSlot, " - Time: ").concat(Math.floor(Date.now() / 1000)));
                        var adSlotIdWrapper = document.getElementById(this.stickyBannerSetting.adSlotIdWrapper);
                        var bidWin = this.curBidWin; // Validate Size Ads

                        var wAdsSlot = this.stickyBannerSetting.widthIframeAd;
                        var hAdsSlot = this.stickyBannerSetting.heightIframeAd;

                        if (bidWin.width != wAdsSlot || bidWin.height != hAdsSlot) {
                            this.logMess("BidWin size: ".concat(bidWin.width, "-").concat(bidWin.height, " incorrect with Ads size: ").concat(wAdsSlot, "-").concat(hAdsSlot));
                            this.curBidWin = null;
                            this.hideAds();
                            setTimeout(function () {
                                this.startNewAuction();
                            }.bind(this), 3000);
                            return;
                        }

                        var adWidth = bidWin.size ? bidWin.width : wAdsSlot;
                        var adheight = bidWin.size ? bidWin.height : hAdsSlot;
                        _renderAd(bidWin, adSlotIdWrapper, adSlot, adWidth, adheight);
                        this.renderAdComplete();
                        pushInfoDebugOverlay(adSlot, bidWin);
                    }
                }, {
                    key: "createGoogleTagListenerHandle",
                    value: function createGoogleTagListenerHandle() {
                        var _this5 = this;

                        var adSlot = this.adSlot; // this.stickyBannerSetting.adSlot;

                        this.logMess("Create GoogleTag ListenerHandle: " + adSlot);
                        var timeoutId = null;
                        googletag.cmd.push(function () {
                            googletag.pubads().setTargeting("hb_domain", Configs.domainName);
                            googletag.pubads().enableSingleRequest();
                            googletag.enableServices(); // Xử lý render lại các request lên dfp không trả về response

                            googletag.pubads().addEventListener('slotRequested', function (event) {
                                var slotId = event.slot.getSlotElementId();
                                if (slotId != adSlot) return;
                                timeoutId = setTimeout(function () {
                                    _this5.logMess("DFP request timeout on slotId ".concat(slotId));

                                    _this5.totalRequestDfp++;

                                    _this5.renderAds();
                                }, 3000);
                            });
                            googletag.pubads().addEventListener('slotResponseReceived', function (event) {
                                if (event.slot.getSlotElementId() != adSlot) return;
                                clearTimeout(timeoutId);
                            });
                            googletag.pubads().addEventListener('slotRenderEnded', function (event) {
                                var slotId = event.slot.getSlotElementId();
                                if (slotId != adSlot) return;

                                _this5.logMess("googletag slotRenderEnded: " + adSlot);

                                try {
                                    var issetGoogleAds = event.lineItemId == null && event.isEmpty == false ? true : false; // khi có ads của demand hoặc ads của google được render

                                    if (event.lineItemId != null && event.slot.getTargeting(StickyBanner_CONSTANTS.TARGET_KEYS.IS_EMPTY_ADS).indexOf("true") === -1 || issetGoogleAds) {
                                        if (issetGoogleAds) {
                                            _this5.logMess("ADX WIN ".concat(slotId, " ======"));

                                            var dataBid = {
                                                adId: "unknown from Adx",
                                                bidder: "Adx",
                                                creativeId: "unknown from Adx"
                                            };
                                            pushInfoDebugOverlay(adSlot, dataBid); // gg win -> add bid to bid response

                                            if (_this5.curBidWin) {
                                                _this5.bidManager.addBidToArray(_this5.curBidWin);

                                                _this5.curBidWin = null;
                                            }
                                        } else {
                                            _this5.logMess("AD Render ".concat(slotId, " ======"));

                                            if (event.sourceAgnosticCreativeId && !Configs.creativeIds.includes(event.sourceAgnosticCreativeId)) {
                                                var dataBid = {
                                                    adId: "unknown",
                                                    bidder: "Direct Campain",
                                                    creativeId: "unknown"
                                                };
                                                pushInfoDebugOverlay(adSlot, dataBid);
                                            }
                                        }

                                        _this5.renderAdComplete();
                                    } // khi bid win là special bid


                                    if (event.lineItemId != null && event.slot.getTargeting(StickyBanner_CONSTANTS.TARGET_KEYS.SPECIAL_BID).indexOf("true") !== -1 && Configs.creativeIds.includes(event.sourceAgnosticCreativeId)) {
                                        _this5.logMess("Special Bid win on slotId ".concat(slotId));

                                        _this5.renderAds();

                                        return;
                                    } // khi dfp response empty, hoặc không empty nhưng cũng không có ads của demand


                                    if (event.isEmpty === true || event.lineItemId != null && event.slot.getTargeting(StickyBanner_CONSTANTS.TARGET_KEYS.IS_EMPTY_ADS).indexOf("true") !== -1) {
                                        _this5.logMess("DFP Ads empty on slotId ".concat(slotId));

                                        _this5.renderAds();
                                    }
                                } catch (e) {
                                    captureException(e, "[StickyBanner - INIT_SCRIPT]");
                                }
                            });
                        });
                    }
                }, {
                    key: "checkClientSize",
                    value: function checkClientSize() {
                        var adsSize = this.initConfig.adSize;
                        var docElementSize = document.documentElement;

                        if (docElementSize.clientWidth < adsSize[0] || docElementSize.clientHeight < adsSize[1]) {
                            return false;
                        }

                        return true;
                    }
                }, {
                    key: "showAds",
                    value: function showAds() {
                        if (!this.adsPlaceholder) return;

                        if (this.adsPlaceholder.hasAd !== true) {
                            return;
                        }

                        this.animShowAds();
                        return true;
                    }
                }, {
                    key: "renderAdComplete",
                    value: function renderAdComplete() {
                        this.adsPlaceholder.hasAd = true;
                        this.showAds();
                        this.adCounter = 0;
                        this.numberRequestBid = 0;
                    }
                }, {
                    key: "hideAds",
                    value: function hideAds() {
                        if (!this.adsPlaceholder) return;
                        this.animHideAds();
                        this.adsPlaceholder.hasAd = false;
                        return true;
                    }
                }, {
                    key: "animShowAds",
                    value: function animShowAds() {
                        if (!this.adsPlaceholder) return;
                        var heightBid = this.curBidWin && this.curBidWin.size ? this.curBidWin.height : this.stickyBannerSetting.heightIframeAd;

                        switch (this.initConfig.position) {
                            case "top":
                            case "top_center":
                                var distance = 15;

                                if (utlis_mobileDetect()) {
                                    distance = 35;
                                }

                                var bodyMarginTopInt = parseInt(this.bodyMarginTop.replace("px", "")) ? parseInt(this.bodyMarginTop.replace("px", "")) : 0;
                                this.adsPlaceholder.style.top = "0px";
                                document.body.style.setProperty('margin-top', bodyMarginTopInt + heightBid + distance + "px", 'important');
                                break;

                            case "bottom":
                            case "bottom_center":
                                _eventFire("INCREASE_BOTTOM_VIDEO_FLOATING", {
                                    heightBid: heightBid
                                });

                                this.adsPlaceholder.style.bottom = "0px";
                                break;

                            case "bottom_left":
                                this.adsPlaceholder.style.left = "0px";
                                break;

                            case "bottom_right":
                                this.adsPlaceholder.style.right = "0px";
                                break;

                            default:
                                break;
                        }

                        this.adsPlaceholder.firstElementChild.style.height = heightBid + "px";
                        return true;
                    }
                }, {
                    key: "animHideAds",
                    value: function animHideAds() {
                        var _this6 = this;

                        if (!this.adsPlaceholder) return;
                        this.addPositionHide();

                        if (this.initConfig.position == "top" || this.initConfig.position == "top_center") {
                            setTimeout(function () {
                                document.body.style.setProperty('margin-top', _this6.bodyMarginTop, 'important');
                            }, 500);
                        }

                        if (this.initConfig.position == "bottom" || this.initConfig.position == "bottom_center") {
                            _eventFire("REDUCTION_BOTTOM_VIDEO_FLOATING");
                        }
                    }
                }, {
                    key: "clearChildAdContainer",
                    value: function clearChildAdContainer() {
                        if (!this.adsPlaceholder) {
                            return;
                        }

                        var adContainer = this.adsPlaceholder.querySelector("#" + this.adSlot);

                        if (adContainer) {
                            var adChildDiv = adContainer.getElementsByTagName("div");

                            if (adChildDiv) {
                                for (var i = 0; i < adChildDiv.length; i++) {
                                    if (adChildDiv[i].id && adChildDiv[i].id.indexOf('google_ads_iframe') !== -1) {
                                        adChildDiv[i].parentNode.removeChild(adChildDiv[i]);
                                    }
                                }
                            }
                        }
                    }
                }, {
                    key: "addPositionHide",
                    value: function addPositionHide() {
                        if (!this.adsPlaceholder) {
                            return;
                        }

                        var offset = 35;

                        switch (this.initConfig.position) {
                            case "top":
                            case "top_center":
                                var distanceHide = 100;
                                this.adsPlaceholder.style.top = -(distanceHide + offset) + "px";
                                break;

                            case "bottom":
                            case "bottom_center":
                                var distanceHide = 100;
                                this.adsPlaceholder.style.bottom = -(distanceHide + offset) + "px";
                                break;

                            case "bottom_left":
                                var distanceHide = 300;
                                this.adsPlaceholder.style.left = -(distanceHide + offset) + "px";
                                break;

                            case "bottom_right":
                                var distanceHide = 300;
                                this.adsPlaceholder.style.right = -(distanceHide + offset) + "px";
                                break;

                            default:
                                break;
                        }

                        this.adsPlaceholder.style.display = "block";
                        return true;
                    }
                }, {
                    key: "addBtnCloseHandler",
                    value: function addBtnCloseHandler() {
                        var _this7 = this;

                        if (this.initConfig.closeBtn) {
                            var adsBtnCloseID = this.stickyBannerSetting.iconAndCloseSetting.adsBtnCloseID;
                            var btnClose = document.getElementById(adsBtnCloseID);
                            btnClose.addEventListener("click", function () {
                                if (_this7.stickyBannerSetting.userClose) return;

                                _this7.logMess("User click close. " + _this7.adSlot);

                                _this7.hideAds(); // Clear Event Direct View


                                if (_this7.adCronjob) {
                                    clearInterval(_this7.adCronjob);
                                }

                                if (_this7.inActiveViewWorker) {
                                    clearInterval(_this7.inActiveViewWorker);
                                }

                                if (_this7.viewPortDetect) {
                                    _this7.viewPortDetect.clear();

                                    _this7.viewPortDetect = null;
                                }

                                _this7.stickyBannerSetting.userClose = true;

                                _removeEventListener("IS_VISIBLE", _this7.stickyBannerAdWorker.bind(_this7));

                                _removeEventListener("IS_NOT_VISIBLE", _this7.stickyBannerAdWorker.bind(_this7));
                            });
                        }
                    }
                }, {
                    key: "logMess",
                    value: function logMess(mess) {
                        if (typeof_default()(mess) === "object") {
                            vilog("".concat(JSON.stringify(mess)), "StickyBanner");
                        } else {
                            vilog("".concat(mess), "StickyBanner");
                        }
                    }
                }]);

                return StickyBanner;
            }();


// EXTERNAL MODULE: ./src/plugins/template/video/css/video.css
            var video = __webpack_require__(45);
            var video_default = /*#__PURE__*/__webpack_require__.n(video);

// EXTERNAL MODULE: ./src/plugins/template/video/css/playerskin.css
            var playerskin = __webpack_require__(46);
            var playerskin_default = /*#__PURE__*/__webpack_require__.n(playerskin);

// EXTERNAL MODULE: ./src/plugins/template/video/css/toparticles.css
            var toparticles = __webpack_require__(47);
            var toparticles_default = /*#__PURE__*/__webpack_require__.n(toparticles);

// EXTERNAL MODULE: ./src/plugins/template/video/html/playerskin/1and8.html
            var _1and8 = __webpack_require__(18);
            var _1and8_default = /*#__PURE__*/__webpack_require__.n(_1and8);

// EXTERNAL MODULE: ./src/plugins/template/video/html/playerskin/2.html
            var _2 = __webpack_require__(48);
            var _2_default = /*#__PURE__*/__webpack_require__.n(_2);

// EXTERNAL MODULE: ./src/plugins/template/video/html/playerskin/3and5.html
            var _3and5 = __webpack_require__(19);
            var _3and5_default = /*#__PURE__*/__webpack_require__.n(_3and5);

// EXTERNAL MODULE: ./src/plugins/template/video/html/playerskin/4.html
            var _4 = __webpack_require__(49);
            var _4_default = /*#__PURE__*/__webpack_require__.n(_4);

// EXTERNAL MODULE: ./src/plugins/template/video/html/playerskin/6and7left.html
            var _6and7left = __webpack_require__(50);
            var _6and7left_default = /*#__PURE__*/__webpack_require__.n(_6and7left);

// EXTERNAL MODULE: ./src/plugins/template/video/html/playerskin/6and7right.html
            var _6and7right = __webpack_require__(20);
            var _6and7right_default = /*#__PURE__*/__webpack_require__.n(_6and7right);

// EXTERNAL MODULE: ./src/plugins/template/video/html/content/2.html
            var content_2 = __webpack_require__(51);
            var content_2_default = /*#__PURE__*/__webpack_require__.n(content_2);

// EXTERNAL MODULE: ./src/plugins/template/video/html/content/3.html
            var _3 = __webpack_require__(52);
            var _3_default = /*#__PURE__*/__webpack_require__.n(_3);

// EXTERNAL MODULE: ./src/plugins/template/video/html/content/4.html
            var content_4 = __webpack_require__(53);
            var content_4_default = /*#__PURE__*/__webpack_require__.n(content_4);

// EXTERNAL MODULE: ./src/plugins/template/video/html/content/5.html
            var _5 = __webpack_require__(54);
            var _5_default = /*#__PURE__*/__webpack_require__.n(_5);

// EXTERNAL MODULE: ./src/plugins/template/video/html/content/morevideo5.html
            var morevideo5 = __webpack_require__(55);
            var morevideo5_default = /*#__PURE__*/__webpack_require__.n(morevideo5);

// EXTERNAL MODULE: ./src/plugins/template/video/html/content/6.html
            var _6 = __webpack_require__(56);
            var _6_default = /*#__PURE__*/__webpack_require__.n(_6);

// EXTERNAL MODULE: ./src/plugins/template/video/html/content/7.html
            var _7 = __webpack_require__(57);
            var _7_default = /*#__PURE__*/__webpack_require__.n(_7);

// EXTERNAL MODULE: ./src/plugins/template/video/html/topvideocontainer.html
            var topvideocontainer = __webpack_require__(21);
            var topvideocontainer_default = /*#__PURE__*/__webpack_require__.n(topvideocontainer);

// EXTERNAL MODULE: ./src/plugins/template/video/html/video.html
            var html_video = __webpack_require__(22);
            var html_video_default = /*#__PURE__*/__webpack_require__.n(html_video);

// EXTERNAL MODULE: ./src/plugins/template/video/html/toparticles/template.html
            var toparticles_template = __webpack_require__(58);
            var toparticles_template_default = /*#__PURE__*/__webpack_require__.n(toparticles_template);

// EXTERNAL MODULE: ./src/plugins/template/video/html/toparticles/sliderindex.html
            var sliderindex = __webpack_require__(59);
            var sliderindex_default = /*#__PURE__*/__webpack_require__.n(sliderindex);

// EXTERNAL MODULE: ./src/plugins/template/video/html/toparticles/slidercontent.html
            var slidercontent = __webpack_require__(60);
            var slidercontent_default = /*#__PURE__*/__webpack_require__.n(slidercontent);

// CONCATENATED MODULE: ./src/plugins/helper/VideoContainerTemplate.js





// CSS


            // html playerskin






            // html content playerskin







            // 


            //



            // 





            var VideoContainerTemplate_VideoContainerTemplate = /*#__PURE__*/function () {
                function VideoContainerTemplate(videoConfig) {
                    var _this$listIconSize;

                    classCallCheck_default()(this, VideoContainerTemplate);

                    // All Video Container var
                    this.powerVideoPlaceholder = null;
                    this.powerVideoContainer = null;
                    this.powerVideoMainPlaceholder = null;
                    this.powerVideoList = null; // FEATURED VIDEOS

                    this.powerTopVideoContainer = null;
                    this.powerFeatureVideos = null; // Video

                    this.powerVideo = null;
                    this.powerVideoControls = null;
                    this.powerVideoCover = null; // Top Left Element

                    this.titleVideo = null;
                    this.viewInfoNum = null;
                    this.viewLikeNum = null; // Top Right Element

                    this.adsLogoBrand = null; // Share

                    this.fbBtn = null;
                    this.twitterBtn = null;
                    this.linkedinBtn = null;
                    this.pinterestBtn = null;
                    this.whatsappBtn = null;
                    this.emailBtn = null; // Play BTN

                    this.playVideoBtn = null;
                    this.playIcon = null;
                    this.pauseIcon = null; // Video loading animation

                    this.vPlayerLoading = null; // Back + Next Video BTN

                    this.videoBackBtn = null;
                    this.videoNextBtn = null; // Process bar

                    this.progressBar = null;
                    this.seek = null;
                    this.seekTooltip = null; // Timeelapsed + Duration

                    this.timeElapsed = null;
                    this.duration = null; // Skip x Sec

                    this.skipSecBack = null;
                    this.skipSecForward = null; // Volume

                    this.volumeButton = null;
                    this.volumeIcons = null;
                    this.volumeOn = null;
                    this.volumeMute = null;
                    this.volumeProcessBar = null;
                    this.volumeBar = null;
                    this.soundScrabberWrapper = null; // Fullscreen BTN

                    this.fullscreenButton = null;
                    this.fullscreenIcons = null; // Other var

                    this.floatingCloseBtn = null;
                    this.powerVideoContainerWrap = null;
                    this.powerVideoWrapper = null; // Skin 2 Slider L + R

                    this.sliderVideo = null;
                    this.sliderVideoLeft = null;
                    this.sliderVideoRight = null; // Skin 4 Back + Next Video BTN

                    this.backVideoBtn = null;
                    this.nextVideoBtn = null; // List a Tag Video index Dom

                    this.aTagId = "aTagVideoIndex";
                    this.dataVideoIndexProp = "data-video-index";
                    this.listVideosDom = null; // Related Content Video

                    this.powerRelatedIframe = null;
                    this.coverRelatedContent = null; // Auto Skip Next Skip BTN

                    this.autoSkipWrapper = null;
                    this.autoSkipNext = null;
                    this.autoSkipStay = null; // TopArticles

                    this.powerTopArtMainContent = null;
                    this.powerTopArtOverlay = null;
                    this.powerTopArtPlayBtn = null;
                    this.powerTopArtTitle = null;
                    this.powerTopArtPrevBtn = null;
                    this.powerTopArtPlayPauseBtn = null;
                    this.powerTopArtNextBtn = null;
                    this.powerTopArtDescription = null;
                    this.powerTopArtSliderContent = null;
                    this.topArtSliderIndexID = "topArtSliderIndexID";
                    this.dataSliderIndexTopArt = "data-slider-index";
                    this.maxWidthDescText = 500; // List Icon Video Main

                    this.listVideoController = null; // Icon Size Video Controller

                    this.listIconSize = (_this$listIconSize = {
                        title: {
                            "class": "title-video-wapper"
                        },
                        iconEyes: {
                            "class": "view-info-icon"
                        }
                    }, defineProperty_default()(_this$listIconSize, "iconEyes", {
                        "class": "view-info-num"
                    }), defineProperty_default()(_this$listIconSize, "iconLike", {
                        "class": "view-like-icon"
                    }), defineProperty_default()(_this$listIconSize, "iconTopRight", {
                        "class": "logo-wrapper"
                    }), defineProperty_default()(_this$listIconSize, "share", {
                        "class": "share-group"
                    }), defineProperty_default()(_this$listIconSize, "shareBG", {
                        "class": "share-wapper-bg"
                    }), defineProperty_default()(_this$listIconSize, "play", {
                        "class": "play-pause-btn"
                    }), defineProperty_default()(_this$listIconSize, "backVideo", {
                        "class": "back-btn-wapper"
                    }), defineProperty_default()(_this$listIconSize, "nextVideo", {
                        "class": "next-btn-wapper"
                    }), defineProperty_default()(_this$listIconSize, "videoProgress", {
                        "class": "video-progress"
                    }), defineProperty_default()(_this$listIconSize, "timeVideo", {
                        "class": "progress-txt"
                    }), defineProperty_default()(_this$listIconSize, "skipTime", {
                        "class": "skipxsec-num"
                    }), defineProperty_default()(_this$listIconSize, "skipBackBtn", {
                        "class": "skipxsec-back-btn"
                    }), defineProperty_default()(_this$listIconSize, "skipForwardBtn", {
                        "class": "skipxsec-forward-btn"
                    }), defineProperty_default()(_this$listIconSize, "soundBtn", {
                        "class": "sound-btn"
                    }), defineProperty_default()(_this$listIconSize, "soundBar", {
                        "class": "sound-scrabber-hit-wapper"
                    }), defineProperty_default()(_this$listIconSize, "soundBG", {
                        "class": "sound-scrabber-bg"
                    }), defineProperty_default()(_this$listIconSize, "fullBtn", {
                        "class": "fullscreen-icon"
                    }), _this$listIconSize); // Const Type Player Skin
                    // Ads Type

                    this.adType = {
                        InStream: "Instream",
                        OutStream: "Outstream",
                        TopArticles: "Top Articles"
                    }; // Player Skin Html

                    this.playerSkin = [_1and8_default.a, _2_default.a, _3and5_default.a, _4_default.a, _3and5_default.a, _6and7right_default.a, _6and7right_default.a, _1and8_default.a]; // Floating Css

                    this.floatingPosition = ["bot-right", "bot-left", "top-right", "top-left"];
                    var closeW = "-30px"; // wFloatingCloseBTN

                    this.floatingCloseBtnPos = ["top:" + closeW + ";left: 0px", // + ";left:" + closeW, -> video: bot-right
                        "top:" + closeW + ";right: 0px", // -> video: bot-left
                        "bottom:" + closeW + ";left: 0px", //  + ";left:" + closeW, // video: top-right
                        "bottom:" + closeW + ";right: 0px" // video: top-left
                    ]; // Adslot 

                    this.placementAdsSlot = videoConfig.placementAdSlot;
                    this.powerAdsPlaceholder = null; // Default Video Setting form Server

                    var templateObj = videoConfig.config.template;

                    if (!templateObj) {
                        this.logMess("Video template is null.");
                        return;
                    }

                    this.videoTemplateSetting = templateObj; // Current Video Setting

                    this.videoSetting = {}; // 

                    var floatingSetting = utlis_mobileDetect() && templateObj.mobileConfig ? templateObj.mobileConfig : templateObj.appearance.floatingSetting;
                    this.settingsFloat = floatingSetting;
                    this.marginBottomDistance = utlis_mobileDetect() && templateObj.mobileConfig ? this.settingsFloat["margin-bot"] : this.settingsFloat["margin-top-bot"];
                    this.userAction = {
                        isTempDemo: videoConfig.isTempDemo ? videoConfig.isTempDemo : false,
                        // true => init temp | false => init for ads 
                        isMobile: utlis_mobileDetect(),
                        isEnableFloating: floatingSetting ? true : false,
                        isFloating: false,
                        isFullscreen: false,
                        isShowAds: false,
                        // true => show ads | false => show video
                        isPlayAfterAds: false,
                        // Play after play ads: true => play, false => pause
                        curVideoStatus: false,
                        isVideoLoaded: false,
                        isVideoPlaying: false,
                        // video is playing
                        isVideoEnded: false,
                        // video is ended
                        isRequestBid: false,
                        // request bid
                        userClickCloseBtn: false,
                        // user click floating close button
                        userClickPlayVideo: false,
                        // user click play video first time
                        videoControllerCB: null,
                        // all video controller event
                        isMuted: true,
                        timeHideController: 2000,
                        volume: 1,
                        // default 1
                        isVisible: true // true => show | false => hide // HNL

                    };
                    var vidConfig = videoConfig.config; // TopArticles
                    // Slider Content

                    this.sliderContents = vidConfig.topArticle ? vidConfig.topArticle : []; // Slider Index Playing

                    this.curSliderContent = 0; // Slider Timer Count Down

                    this.timerSliderDelay = 10000; // delay ms

                    this.timerSliderCountdown = null; // List Videos

                    var contentsVideo = vidConfig.contents ? vidConfig.contents : [];
                    this.listVideos = this.processListVideo(contentsVideo, vidConfig.orderMethod); // Video Index Playing

                    this.curVideoPlay = 0; // Timer Hide Controller + Tooltip

                    this.timerHideTooltip = null;
                    this.timerHideController = null;
                    this.funcProcessMouseInFullscreen = null; // Auto Next Stay Video

                    this.timerAutoNextStay = null;
                    this.timerAutoNextVideo = null;
                    this.isPauseTimerAutoNextVideo = false; // HLS

                    this.hls = null;
                    this.renderContainer(this.videoTemplateSetting);
                    this.hideLoading();
                }

                createClass_default()(VideoContainerTemplate, [{
                    key: "processListVideo",
                    value: function processListVideo(listVideo, type) {
                        if (!listVideo || listVideo.length <= 0) return [];

                        try {
                            var listVideoNew = [];

                            if (type == "random") {
                                listVideoNew = shuffleArray(listVideo);
                            } else {
                                listVideoNew = listVideo;
                            }

                            return listVideoNew;
                        } catch (e) {
                            this.logMess("Err: " + e);
                            return [];
                        }
                    } // Setup Setting + Render Html

                }, {
                    key: "renderContainer",
                    value: function renderContainer(template) {
                        if (!template) {
                            return;
                        }

                        this.removeEventListner();

                        try {
                            // Video Setting
                            var playerSkinType = 1;

                            if (template.adType == this.adType.InStream) {
                                playerSkinType = template.appearance.playerLayout.type;

                                if (utlis_mobileDetect() && (playerSkinType == 4 || playerSkinType == 6 || playerSkinType == 7)) {
                                    playerSkinType = 1;
                                }
                            } else if (template.adType == this.adType.OutStream) {
                                playerSkinType = 1;
                            } else if (template.adType == this.adType.TopArticles) {
                                playerSkinType = 8;
                            }

                            this.videoSetting = this.getVideoSetting(template.adType, template, playerSkinType); // Get Final HTML

                            var templateCSS = playerskin_default.a;
                            var playerLayout = playerSkinType !== null ? this.playerSkin[playerSkinType - 1] : this.playerSkin[0];

                            if ((playerSkinType == 6 || playerSkinType == 7) && this.videoSetting.columnSetting.columnPosition != "right") {
                                playerLayout = _6and7left_default.a;
                            }

                            if (this.videoSetting.adType == this.adType.TopArticles) {
                                playerLayout = toparticles_template_default.a;
                                templateCSS = toparticles_default.a;
                            } // Create Video Container Wrapper


                            this.powerVideoContainerWrap = document.createElement('power');
                            this.powerVideoContainerWrap.id = "powerVideoContainerWrap_" + this.placementAdsSlot.id;
                            this.powerVideoContainerWrap.className = "power-hide-scrollbar";
                            this.powerVideoContainerWrap.style.cssText = this.getFloatingCSS();
                            var videoContainerHtml = handleBarsCustom(html_video_default.a, this.videoSetting.videoMain); // Replace ID Element v.v..

                            videoContainerHtml = handleBarsCustom(videoContainerHtml, this.videoSetting); // Replace Setting

                            this.powerVideoContainerWrap.innerHTML = videoContainerHtml; // Center Video Container in Placement

                            this.placementAdsSlot.style.cssText = "width: 100%; position: relative; display: flex; justify-content: center;"; // Insert Html Video Container to Placement 

                            this.placementAdsSlot.appendChild(this.powerVideoContainerWrap); // Create Video Iframe for Related Content

                            var relatedIframe = document.createElement('iframe');
                            relatedIframe.id = "powerRelatedIframe_" + this.placementAdsSlot.id;
                            relatedIframe.setAttribute("frameborder", 0);
                            relatedIframe.scrolling = "no";
                            relatedIframe.style.cssText = this.getFloatingCSS("relatedIframe");
                            this.powerVideoContainerWrap.appendChild(relatedIframe); // Insert Iframe to Placement

                            this.powerRelatedIframe = relatedIframe; // Insert Html

                            var documentTemp = relatedIframe.contentWindow.document;
                            documentTemp.open();
                            documentTemp.write(handleBarsCustom(playerLayout, this.videoSetting));
                            documentTemp.close(); // Add CSS to iFrame (Add sau ko bi bi mat css)

                            documentTemp.head.append(this.createLinkCss(documentTemp, templateCSS));
                            var link2 = documentTemp.createElement("link");
                            link2.rel = "stylesheet";
                            link2.type = "text/css";
                            link2.href = "https://fonts.googleapis.com/css?family=Roboto&amp;display=swap";
                            documentTemp.head.appendChild(link2);

                            if (this.videoSetting.adType == this.adType.TopArticles) {
                                documentTemp.documentElement.style.setProperty("--power-toparticles-column", this.sliderContents.length);
                                documentTemp.documentElement.style.setProperty("--power-slider-anim-durtion", this.timerSliderDelay + "ms");
                                documentTemp.documentElement.style.setProperty("--power-desc-width", this.maxWidthDescText + "px");
                            } // Add css to header root document


                            var idStyleCSS = document.getElementById("power_css_videocontainer");

                            if (!idStyleCSS) {
                                document.head.appendChild(this.createLinkCss(document, video_default.a)); // Link GG font Roboto

                                var link = document.createElement("link");
                                link.rel = "stylesheet";
                                link.type = "text/css";
                                link.href = "https://fonts.googleapis.com/css?family=Roboto&amp;display=swap";
                                document.head.appendChild(link);
                            } // Get All Video Controll


                            this.getAllVideoControll(playerSkinType); // Set CSS root property

                            if (this.videoSetting.color) {
                                for (var _i = 0, _Object$entries = Object.entries(this.videoSetting.color); _i < _Object$entries.length; _i++) {
                                    var _Object$entries$_i = slicedToArray_default()(_Object$entries[_i], 2),
                                        _ = _Object$entries$_i[0],
                                        item = _Object$entries$_i[1];

                                    document.documentElement.style.setProperty(item.key, item.value); // Iframe document css

                                    documentTemp.documentElement.style.setProperty(item.key, item.value);
                                }
                            } // Hide Back + Next Video


                            if (this.listVideos.length < 2) {
                                this.videoBackBtn.style.display = "none";
                                this.videoNextBtn.style.display = "none";
                            } // Hide All Video Controller for first time


                            this.listVideoController.forEach(function (item) {
                                return item.classList.add("power-hidden");
                            }); // Set content for video element

                            this.setCurrentVideoInfo();
                        } catch (e) {
                            this.logMess("renderContainer Err: " + e);
                        }
                    }
                }, {
                    key: "setDefaultDistanceBottomFloating",
                    value: function setDefaultDistanceBottomFloating() {
                        this.marginBottomDistance = !utlis_mobileDetect() ? this.settingsFloat["margin-top-bot"] : this.settingsFloat["margin-bot"];
                        this.powerVideoWrapper.style.bottom = "".concat(this.marginBottomDistance, "px");
                        this.updateStyleFloating();
                    }
                }, {
                    key: "updateStyleFloating",
                    value: function updateStyleFloating() {
                        var floatingSettingObj = !this.userAction.isMobile ? this.videoTemplateSetting.appearance.floatingSetting : this.videoTemplateSetting.mobileConfig;
                        var floatingPos = !utlis_mobileDetect() ? floatingSettingObj.position - 1 : this.videoTemplateSetting.mobileConfig.position - 1;
                        this.videoSetting.floatingSetting.position = this.getStyleFloating(this.floatingPosition[floatingPos]);
                    }
                }, {
                    key: "getStyleFloating",
                    value: function getStyleFloating(floatingPos) {
                        var floatingSettingObj = !this.userAction.isMobile ? this.videoTemplateSetting.appearance.floatingSetting : this.videoTemplateSetting.mobileConfig;
                        var floatingWidth = !utlis_mobileDetect() ? floatingSettingObj.width >= 256 ? floatingSettingObj.width : 256 : this.videoTemplateSetting.mobileConfig.width >= 256 ? this.videoTemplateSetting.mobileConfig.width : 256;
                        var css = "z-index: 999999999 !important;position: fixed !important;width: " + floatingWidth + "px !important;height: " + Math.floor(floatingWidth / 1.77) + "px !important;";
                        var marginTB = this.marginBottomDistance;
                        var marginLR = !utlis_mobileDetect() ? floatingSettingObj["margin-left-right"] : this.videoTemplateSetting.mobileConfig["margin-left-right"];

                        if (floatingPos == "bot-right") {
                            css += "bottom: " + marginTB + "px !important; right: " + marginLR + "px !important;";
                        } else if (floatingPos == "bot-left") {
                            css += "bottom: " + marginTB + "px !important; left: " + marginLR + "px !important;";
                        } else if (floatingPos == "top-right") {
                            css += "top: " + marginTB + "px !important; right: " + marginLR + "px !important;";
                        } else if (floatingPos == "top-left") {
                            css += "top: " + marginTB + "px !important; left: " + marginLR + "px !important;";
                        }

                        return css;
                    }
                }, {
                    key: "getVideoSetting",
                    value: function getVideoSetting(adType, template, playerSkinType) {
                        var _vSetting$videoMain;

                        var floatingSettingObj = !this.userAction.isMobile ? template.appearance.floatingSetting : template.mobileConfig;
                        var vSetting = {};
                        var floatingSetting = null;

                        if (this.userAction.isEnableFloating && floatingSettingObj) {
                            var floatingPos = !utlis_mobileDetect() ? floatingSettingObj.position - 1 : template.mobileConfig.position - 1;
                            floatingSetting = {
                                closeBtn: {
                                    active: !utlis_mobileDetect() ? floatingSettingObj.closeFloatingBtn : template.mobileConfig.closeFloatingBtn,
                                    position: this.floatingCloseBtnPos[floatingPos]
                                },
                                posAnim: floatingPos == 0 || floatingPos == 2 ? "R" : "L",
                                // HNL
                                position: this.getStyleFloating(this.floatingPosition[floatingPos]),
                                floatOnBottom: floatingSettingObj.floatOnBottom != null ? floatingSettingObj.floatOnBottom : true,
                                // true -> float all | false -> only float when scroll down
                                floatingOnView: floatingSettingObj.floatingOnView != null ? floatingSettingObj.floatingOnView : false // true -> floating only after its in view at least once.

                            };
                        } // playerSize == responsive => fixed max width = 1000px


                        template.appearance.maxWidth = template.appearance.playerSize == "fixed" ? template.appearance.maxWidth : "1000";
                        var minWidth = "min-width: 300px;";
                        var overflow = "overflow: hidden;";

                        if (playerSkinType == 6 || playerSkinType == 7) {
                            minWidth = null;
                        } else if (playerSkinType == 4) {
                            minWidth = "min-width: 500px;";
                        } else if (playerSkinType == 5) {
                            overflow = "overflow: hidden; overflow-y: scroll; ";
                        }

                        var adTagId = this.placementAdsSlot.id;

                        if (adType == this.adType.InStream) {
                            var showAutoSkip = 0;
                            var realtimeToSkip = 0;
                            var delayAds = template.adConfig.delay ? template.adConfig.delay * 1000 : 0;
                            var autoSkip = template.adConfig.autoSkip;

                            if (autoSkip && autoSkip.autoSkipBtn) {
                                // timeToSkip is total time to skip video
                                // autoSkipBtn is sec to show auto skip button after video start playing (timeToSkip - autoSkipBtn)
                                showAutoSkip = autoSkip.timeToSkip - autoSkip.autoSkipBtn;
                                showAutoSkip = showAutoSkip > 0 ? showAutoSkip : 20;
                                realtimeToSkip = autoSkip.timeToSkip - showAutoSkip;
                                realtimeToSkip = realtimeToSkip > 0 ? realtimeToSkip : 10;
                                delayAds = 0;
                            }

                            var columnSetting = template.appearance.columnSetting || {};
                            var customLogo = template.logoBand.customLogo || {};
                            vSetting = {
                                adType: adType,
                                powerVideoContainerWrapCSS: template.appearance.playerSize == "fixed" ? overflow + 'min-width: ' + template.appearance.maxWidth + 'px; width: ' + template.appearance.maxWidth + 'px;' : overflow + 'max-width: ' + template.appearance.maxWidth + 'px; width: 100%; ' + minWidth,
                                playerSkinType: playerSkinType,
                                videoPlaceholderCSS: 'style="background-color: var(--power-background-color); "',
                                // Colum related setting of temp 6 and 7 (7 dont have columnNumber)
                                columnSetting: {
                                    columnPosition: columnSetting && columnSetting.columnPosition ? columnSetting.columnPosition : "right",
                                    columnNumber: columnSetting && columnSetting.columnNumber ? columnSetting.columnNumber : 1
                                },
                                // Floating Close BTN HTML
                                // floatingCloseBtn: FloatingCloseBTN,
                                // Top HTML
                                topVideoConatiner: topvideocontainer_default.a,
                                topVideoContainerConfig: template.text.mainTitle == "" && !template.logoBand.poweredByApacdex ? "power-deactive" : "",
                                mainTitle: template.text.mainTitle ? template.text.mainTitle : "",
                                poweredByApacdex: !template.logoBand.poweredByApacdex ? "power-hidden" : "",
                                brandIdentity: Configs.runWithPP ? "<div class=\"poweredby-logo-wapper\"> <img src=\"https://ms.pubpowerplatform.io/assets/pubpower-black-100x18.png\" style=\"width: 100%;\" /> </div>" : "<div class=\"brand-name-wrapper\"><span class=\"brand-name\">Valueimpression<span></div>",
                                // Video HTML 
                                videoMain: html_video_default.a,
                                // Skin 2
                                sliderVideo: 'sliderVideo_' + adTagId,
                                sliderVideoLeft: 'sliderVideoLeft_' + adTagId,
                                sliderVideoRight: 'sliderVideoRight_' + adTagId,
                                // Skin 4
                                backVideoBtn: 'backVideoBtn_' + adTagId,
                                nextVideoBtn: 'nextVideoBtn_' + adTagId,
                                // Cover For Related when show Ads
                                coverRelatedContent: "coverRelatedContent_" + adTagId,
                                // Video Container
                                likeViewConfig: !template.text.titleOn ? "title-video-wapper" : "view-info-wapper",
                                descriptionOn: !template.text.descriptionOn ? "power-hidden" : "",
                                // Logo
                                logoOn: !template.logoBand.endableLogo ? "power-hidden" : "",
                                logoCustomLink: customLogo && customLogo.link ? customLogo.link : "",
                                logoClickThrough: customLogo && customLogo.clickThrough ? customLogo.clickThrough : "",
                                // On Off Btn
                                titleOn: !template.text.titleOn ? "power-hidden" : "",
                                viewsLikesOn: !template.controls.viewsLikes ? "power-hidden" : "",
                                shareOn: !template.controls.share ? "power-hidden" : "",
                                nextPrevArrowOn: playerSkinType == 4 || !template.controls.nextPrevArrow ? "power-hidden" : "",
                                nextPrevSkipOn: !template.controls.nextPrevSkip ? "power-hidden" : "",
                                fullscreenOn: !template.controls.fullscreen ? "power-hidden" : "",
                                // Color
                                color: {
                                    controlsColor: {
                                        key: "--power-controls-color",
                                        value: template.color.controls
                                    },
                                    backgroundColor: {
                                        key: "--power-background-color",
                                        value: template.color.background
                                    },
                                    titleColor: {
                                        key: "--power-title-color",
                                        value: template.color.title
                                    },
                                    descriptionColor: {
                                        key: "--power-description-color",
                                        value: template.color.description
                                    }
                                },
                                floatingSetting: floatingSetting,
                                // Chua biet
                                defaultSoundModeOn: template.controls.defaultSoundMode,
                                videoConfigOn: template.controls.videoConfig,
                                adConfig: {
                                    vastRetry: template.adConfig.vastRetry,
                                    autoSkip: autoSkip ? {
                                        showAutoSkip: showAutoSkip * 1000,
                                        // sec
                                        realtimeToSkip: realtimeToSkip * 1000,
                                        // sec
                                        adsNums: autoSkip.adsNums ? autoSkip.adsNums : 1
                                    } : null,
                                    delay: delayAds ? delayAds : 0
                                }
                            };
                        } else if (adType == this.adType.OutStream) {
                            vSetting = {
                                adType: adType,
                                powerVideoContainerWrapCSS: template.appearance.playerSize == "fixed" ? overflow + 'min-width: ' + template.appearance.maxWidth + 'px;width: ' + template.appearance.maxWidth + 'px;' : overflow + 'max-width: ' + template.appearance.maxWidth + 'px;width: 100%;',
                                playerSkinType: playerSkinType,
                                videoPlaceholderCSS: 'style="background-color: var(--power-background-color); "',
                                // Floating Close BTN HTML
                                // floatingCloseBtn: FloatingCloseBTN,
                                // Top HTML 
                                topVideoConatiner: "",
                                // Video HTML 
                                // videoMain: VideoContainerHTML,
                                // Video Container
                                likeViewConfig: "view-info-wapper",
                                // Logo
                                logoOn: "power-hidden",
                                logoCustomLink: "",
                                logoClickThrough: "#",
                                // On Off Btn
                                titleOn: "",
                                viewsLikesOn: "",
                                shareOn: "",
                                nextPrevArrowOn: "",
                                nextPrevSkipOn: "",
                                fullscreenOn: "",
                                // Color
                                color: {
                                    backgroundColor: {
                                        key: "--power-background-color",
                                        value: "#0000"
                                    }
                                },
                                floatingSetting: floatingSetting,
                                adConfig: {
                                    vastRetry: template.adConfig.vastRetry,
                                    delay: template.adConfig.delay > 0 ? template.adConfig.delay * 1000 : 30000
                                }
                            };
                        } else if (adType == this.adType.TopArticles) {
                            var _customLogo = template.logoBand.customLogo || {};

                            vSetting = {
                                adType: adType,
                                powerVideoContainerWrapCSS: template.appearance.playerSize == "fixed" ? overflow + 'min-width: ' + template.appearance.maxWidth + 'px;width: ' + template.appearance.maxWidth + 'px;' : overflow + 'max-width: ' + template.appearance.maxWidth + 'px;width: 100%; min-width: 300px',
                                playerSkinType: 8,
                                videoPlaceholderCSS: 'style="background-color: var(--power-background-color); display: block"',
                                // Top HTML 
                                topVideoConatiner: topvideocontainer_default.a,
                                topVideoContainerConfig: template.text.mainTitle == "" && !template.logoBand.poweredByApacdex ? "power-deactive" : "",
                                mainTitle: template.text.mainTitle ? template.text.mainTitle : "",
                                poweredByApacdex: !template.logoBand.poweredByApacdex ? "power-hidden" : "",
                                // Video HTML 
                                // videoMain: VideoContainerHTML,
                                // Cover For Related when show Ads
                                coverRelatedContent: "coverRelatedContent_" + adTagId,
                                // Video Container
                                likeViewConfig: !template.text.titleOn ? "title-video-wapper" : "view-info-wapper",
                                descriptionOn: !template.text.descriptionOn ? "power-hidden" : "",
                                // Logo
                                logoOn: !template.logoBand.endableLogo ? "power-hidden" : "",
                                logoCustomLink: _customLogo && _customLogo.link ? _customLogo.link : "",
                                logoClickThrough: _customLogo && _customLogo.clickThrough ? _customLogo.clickThrough : "",
                                iconController: "iconController_".concat(adTagId),
                                // On Off Btn
                                titleOn: !template.text.titleOn ? "power-hidden" : "",
                                viewsLikesOn: "",
                                shareOn: "",
                                nextPrevArrowOn: "",
                                nextPrevSkipOn: "",
                                fullscreenOn: "",
                                // Color
                                color: {
                                    controlsColor: {
                                        key: "--power-controls-color",
                                        value: "#ffc107"
                                    },
                                    themeColor: {
                                        key: "--power-theme-color",
                                        value: template.color.theme
                                    },
                                    backgroundColor: {
                                        key: "--power-background-color",
                                        value: template.color.background
                                    },
                                    titleColor: {
                                        key: "--power-title-color",
                                        value: template.color.title
                                    },
                                    titleBackgroundColor: {
                                        key: "--power-title-background-color",
                                        value: template.color["title-background"]
                                    }
                                },
                                floatingSetting: floatingSetting,
                                adConfig: {
                                    vastRetry: template.adConfig.vastRetry,
                                    delay: template.adConfig.delay > 0 ? template.adConfig.delay * 1000 : 30000
                                }
                            };
                            vSetting.sliderIndex = this.getSliderIndex();
                        }

                        var logoByPubPower = template.logoBand && !template.logoBand.logoByPubPower ? "power-hidden" : '';
                        vSetting.videoMain = {};
                        vSetting.videoMain = (_vSetting$videoMain = {
                            powerVideoContainer: "powerVideoContainer_".concat(adTagId),
                            powerAdsPlaceholder: "powerAdsPlaceholder_".concat(adTagId),
                            powerVideoWrapper: "powerVideoWrapper_".concat(adTagId),
                            floatingCloseBtn: "floatingCloseBtn_".concat(adTagId),
                            iconController: "iconController_".concat(adTagId),
                            powerVideo: "powerVideo_".concat(adTagId),
                            powerVideoControls: "powerVideoControls_".concat(adTagId),
                            powerVideoCover: "powerVideoCover_".concat(adTagId),
                            titleVideo: "titleVideo_".concat(adTagId),
                            viewInfoNum: "viewInfoNum_".concat(adTagId)
                        }, defineProperty_default()(_vSetting$videoMain, "viewInfoNum", "viewInfoNum_".concat(adTagId)), defineProperty_default()(_vSetting$videoMain, "adsLogoBrand", "adsLogoBrand_".concat(adTagId)), defineProperty_default()(_vSetting$videoMain, "logobrandIdentity", Configs.runWithPP ? "<img class=\"".concat(logoByPubPower, "\" src=\"").concat(Configs.brandLogoWhite, "\" style=\"width: 100%;\" />") : "<img class=\"".concat(logoByPubPower, "\" src=\"https://static.vliplatform.com/media/icon/vi-logo.svg\" style=\"width: 100%;\" />")), defineProperty_default()(_vSetting$videoMain, "fbBtn", "fbBtn"), defineProperty_default()(_vSetting$videoMain, "twitterBtn", "twitterBtn"), defineProperty_default()(_vSetting$videoMain, "linkedinBtn", "linkedinBtn"), defineProperty_default()(_vSetting$videoMain, "pinterestBtn", "pinterestBtn"), defineProperty_default()(_vSetting$videoMain, "whatsappBtn", "whatsappBtn"), defineProperty_default()(_vSetting$videoMain, "emailBtn", "emailBtn"), defineProperty_default()(_vSetting$videoMain, "playVideoBtn", "playVideoBtn_".concat(adTagId)), defineProperty_default()(_vSetting$videoMain, "vPlayerLoading", "vPlayerLoading_".concat(adTagId)), defineProperty_default()(_vSetting$videoMain, "videoBackBtn", "videoBackBtn_".concat(adTagId)), defineProperty_default()(_vSetting$videoMain, "videoNextBtn", "videoNextBtn_".concat(adTagId)), defineProperty_default()(_vSetting$videoMain, "videoProgressBar", "videoProgressBar_".concat(adTagId)), defineProperty_default()(_vSetting$videoMain, "seek", "seek_".concat(adTagId)), defineProperty_default()(_vSetting$videoMain, "seekTooltip", "seekTooltip_".concat(adTagId)), defineProperty_default()(_vSetting$videoMain, "timeElapsed", "timeElapsed_".concat(adTagId)), defineProperty_default()(_vSetting$videoMain, "duration", "duration_".concat(adTagId)), defineProperty_default()(_vSetting$videoMain, "skipSecBack", "skipSecBack_".concat(adTagId)), defineProperty_default()(_vSetting$videoMain, "skipSecForward", "skipSecForward_".concat(adTagId)), defineProperty_default()(_vSetting$videoMain, "volumeBtn", "volumeBtn_".concat(adTagId)), defineProperty_default()(_vSetting$videoMain, "volumeOn", "volumeOn_".concat(adTagId)), defineProperty_default()(_vSetting$videoMain, "volumeOff", "volumeOff_".concat(adTagId)), defineProperty_default()(_vSetting$videoMain, "volumeProcessBar", "volumeProcessBar_".concat(adTagId)), defineProperty_default()(_vSetting$videoMain, "volumeBar", "volumeBar_".concat(adTagId)), defineProperty_default()(_vSetting$videoMain, "soundScrabberWrapper", "soundScrabberWrapper_".concat(adTagId)), defineProperty_default()(_vSetting$videoMain, "fullscreenBtn", "fullscreenBtn_".concat(adTagId)), defineProperty_default()(_vSetting$videoMain, "autoSkipWrapper", "autoSkipWrapper_".concat(adTagId)), defineProperty_default()(_vSetting$videoMain, "autoSkipNext", "autoSkipNext_".concat(adTagId)), defineProperty_default()(_vSetting$videoMain, "autoSkipStay", "autoSkipStay_".concat(adTagId)), _vSetting$videoMain);
                        vSetting.contentPlayerSkin = {};
                        vSetting.contentPlayerSkin = this.getContentPlayerSkin(playerSkinType, vSetting);
                        return vSetting;
                    }
                }, {
                    key: "getSliderIndex",
                    value: function getSliderIndex() {
                        var sliderIndex = "";

                        for (var i = 0; i < this.sliderContents.length; i++) {
                            var config = {
                                topArtSliderIndexID: this.topArtSliderIndexID,
                                dataSliderIndex: "".concat(this.dataSliderIndexTopArt, "=").concat(i)
                            };
                            sliderIndex += handleBarsCustom(sliderindex_default.a, config);
                        }

                        return sliderIndex;
                    }
                }, {
                    key: "getContentPlayerSkin",
                    value: function getContentPlayerSkin(playerSkinType, videoSetting) {
                        var contentPlayerSkin = "";

                        if (playerSkinType == 2) {
                            var wVideoMarginRight = 156 + 5; // 156 is width of video thumb, 5 is margin right of video thumb

                            var leftSize = 0;

                            for (var i = 0; i < this.listVideos.length; i++) {
                                var item = this.listVideos[i];
                                var isCurItemPlaying = this.curVideoPlay == i;
                                var config = {
                                    leftSizeStyle: 'style="left: ' + leftSize + 'px;"',
                                    itemClass: isCurItemPlaying ? "power-hidden" : "",
                                    itemTitle: item.title,
                                    itemThumb: item.thumb,
                                    showPlaying: isCurItemPlaying ? "power-show" : "power-hidden",
                                    hidePlaying: isCurItemPlaying ? "power-hidden" : ""
                                };
                                var tempHtml = handleBarsCustom(content_2_default.a, config);
                                contentPlayerSkin += '<a id="' + this.aTagId + '" ' + this.dataVideoIndexProp + '=' + i + ' href="javascript:void(0);">' + tempHtml + '</a>';
                                leftSize += wVideoMarginRight;
                            }
                        } else if (playerSkinType == 3) {
                            var _config = {
                                itemTitle: this.listVideos[this.curVideoPlay].title,
                                desClass: this.videoSetting.descriptionOn ? this.videoSetting.descriptionOn : "",
                                itemDes: this.listVideos[this.curVideoPlay].des
                            };
                            contentPlayerSkin = handleBarsCustom(_3_default.a, _config);
                        } else if (playerSkinType == 4) {
                            var _config2 = {
                                itemTitle: this.listVideos[this.curVideoPlay].title,
                                desClass: this.videoSetting.descriptionOn ? this.videoSetting.descriptionOn : "",
                                itemDes: this.listVideos[this.curVideoPlay].des
                            };
                            contentPlayerSkin = handleBarsCustom(content_4_default.a, _config2);
                        } else if (playerSkinType == 5) {
                            var powerVideoList = "";

                            for (var _i2 = 0; _i2 < this.listVideos.length; _i2++) {
                                var _item = this.listVideos[_i2];

                                var _isCurItemPlaying = this.curVideoPlay == _i2;

                                var configMoreVideo = {
                                    itemThumb: _item.thumb,
                                    itemTitle: _item.title,
                                    desClass: this.videoSetting.descriptionOn ? this.videoSetting.descriptionOn : "",
                                    itemDes: _item.des,
                                    showPlaying: _isCurItemPlaying ? "power-show" : "power-hidden",
                                    hidePlaying: _isCurItemPlaying ? "power-hidden" : "",
                                    clickVideoIndex: 'id = "' + this.aTagId + '" ' + this.dataVideoIndexProp + '="' + _i2 + '"'
                                };
                                powerVideoList += handleBarsCustom(morevideo5_default.a, configMoreVideo);
                            }

                            var _config3 = {
                                itemTitle: this.listVideos[this.curVideoPlay].title,
                                desClass: this.videoSetting.descriptionOn ? this.videoSetting.descriptionOn : "",
                                itemDes: this.listVideos[this.curVideoPlay].des,
                                powerVideoList: powerVideoList,
                                // Cover For Related when show Ads
                                coverRelatedContent: "coverRelatedContent_" + this.placementAdsSlot.id
                            };
                            contentPlayerSkin = handleBarsCustom(_5_default.a, _config3);
                        } else if (playerSkinType == 6) {
                            var maxCol = videoSetting.columnSetting.columnNumber;
                            var colNums = "";

                            for (var k = 0; k < maxCol; k++) {
                                colNums += "130px ";
                            } // 130px fixed thumbnail
                            // Set Document Root var --power-playerskin67-columns


                            document.documentElement.style.setProperty("--power-playerskin67-columns", colNums);
                            var _tempHtml = '<div class="power_layout__grid">';

                            for (var _i3 = 0; _i3 < this.listVideos.length; _i3++) {
                                var _item2 = this.listVideos[_i3]; // Set default video play 

                                var _isCurItemPlaying2 = this.curVideoPlay == _i3;

                                var _config4 = {
                                    itemThumb: _item2.thumb,
                                    showPlaying: _isCurItemPlaying2 ? "power-show" : "power-hidden",
                                    hidePlaying: _isCurItemPlaying2 ? "power-hidden" : ""
                                };
                                _tempHtml += "<div id=\"".concat(this.aTagId, "\" ").concat(this.dataVideoIndexProp, "=").concat(_i3, "\">").concat(handleBarsCustom(_6_default.a, _config4), "</div>");
                            }

                            _tempHtml += '</div>';
                            contentPlayerSkin = _tempHtml;
                        } else if (playerSkinType == 7) {
                            // Set Document Root var --power-playerskin67-columns | template 7 have 1 column fixed 260px + margin-left: 7px
                            document.documentElement.style.setProperty("--power-playerskin67-columns", "267px");
                            var _tempHtml2 = '<div class="power_layout__grid">';

                            for (var _i4 = 0; _i4 < this.listVideos.length; _i4++) {
                                var _item3 = this.listVideos[_i4]; // Set default video play 

                                var _isCurItemPlaying3 = this.curVideoPlay == _i4;

                                var _config5 = {
                                    itemThumb: _item3.thumb,
                                    itemTitle: _item3.title,
                                    desClass: this.videoSetting.descriptionOn ? this.videoSetting.descriptionOn : "",
                                    itemDes: _item3.des,
                                    showPlaying: _isCurItemPlaying3 ? "power-show" : "power-hidden",
                                    hidePlaying: _isCurItemPlaying3 ? "power-hidden" : "",
                                    openAtag: "<div id=\"".concat(this.aTagId, "\" ").concat(this.dataVideoIndexProp, "=").concat(_i4, "\">"),
                                    closeAtag: '</div>'
                                };
                                _tempHtml2 += handleBarsCustom(_7_default.a, _config5);
                            }

                            _tempHtml2 += '</div>';
                            contentPlayerSkin = _tempHtml2;
                        } else if (playerSkinType == 8) {
                            // For TopArticles
                            var listAmin = ["pubpower-top", "pubpower-top-right", "pubpower-right", "pubpower-bottom-right", "pubpower-bottom", "pubpower-bottom-left", "pubpower-left", "pubpower-top-left"];

                            for (var _i5 = 0; _i5 < this.sliderContents.length; _i5++) {
                                var _item4 = this.sliderContents[_i5];
                                var _config6 = {
                                    itemImg: _item4.image,
                                    itemLink: _item4.link,
                                    itemAnim: "style=\"--animn:".concat(listAmin[Math.floor(Math.random() * listAmin.length)], ";\"")
                                };
                                contentPlayerSkin += handleBarsCustom(slidercontent_default.a, _config6);
                            }
                        }

                        return contentPlayerSkin;
                    } // Get Video Controll Component + Add + Remove Event Listener

                }, {
                    key: "getAllVideoControll",
                    value: function getAllVideoControll(playerSkinType) {
                        // Related In Iframe
                        var documentI = this.powerRelatedIframe.contentWindow.document;
                        var adTag = this.placementAdsSlot.id; // Slider Skin 2

                        if (playerSkinType == 2) {
                            this.sliderVideo = documentI.getElementById('sliderVideo_' + adTag);
                            this.sliderVideoLeft = documentI.getElementById('sliderVideoLeft_' + adTag);
                            this.sliderVideoRight = documentI.getElementById('sliderVideoRight_' + adTag);
                        } // Back + Next BTN Skin 4


                        if (playerSkinType == 4) {
                            this.backVideoBtn = documentI.getElementById('backVideoBtn_' + adTag);
                            this.nextVideoBtn = documentI.getElementById('nextVideoBtn_' + adTag);
                        } // List a Tag Video index Dom


                        if (playerSkinType == 2 || playerSkinType == 5 || playerSkinType == 6 || playerSkinType == 7) {
                            this.listVideosDom = documentI.querySelectorAll("#" + this.aTagId);
                        }

                        this.powerVideoList = documentI.getElementById("powerVideoList"); // Select all Video Container elements here

                        this.powerTopVideoContainer = documentI.getElementById('powerTopVideoContainer'); // FEATURED VIDEOS

                        this.powerFeatureVideos = documentI.getElementById('powerFeatureVideos'); // Related Content

                        this.coverRelatedContent = documentI.querySelectorAll("#coverRelatedContent_" + adTag); // Video Placeholder Related

                        this.powerVideoPlaceholder = documentI.getElementById('powerVideoPlaceholder'); // Video Main

                        this.powerVideoMainPlaceholder = documentI.getElementById('powerVideoMainPlaceholder'); // TopArticles

                        if (this.videoSetting.adType == this.adType.TopArticles) {
                            this.powerTopArtMainContent = documentI.getElementById('powerTopArtMainContent');
                            this.powerTopArtOverlay = documentI.getElementById('powerTopArtOverlay');
                            this.powerTopArtPlayBtn = documentI.getElementById('powerTopArtPlayBtn'); // Title

                            this.powerTopArtTitle = documentI.getElementById('powerTopArtTitle'); // Prev + Pause + Next BTN

                            this.powerTopArtPrevBtn = documentI.getElementById('powerTopArtPrevBtn');
                            this.powerTopArtPlayPauseBtn = documentI.getElementById('powerTopArtPlayPauseBtn');
                            this.powerTopArtNextBtn = documentI.getElementById('powerTopArtNextBtn'); // Description

                            this.powerTopArtDescription = documentI.getElementById('powerTopArtDescription'); // Slidet Content

                            this.powerTopArtSliderContent = documentI.getElementById('powerTopArtSliderContent');
                        } // All Video Controller


                        documentI = document;
                        var adTagId = this.placementAdsSlot.id;

                        if (this.userAction.isEnableFloating && this.videoSetting.floatingSetting && this.videoSetting.floatingSetting.closeBtn.active) {
                            this.floatingCloseBtn = documentI.getElementById("floatingCloseBtn_".concat(adTagId));
                        } // Video Container 


                        this.powerVideoContainer = documentI.getElementById("powerVideoContainer_".concat(adTagId));
                        this.powerAdsPlaceholder = documentI.getElementById("powerAdsPlaceholder_".concat(adTagId));
                        this.powerVideoWrapper = documentI.getElementById("powerVideoWrapper_".concat(adTagId)); // Video Element + Video controller

                        this.powerVideo = documentI.getElementById("powerVideo_".concat(adTagId));
                        this.powerVideoControls = documentI.getElementById("powerVideoControls_".concat(adTagId));
                        this.powerVideoCover = documentI.getElementById("powerVideoCover_".concat(adTagId)); // Top Left Element

                        this.titleVideo = documentI.getElementById("titleVideo_".concat(adTagId));
                        this.viewInfoNum = documentI.getElementById("viewInfoNum_".concat(adTagId));
                        this.viewLikeNum = documentI.getElementById("viewInfoNum_".concat(adTagId)); // Top Right Element

                        this.adsLogoBrand = documentI.getElementById("adsLogoBrand_".concat(adTagId)); // Share

                        this.fbBtn = documentI.getElementById("fbBtn");
                        this.twitterBtn = documentI.getElementById("twitterBtn");
                        this.linkedinBtn = documentI.getElementById("linkedinBtn");
                        this.pinterestBtn = documentI.getElementById("pinterestBtn");
                        this.whatsappBtn = documentI.getElementById("whatsappBtn");
                        this.emailBtn = documentI.getElementById("emailBtn"); // Play BTN

                        this.playVideoBtn = documentI.getElementById("playVideoBtn_".concat(adTagId));
                        this.playIcon = this.playVideoBtn.querySelectorAll('svg')[0];
                        this.pauseIcon = this.playVideoBtn.querySelectorAll('svg')[1]; // Video Loading

                        this.vPlayerLoading = documentI.getElementById("vPlayerLoading_".concat(adTagId)); // Back + Next BTN

                        this.videoBackBtn = documentI.getElementById("videoBackBtn_".concat(adTagId));
                        this.videoNextBtn = documentI.getElementById("videoNextBtn_".concat(adTagId)); // Process bar

                        this.progressBar = documentI.getElementById("videoProgressBar_".concat(adTagId));
                        this.seek = documentI.getElementById("seek_".concat(adTagId));
                        this.seekTooltip = documentI.getElementById("seekTooltip_".concat(adTagId)); // Timeelapsed + Duration

                        this.timeElapsed = documentI.getElementById("timeElapsed_".concat(adTagId));
                        this.duration = documentI.getElementById("duration_".concat(adTagId)); // Skip x Sec

                        this.skipSecBack = documentI.getElementById("skipSecBack_".concat(adTagId));
                        this.skipSecForward = documentI.getElementById("skipSecForward_".concat(adTagId)); // Volume

                        this.volumeButton = documentI.getElementById("volumeBtn_".concat(adTagId));
                        this.volumeIcons = this.volumeButton.querySelectorAll('svg');
                        this.volumeOn = documentI.getElementById("volumeOn_".concat(adTagId));
                        this.volumeMute = documentI.getElementById("volumeOff_".concat(adTagId));
                        this.volumeProcessBar = documentI.getElementById("volumeProcessBar_".concat(adTagId));
                        this.volumeBar = documentI.getElementById("volumeBar_".concat(adTagId));
                        this.soundScrabberWrapper = documentI.getElementById("soundScrabberWrapper_".concat(adTagId)); // Fullscreen BTN

                        this.fullscreenButton = documentI.getElementById("fullscreenBtn_".concat(adTagId));
                        this.fullscreenIcons = this.fullscreenButton.querySelectorAll('svg'); // Auto Next Skip BTN
                        // if (this.videoSetting.adType == this.adType.InStream) {

                        this.autoSkipWrapper = documentI.getElementById("autoSkipWrapper_".concat(adTagId));
                        this.autoSkipNext = documentI.getElementById("autoSkipNext_".concat(adTagId));
                        this.autoSkipStay = documentI.getElementById("autoSkipStay_".concat(adTagId)); // }
                        // List Icon Video Controller

                        this.listVideoController = document.querySelectorAll("#iconController_".concat(adTagId)); // Add Event Listener

                        this.addEventListner(playerSkinType);
                    }
                }, {
                    key: "addEventListner",
                    value: function addEventListner(playerSkinType) {
                        var _this = this;

                        // Floating Setup
                        if (this.userAction.isEnableFloating && this.videoSetting.floatingSetting && this.videoSetting.floatingSetting.closeBtn.active) {
                            this.floatingCloseBtn.addEventListener('click', this.floatingCloseFunc.bind(this));
                        } // Fix Issue: Floating


                        window.addEventListener('resize', this.windowSizeChange.bind(this));
                        this.windowSizeChange();
                        this.windowSizeChange(); // Add Event Listener For Hide Controller In Mobile

                        if (utlis_mobileDetect()) {
                            this.powerVideoContainer.addEventListener("mouseup", this.processAutoHideControllerMobile.bind(this));
                        } // Skin 2 L + R:


                        if (playerSkinType == 2) {
                            this.sliderVideoLeft.addEventListener('click', this.processSliderVideoVertical.bind(this));
                            this.sliderVideoRight.addEventListener('click', this.processSliderVideoVertical.bind(this));
                        } // Back + Next Video BTN


                        if (playerSkinType == 4) {
                            this.backVideoBtn.addEventListener('click', this.backNextVideoBtn.bind(this));
                            this.nextVideoBtn.addEventListener('click', this.backNextVideoBtn.bind(this));
                        } // List a Tag Video index Dom


                        if (playerSkinType == 2 || playerSkinType == 5 || playerSkinType == 6 || playerSkinType == 7) {
                            if (!this.listVideosDom) return;
                            this.listVideosDom.forEach(function (item) {
                                item.addEventListener("click", _this.clickVideoToPlay.bind(_this));
                            });
                        } // TopArticles


                        if (this.videoSetting.adType == this.adType.TopArticles) {
                            this.powerTopArtOverlay.addEventListener("click", this.clickBtnTopArt.bind(this));
                            this.powerTopArtPlayBtn.addEventListener("click", this.clickBtnTopArt.bind(this));
                            this.powerTopArtPlayPauseBtn.addEventListener("click", this.clickBtnTopArt.bind(this));
                            this.powerTopArtPrevBtn.addEventListener("click", this.clickBtnTopArt.bind(this));
                            this.powerTopArtNextBtn.addEventListener("click", this.clickBtnTopArt.bind(this)); // Set Data Slider Index + Slider Content

                            var documentI = this.powerRelatedIframe.contentWindow.document; // Slider Index

                            var listSliderIndex = documentI.querySelectorAll("#".concat(this.topArtSliderIndexID));

                            for (var i = 0; i < listSliderIndex.length; i++) {
                                listSliderIndex[i].addEventListener("click", this.clickBtnTopArt.bind(this));
                            } // Slider Content


                            this.powerTopArtSliderContent.addEventListener("click", this.clickBtnTopArt.bind(this));
                        } // Auto Next Skip BTN


                        if (this.videoSetting.adType == this.adType.InStream) {
                            this.autoSkipNext.addEventListener("click", this.backNextVideoBtn.bind(this));
                            this.autoSkipStay.addEventListener("click", this.clearTimerAutoNextStayVideo.bind(this));
                        }

                        this.adsLogoBrand.style.width = Configs.runWithPP ? "44px" : "60px";
                        this.adsLogoBrand.addEventListener("click", this.openLinkBrandHomepage.bind(this));
                        this.titleVideo.addEventListener("click", this.openLinkBrandHomepage.bind(this)); // Video 

                        this.powerVideo.addEventListener('loadedmetadata', this.initializeVideo.bind(this));
                        this.powerVideo.addEventListener('timeupdate', this.updateProgressBar.bind(this));
                        this.powerVideo.addEventListener('volumechange', this.updateVolumeIcon.bind(this));
                        this.powerVideo.addEventListener('ended', this.processVideoEnd.bind(this)); // Center Control

                        this.powerVideoCover.addEventListener('click', this.togglePlay.bind(this));
                        this.playVideoBtn.addEventListener('click', this.togglePlay.bind(this));
                        this.videoBackBtn.addEventListener('click', this.backNextVideoBtn.bind(this));
                        this.videoNextBtn.addEventListener('click', this.backNextVideoBtn.bind(this)); // Bottom Control

                        this.seek.addEventListener('input', this.skipAhead.bind(this));
                        this.seek.addEventListener('mousemove', this.updateSeekTooltip.bind(this));
                        this.skipSecBack.addEventListener('click', this.skipSecBackFunc.bind(this));
                        this.skipSecForward.addEventListener('click', this.skipSecForwardFunc.bind(this));
                        this.fullscreenButton.addEventListener('click', this.toggleFullScreen.bind(this)); // Set volume

                        this.volumeBar.addEventListener('input', this.updateVolume.bind(this));
                        this.volumeButton.addEventListener('click', this.toggleMute.bind(this));
                        this.volumeBar.value = this.volumeBar.getAttribute("max");
                        this.volumeProcessBar.value = this.volumeBar.value; // Share

                        this.fbBtn.addEventListener('click', this.shareBTN.bind(this));
                        this.twitterBtn.addEventListener('click', this.shareBTN.bind(this));
                        this.linkedinBtn.addEventListener('click', this.shareBTN.bind(this));
                        this.pinterestBtn.addEventListener('click', this.shareBTN.bind(this));
                        this.whatsappBtn.addEventListener('click', this.shareBTN.bind(this));
                        this.emailBtn.addEventListener('click', this.shareBTN.bind(this)); // Video Fullscreen Change
                        // We will have fullscreen as a variable holding all the prefix values we need
                        // If its false, there is no support!

                        var fullscreen = false;

                        if (document.fullscreenEnabled || document.webkitFullscreenEnabled) {
                            // Chrome + Safari + Opera
                            fullscreen = {
                                request: "webkitRequestFullscreen",
                                element: "webkitFullscreenElement",
                                exit: "webkitExitFullscreen",
                                event: "webkitfullscreenchange"
                            };
                        } else if (document.msfullscreenEnabled) {
                            // IE
                            fullscreen = {
                                request: "msRequestFullscreen",
                                element: "msFullscreenElement",
                                exit: "msExitFullscreen",
                                event: "msfullscreenchange"
                            };
                        } else if (document.mozfullscreenEnabled) {
                            // Mozila
                            fullscreen = {
                                request: "mozRequestFullScreen",
                                element: "mozFullScreenElement",
                                exit: "mozCancelFullScreen",
                                event: "mozfullscreenchange"
                            };
                        } else {
                            fullscreen = {
                                request: "requestFullscreen",
                                element: "fullscreenElement",
                                exit: "exitFullscreen",
                                event: "fullscreenchange"
                            };
                        }

                        if (fullscreen) {
                            var processExitFullscreen = function processExitFullscreen() {
                                // Remove hide video controller
                                _this.powerVideoControls.classList.remove('power-hidden');

                                _this.fullscreenIcons.forEach(function (icon) {
                                    return icon.classList.toggle('power-hidden');
                                }); // Change Video Fullscreen Status


                                _this.userAction.isFullscreen = false;

                                _this.removeMouseInFullscreen(); // Remove timer hide video controller


                                if (!_this.userAction.isMobile) {
                                    if (_this.timerHideController) {
                                        clearTimeout(_this.timerHideController);
                                        _this.timerHideController = null;
                                    }
                                }
                            };

                            if (utlis_mobileDetect() && getMobileOperatingSystem() == "iOS") {
                                // Trick to check user click pause in fullscreen <= 50ms -> user dont click pause -> play video after exit fullscreen
                                var timePauseToExit = 0;
                                this.powerVideo.addEventListener('webkitendfullscreen', function (event) {
                                    processExitFullscreen();
                                    var timeExit = Date.now() - timePauseToExit;
                                    if (!_this.powerVideo.paused || timeExit <= 50) setTimeout(function () {
                                        return _this.play();
                                    }, 500);
                                });
                                this.powerVideo.addEventListener("pause", function (event) {
                                    if (!_this.userAction.isFullscreen) return;
                                    timePauseToExit = Date.now();

                                    _this.pause();
                                });
                            } else {
                                // Only process when not on fullscreen
                                document.addEventListener(fullscreen["event"], function (event) {
                                    if (!document[fullscreen["element"]]) {
                                        processExitFullscreen();
                                    }
                                });
                            }
                        }
                    }
                }, {
                    key: "removeEventListner",
                    value: function removeEventListner() {
                        var _this2 = this;

                        window.removeEventListener('resize', this.windowSizeChange.bind(this)); // Floating:

                        if (this.floatingCloseBtn) this.floatingCloseBtn.removeEventListener('click', this.floatingCloseFunc.bind(this)); // Skin 2 L + R:

                        if (this.sliderVideoLeft) this.sliderVideoLeft.removeEventListener('click', this.processSliderVideoVertical.bind(this));
                        if (this.sliderVideoRight) this.sliderVideoRight.removeEventListener('click', this.processSliderVideoVertical.bind(this)); // List a Tag Video index Dom

                        if (this.listVideosDom) {
                            this.listVideosDom.forEach(function (item) {
                                if (item) item.removeEventListener("click", _this2.clickVideoToPlay.bind(_this2));
                            });
                        } // Video 


                        if (this.powerVideo) {
                            this.powerVideo.removeEventListener('loadedmetadata', this.initializeVideo.bind(this));
                            this.powerVideo.removeEventListener('timeupdate', this.updateProgressBar.bind(this));
                            this.powerVideo.removeEventListener('volumechange', this.updateVolumeIcon.bind(this));
                            this.powerVideo.removeEventListener('ended', this.processVideoEnd.bind(this));
                        } // Center Control


                        if (this.powerVideoCover) this.powerVideoCover.removeEventListener('click', this.togglePlay.bind(this));
                        if (this.playVideoBtn) this.playVideoBtn.removeEventListener('click', this.togglePlay.bind(this));
                        if (this.videoBackBtn) this.videoBackBtn.removeEventListener('click', this.backNextVideoBtn.bind(this));
                        if (this.videoNextBtn) this.videoNextBtn.removeEventListener('click', this.backNextVideoBtn.bind(this));
                        if (this.backVideoBtn) this.backVideoBtn.removeEventListener('click', this.backNextVideoBtn.bind(this));
                        if (this.nextVideoBtn) this.nextVideoBtn.removeEventListener('click', this.backNextVideoBtn.bind(this)); // Botton Control

                        if (this.seek) {
                            this.seek.removeEventListener('input', this.skipAhead.bind(this));
                            this.seek.removeEventListener('mousemove', this.updateSeekTooltip.bind(this));
                        }

                        if (this.skipSecBack) this.skipSecBack.removeEventListener('click', this.skipSecBackFunc.bind(this));
                        if (this.skipSecForward) this.skipSecForward.removeEventListener('click', this.skipSecForwardFunc.bind(this));
                        if (this.volumeBar) this.volumeBar.removeEventListener('input', this.updateVolume.bind(this));
                        if (this.volumeButton) this.volumeButton.removeEventListener('click', this.toggleMute.bind(this));
                        if (this.fullscreenButton) this.fullscreenButton.removeEventListener('click', this.toggleFullScreen.bind(this)); // Share

                        if (this.fbBtn) this.fbBtn.removeEventListener('click', this.shareBTN.bind(this));
                        if (this.twitterBtn) this.twitterBtn.removeEventListener('click', this.shareBTN.bind(this));
                        if (this.linkedinBtn) this.linkedinBtn.removeEventListener('click', this.shareBTN.bind(this));
                        if (this.pinterestBtn) this.pinterestBtn.removeEventListener('click', this.shareBTN.bind(this));
                        if (this.whatsappBtn) this.whatsappBtn.removeEventListener('click', this.shareBTN.bind(this));
                        if (this.emailBtn) this.emailBtn.removeEventListener('click', this.shareBTN.bind(this));
                    } // Set Video source + Related Template

                }, {
                    key: "setCurrentVideoInfo",
                    value: function setCurrentVideoInfo() {
                        this.sendVideoEvent("changeVideo"); // Fix bug when video is playing and reload new video but not play again

                        if (this.userAction.isVideoPlaying) {
                            this.pause();
                            this.userAction.isVideoPlaying = true;
                        } else {
                            this.pause();
                        }

                        var curVideoSrc = this.listVideos[this.curVideoPlay];
                        this.titleVideo.innerText = curVideoSrc.title;
                        this.viewInfoNum.innerText = "31.8k";
                        this.viewLikeNum.innerText = "40"; // Reset Video Status

                        this.powerVideo.src = "";
                        this.powerVideo.innerHTML = ""; // Set Poster

                        this.powerVideo.setAttribute('poster', curVideoSrc.thumb);
                        this.userAction.isVideoLoaded = false; // Load Video Source

                        if (this.userAction.isVideoPlaying) this.loadVideoSource(); // Hide Auto Next Stay BTN For New Video

                        this.clearTimerAutoNextStayVideo();
                        if (this.autoSkipWrapper) this.autoSkipWrapper.classList.add('power-hidden');
                    }
                }, {
                    key: "refreshVideoContainer",
                    value: function refreshVideoContainer() {
                        this.setCurrentVideoInfo();
                        var document = this.powerRelatedIframe.contentWindow.document;
                        var type = this.videoSetting.playerSkinType; // reset video content type 2 5 6 7

                        if (type == 2 || type == 5 || type == 6 || type == 7) {
                            var listThumbnail = document.querySelectorAll("#powerThumbnail");

                            for (var i = 0; i < listThumbnail.length; i++) {
                                var item = listThumbnail[i];
                                var isCurItemPlaying = this.curVideoPlay == i;
                                var listDiv = item.querySelectorAll("div");
                                listDiv.forEach(function (element) {
                                    element.classList.remove("power-show");
                                    element.classList.remove("power-hidden");
                                });
                                listDiv[0].classList.add(isCurItemPlaying ? "power-show" : "power-hidden");
                                listDiv[1].classList.add(isCurItemPlaying ? "power-show" : "power-hidden");

                                if (type == 2 && isCurItemPlaying) {
                                    listDiv[2].classList.add("power-hidden");
                                } else if (type != 2) {
                                    listDiv[2].classList.add(isCurItemPlaying ? "power-hidden" : "power-show");
                                }
                            }
                        } // reset video content type 3 4 5


                        if (type == 3 || type == 4 || type == 5) {
                            var contentDiv = document.querySelectorAll("#powerCurVideoContent div");
                            contentDiv[0].textContent = this.listVideos[this.curVideoPlay].title;
                            contentDiv[2].textContent = this.listVideos[this.curVideoPlay].des;
                        }
                    } // Check Mouse in Fullscreen

                }, {
                    key: "processAutoHideControllerMobile",
                    value: function processAutoHideControllerMobile() {
                        var _this3 = this;

                        if (this.timerHideController) {
                            clearTimeout(this.timerHideController);
                            this.timerHideController = null;
                        }

                        this.powerVideoControls.classList.add("power-show");
                        this.powerVideoControls.classList.remove('power-hidden');
                        this.timerHideController = setTimeout(function () {
                            _this3.powerVideoControls.classList.add('power-hidden');

                            _this3.powerVideoControls.classList.remove("power-show");
                        }, this.userAction.timeHideController);
                    }
                }, {
                    key: "processAutoHideControllerPC",
                    value: function processAutoHideControllerPC() {
                        var _this4 = this;

                        if (this.timerHideController) {
                            clearTimeout(this.timerHideController);
                            this.timerHideController = null;
                        }

                        this.powerVideoControls.classList.remove('power-hidden');
                        this.timerHideController = setTimeout(function () {
                            _this4.powerVideoControls.classList.add('power-hidden');
                        }, this.userAction.timeHideController);
                    }
                }, {
                    key: "addMouseInFullscreen",
                    value: function addMouseInFullscreen() {
                        if (this.userAction.isMobile) {
                            this.processAutoHideControllerMobile();
                        } else {
                            this.funcProcessMouseInFullscreen = this.processAutoHideControllerPC.bind(this);
                            window.addEventListener('mousemove', this.funcProcessMouseInFullscreen);
                        }
                    }
                }, {
                    key: "removeMouseInFullscreen",
                    value: function removeMouseInFullscreen() {
                        if (!this.userAction.isMobile) {
                            window.removeEventListener("mousemove", this.funcProcessMouseInFullscreen);
                            this.funcProcessMouseInFullscreen = null;
                        }
                    } // Check and Change Size Icon + Layout Video

                }, {
                    key: "resizeIconAbove650",
                    value: function resizeIconAbove650() {
                        for (var _i6 = 0, _Object$entries2 = Object.entries(this.listIconSize); _i6 < _Object$entries2.length; _i6++) {
                            var _Object$entries2$_i = slicedToArray_default()(_Object$entries2[_i6], 2),
                                _ = _Object$entries2$_i[0],
                                item = _Object$entries2$_i[1];

                            var obj = document.getElementsByClassName(item["class"]);

                            if (obj) {
                                if (item["class"] != "share-group") {
                                    obj[0].classList.remove(item["class"] + "-under650");
                                } else {
                                    for (var _i7 = 0, _Object$entries3 = Object.entries(obj); _i7 < _Object$entries3.length; _i7++) {
                                        var _Object$entries3$_i = slicedToArray_default()(_Object$entries3[_i7], 2),
                                            k = _Object$entries3$_i[0],
                                            ico = _Object$entries3$_i[1];

                                        if (!ico) continue;
                                        ico.style = null;
                                        ico.classList.remove(item["class"] + "-under650");
                                    }
                                }
                            }
                        }
                    }
                }, {
                    key: "resizeIconUnder650",
                    value: function resizeIconUnder650() {
                        for (var _i8 = 0, _Object$entries4 = Object.entries(this.listIconSize); _i8 < _Object$entries4.length; _i8++) {
                            var _Object$entries4$_i = slicedToArray_default()(_Object$entries4[_i8], 2),
                                _ = _Object$entries4$_i[0],
                                item = _Object$entries4$_i[1];

                            var obj = document.getElementsByClassName(item["class"]);

                            if (obj) {
                                if (item["class"] != "share-group") {
                                    obj[0].classList.add(item["class"] + "-under650");
                                } else {
                                    var right = 32;

                                    for (var _i9 = 0, _Object$entries5 = Object.entries(obj); _i9 < _Object$entries5.length; _i9++) {
                                        var _Object$entries5$_i = slicedToArray_default()(_Object$entries5[_i9], 2),
                                            k = _Object$entries5$_i[0],
                                            ico = _Object$entries5$_i[1];

                                        if (!ico) continue;

                                        if (k == 0) {
                                            ico.style.left = "-25px";
                                        } else {
                                            ico.style.right = right + "px";
                                            right += 32;
                                        }

                                        ico.classList.add(item["class"] + "-under650");
                                    }

                                    ;
                                }
                            }
                        }
                    }
                }, {
                    key: "windowSizeChange",
                    value: function windowSizeChange() {
                        // < 650px -> change icon
                        if (this.getWidth() <= 649) this.resizeIconUnder650();else this.resizeIconAbove650(); // HNL

                        if (this.videoSetting.adType == this.adType.OutStream && !this.userAction.isVisible) return;
                        var playerSkinType = this.videoSetting.playerSkinType; // Resize + Position Video

                        this.powerRelatedIframe.style.height = this.powerVideoPlaceholder.offsetHeight + "px";

                        if (this.videoSetting.adType != this.adType.OutStream) {
                            this.powerVideoContainerWrap.style.height = this.powerVideoPlaceholder.offsetHeight + "px";
                        }

                        var videoContainerSize = "width: ".concat(this.powerVideoMainPlaceholder.offsetWidth, "px; height: ").concat(this.powerVideoMainPlaceholder.offsetHeight, "px;");
                        this.powerVideoContainer.style.cssText = "overflow: hidden; position: absolute; z-index: 1 !important; top: ".concat(this.powerVideoMainPlaceholder.offsetTop, "px; left: ").concat(this.powerVideoMainPlaceholder.offsetLeft, "px; ").concat(videoContainerSize);
                        var document = this.powerRelatedIframe.contentWindow.document;

                        if (playerSkinType == 2) {
                            var hTopVideoContainer = this.powerTopVideoContainer ? this.powerTopVideoContainer.offsetHeight : 0;
                            var hVideoPlayer = this.powerVideoContainer ? this.powerVideoContainer.offsetHeight : 0;
                            var wVideoPlayer = this.powerVideoContainer ? this.powerVideoContainer.offsetWidth : 0;
                            var wVideoThumb = wVideoPlayer / 5.25; // 5.25 -> aspect ratio of video play with video thumbnail

                            var hVideoThumb = wVideoThumb * 0.5625;
                            var marginLeft = 5;

                            if (wVideoThumb <= 105) {
                                marginLeft = 5;
                                wVideoThumb = 105;
                                hVideoThumb = wVideoThumb * 0.5625;
                            }

                            var playerskin2 = document.getElementById("playerskin2");
                            playerskin2.style.height = hVideoThumb + "px";
                            var leftSize = 0;
                            var listThumbnail = document.querySelectorAll("#powerVideoThumbnail");
                            listThumbnail.forEach(function (item) {
                                item.style.width = wVideoThumb + "px";
                                item.style.height = hVideoThumb + "px";
                                item.style.left = leftSize + "px";
                                leftSize += wVideoThumb + marginLeft; // 5px is margin-right video thumbnail
                            });
                            this.powerVideoContainerWrap.style.height = hTopVideoContainer + hVideoPlayer + hVideoThumb + 5 + "px"; // 5 is margin top of playerskin2 with Video Player
                        } else if (playerSkinType == 4) {
                            this.powerVideoPlaceholder.style.minWidth = "500px";
                            this.powerVideoMainPlaceholder.style.width = this.powerVideoContainerWrap.offsetWidth >= 600 ? "400px" : "300px";
                            this.powerVideoList.style.width = this.powerVideoContainerWrap.offsetWidth - this.powerVideoMainPlaceholder.offsetWidth - 94 + "px"; // 94 = 74 -> pre + next btn | 20 -> padding content

                            var hVideo = this.powerVideo.offsetHeight < 168.75 ? 168.75 : this.powerVideo.offsetHeight; // 168.75 -> min height video

                            this.powerVideoList.style.height = hVideo + "px";

                            var _videoContainerSize = "width: ".concat(this.powerVideoMainPlaceholder.offsetWidth, "px; height: ").concat(this.powerVideoMainPlaceholder.offsetHeight, "px;");

                            this.powerVideoContainer.style.cssText = "overflow: hidden; position: absolute; z-index: 1 !important; top: ".concat(this.powerVideoMainPlaceholder.offsetTop, "px; left: ").concat(this.backVideoBtn.offsetWidth, "px; ").concat(_videoContainerSize);
                            this.powerVideoList.style.height = hVideo + "px";
                        } else if (playerSkinType == 5) {
                            var _hTopVideoContainer = this.powerTopVideoContainer ? this.powerTopVideoContainer.offsetHeight : 0;

                            var _hVideoPlayer = this.powerVideoContainer ? this.powerVideoContainer.offsetHeight : 0;

                            var curVideoContent = document.getElementById("powerCurVideoContent");
                            var moreVideoList = this.listVideosDom.length < 2 ? this.listVideosDom[0].offsetHeight : this.listVideosDom[0].offsetHeight * 2;
                            this.powerVideoContainerWrap.style.height = _hTopVideoContainer + _hVideoPlayer + curVideoContent.offsetHeight + moreVideoList + "px";
                        } else if (playerSkinType == 6) {
                            var maxColNum = this.videoSetting.columnSetting.columnNumber;
                            var gap = 7; // grid-gap: 7px

                            var wThumnail = 130; // min-width: 130px thumbnail

                            var minWVideo = 300; // min-width: 300px video

                            var wVideoContainer3ColNum = minWVideo + (wThumnail * 3 + gap * 4); // 3: col num | 4: gap = col + 1

                            var wVideoContainer2ColNum = minWVideo + (wThumnail * 2 + gap * 3); // 2: col num | 3: gap = col + 1

                            var wVideoContainer1ColNum = minWVideo + (wThumnail * 1 + gap * 2); // 1: col num | 2: gap = col + 1

                            var colNums = 0;
                            var videoContainerWrap = this.powerVideoContainerWrap.offsetWidth;

                            if (videoContainerWrap >= wVideoContainer3ColNum) {
                                colNums = 3;
                            } else if (videoContainerWrap >= wVideoContainer2ColNum && videoContainerWrap < wVideoContainer3ColNum) {
                                colNums = 2;
                            } else if (videoContainerWrap >= wVideoContainer1ColNum && videoContainerWrap < wVideoContainer2ColNum) {
                                colNums = 1;
                            } else if (videoContainerWrap < wVideoContainer1ColNum) {
                                colNums = 0;
                            }

                            colNums = colNums <= maxColNum ? colNums : maxColNum;

                            if (colNums > 0) {
                                var curColumnNum = "";

                                for (var i = 0; i < colNums; i++) {
                                    curColumnNum += "".concat(wThumnail, "px ");
                                }

                                document.documentElement.style.setProperty("--power-playerskin67-columns", curColumnNum);
                                this.powerVideoList.style.display = "block";
                                this.powerVideoList.style.height = this.powerVideo.offsetHeight + "px";
                            } else {
                                this.powerVideoList.style.display = "none";
                            } // Reset pos for Related Video


                            if (this.videoSetting.columnSetting.columnPosition == "left") {
                                this.powerVideoContainer.style.right = "0px";
                            }
                        } else if (playerSkinType == 7) {
                            var _gap = 7; // grid-gap: 7px

                            var _wThumnail = 130; // min-width: 130px thumbnail

                            var _minWVideo = 300; // min-width: 300px video

                            var _wVideoContainer2ColNum = _minWVideo + (_wThumnail * 2 + _gap * 3); // 2: col num | 3: gap = col + 1


                            var _wVideoContainer1ColNum = _minWVideo + (_wThumnail * 1 + _gap * 2); // 1: col num | 2: gap = col + 1


                            var _videoContainerWrap = this.powerVideoContainerWrap.offsetWidth;

                            if (_videoContainerWrap >= _wVideoContainer2ColNum) {
                                var listContent = this.powerVideoList.querySelectorAll("#powerContent");
                                listContent.forEach(function (item) {
                                    item.style.display = "flex";
                                    item.style.width = "130px";
                                });
                                this.powerVideoList.style.display = "block";
                                this.powerVideoList.style.height = this.powerVideo.offsetHeight + "px";
                                document.documentElement.style.setProperty("--power-playerskin67-columns", "267px"); // 267px is width of content with 2 col
                            } else if (_videoContainerWrap >= _wVideoContainer1ColNum && _videoContainerWrap < _wVideoContainer2ColNum) {
                                var _listContent = this.powerVideoList.querySelectorAll("#powerContent");

                                _listContent.forEach(function (item) {
                                    item.style.display = "none";
                                    item.style.width = "0px";
                                });

                                this.powerVideoList.style.display = "block";
                                this.powerVideoList.style.height = this.powerVideo.offsetHeight + "px";
                                document.documentElement.style.setProperty("--power-playerskin67-columns", "130px"); // 130px is width of content with 1 col
                            } else if (_videoContainerWrap < _wVideoContainer1ColNum) {
                                this.powerVideoList.style.display = "none";
                            } // Reset pos for Related Video


                            if (this.videoSetting.columnSetting.columnPosition == "left") {
                                this.powerVideoContainer.style.right = "0px";
                            }
                        } else if (playerSkinType == 8) {
                            // TopArticles
                            var hTopArticlesDescription = this.userAction.isFloating ? 50 : 70; // power-description_wrapper

                            var hpowerVideoMainPlaceholder = Math.floor(this.powerVideoMainPlaceholder.offsetHeight);
                            this.powerVideoPlaceholder.style.width = "100%";
                            this.powerVideoPlaceholder.style.height = hpowerVideoMainPlaceholder + hTopArticlesDescription + "px";
                            this.powerTopArtMainContent.style.height = hpowerVideoMainPlaceholder + "px";
                            this.powerRelatedIframe.style.height = this.powerVideoPlaceholder.offsetHeight + "px";
                            this.powerVideoContainerWrap.style.height = this.powerVideoPlaceholder.offsetHeight + "px";

                            var _videoContainerSize2 = "width: ".concat(this.powerVideoMainPlaceholder.offsetWidth, "px; height: ").concat(this.powerVideoMainPlaceholder.offsetHeight, "px;");

                            this.powerVideoContainer.style.cssText = "overflow: hidden; position: absolute; top: ".concat(this.powerVideoMainPlaceholder.offsetTop, "px; left: ").concat(this.powerVideoMainPlaceholder.offsetLeft, "px; ").concat(_videoContainerSize2);
                        }
                    } // Floating

                }, {
                    key: "isElementInViewport",
                    value: function isElementInViewport(el) {
                        var rect = el.getBoundingClientRect();
                        return (// rect.top >= 0 && // Dont check top
                            rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth)
                        );
                    }
                }, {
                    key: "activeFloating",
                    value: function activeFloating() {
                        if (this.userAction.userClickCloseBtn || this.userAction.isFloating || !this.userAction.isEnableFloating || !this.videoSetting.floatingSetting || this.videoSetting.floatingSetting.floatingOnView) return; // Float On Bottom 

                        if (!this.videoSetting.floatingSetting.floatOnBottom && !this.isElementInViewport(this.powerVideoContainerWrap)) {
                            return;
                        }

                        this.userAction.isFloating = true; // Show Btn Close Floating

                        if (this.videoSetting.floatingSetting.closeBtn.active) {
                            this.floatingCloseBtn.classList.remove('power-hidden');
                            this.floatingCloseBtn.style.cssText = this.getFloatingCSS("close") + this.videoSetting.floatingSetting.closeBtn.position;
                        }

                        this.powerVideoWrapper.style.cssText = this.videoSetting.floatingSetting.position;

                        if (this.videoSetting.adType == this.adType.TopArticles) {
                            // TopArticles
                            var heightBeforeFloating = this.powerVideoContainerWrap.offsetHeight;
                            this.powerTopArtDescription.setAttribute("floating", "");
                            this.powerRelatedIframe.style.cssText = this.videoSetting.floatingSetting.position;
                            this.powerVideoWrapper.style.bottom = "50px"; // 50px is height of power-description_wrapper floating

                            this.windowSizeChange(); // Fixbug size powerVideoContainer

                            this.powerVideoContainerWrap.style.height = heightBeforeFloating;
                            this.powerVideoContainer.style.width = this.powerVideoContainerWrap.offsetWidth;
                            this.powerVideoContainer.style.height = heightBeforeFloating; // Change height Related cover if ads is showing

                            if (this.userAction.isShowAds) {
                                this.offRelatedVideo();
                                this.showAdsWrapper();
                            }
                        } // Fix video floating behide other template


                        this.powerVideoContainerWrap.style.zIndex = this.powerVideoWrapper.style.zIndex; // < 650px -> change icon

                        if (this.getWidth() <= 649) this.resizeIconUnder650();else this.resizeIconAbove650();
                    }
                }, {
                    key: "deActiveFloating",
                    value: function deActiveFloating() {
                        if (!this.userAction.isFloating || !this.userAction.isEnableFloating) return;
                        this.userAction.isFloating = false; // Hide Btn Close Floating

                        if (this.videoSetting.floatingSetting.closeBtn.active) {
                            this.floatingCloseBtn.classList.add('power-hidden');
                            this.floatingCloseBtn.style.cssText = this.getFloatingCSS("close");
                        }

                        if (this.videoSetting.adType == this.adType.TopArticles) {
                            // TopArticles
                            this.powerTopArtDescription.removeAttribute("floating");
                            this.powerRelatedIframe.style.cssText = this.getFloatingCSS("relatedIframe"); // Change height Related cover if ads is showing

                            if (this.userAction.isShowAds) {
                                this.offRelatedVideo();
                                this.showAdsWrapper();
                            }
                        }

                        this.powerVideoWrapper.style.cssText = "";
                        this.powerVideoContainerWrap.style.zIndex = null;
                        this.windowSizeChange();
                    }
                }, {
                    key: "floatingCloseFunc",
                    value: function floatingCloseFunc() {
                        if (this.userAction.userClickCloseBtn) return;
                        this.userAction.userClickCloseBtn = true;
                        this.deActiveFloating();
                        this.sendVideoEvent("floatingClose");
                    } // Btn open

                }, {
                    key: "openLinkBrandHomepage",
                    value: function openLinkBrandHomepage(event) {
                        this.clearTimerAutoNextStayVideo();
                        open("//" + Configs.brandHomepage);
                    } // Share BTN

                }, {
                    key: "shareBTN",
                    value: function shareBTN(event) {
                        this.clearTimerAutoNextStayVideo();
                        var type = event.target.id;
                        var link = "https://" + Configs.brandHomepage;

                        switch (type) {
                            case "fbBtn":
                                open("https://www.facebook.com/sharer.php?u=" + link);
                                break;

                            case "twitterBtn":
                                open("https://twitter.com/intent/tweet?url=" + link + "&text=%27Stop%20Committing%20Environmental%20Sins%20When%20Spring%20Cleaning%27&via=PubPower");
                                break;

                            case "linkedinBtn":
                                open("https://www.linkedin.com/shareArticle?mini=true&url=" + link + "&title=%27Stop%20Committing%20Environmental%20Sins%20When%20Spring%20Cleaning%27");
                                break;

                            case "pinterestBtn":
                                open("https://www.pinterest.com/pin/create/link/?url=" + link);
                                break;

                            case "whatsappBtn":
                                open("https://api.whatsapp.com/send/?phone&text=%27Stop+Committing+Environmental+Sins+When+Spring+Cleaning%27+" + link + "+via+%40Primis&app_absent=0");
                                break;

                            case "emailBtn":
                                var curVideoSrc = this.listVideos[this.curVideoPlay];
                                var desc = curVideoSrc.des ? curVideoSrc.des : "";
                                open("mailto:?subject=" + this.titleVideo.innerText + "&body=" + desc + " '" + this.titleVideo.innerText + "' " + link + ' via @PubPower');
                                break;
                        }
                    } // Func Process Video

                }, {
                    key: "processVideoEnd",
                    value: function processVideoEnd() {
                        if (this.listVideos.length < 2) return;
                        this.userAction.isVideoEnded = true;
                        this.processCurVideoPlayIndex(1);
                        this.refreshVideoContainer();
                    }
                }, {
                    key: "processSliderVideoVertical",
                    value: function processSliderVideoVertical(event) {
                        var id = event.currentTarget.id;
                        var adTag = this.placementAdsSlot.id;

                        switch (id) {
                            case "sliderVideoLeft_" + adTag:
                                this.sliderVideo.scrollLeft -= 150;
                                break;

                            case "sliderVideoRight_" + adTag:
                                this.sliderVideo.scrollLeft += 150;
                                break;
                        }
                    }
                }, {
                    key: "clickVideoToPlay",
                    value: function clickVideoToPlay(e) {
                        if (!e) return;
                        var clickVideoIndex = parseInt(e.currentTarget.getAttribute(this.dataVideoIndexProp));

                        if (this.curVideoPlay != clickVideoIndex) {
                            if (!this.userAction.userClickPlayVideo) this.showAllIconController();
                            this.userAction.userClickPlayVideo = true;
                            this.curVideoPlay = clickVideoIndex;
                            this.refreshVideoContainer();
                        }
                    }
                }, {
                    key: "backNextVideoBtn",
                    value: function backNextVideoBtn(event) {
                        var type = event.currentTarget.id;
                        var adTag = this.placementAdsSlot.id;

                        if (type == "backVideoBtn_" + adTag || type == "videoBackBtn_" + adTag) {
                            this.processCurVideoPlayIndex(-1);
                        } else if (type == "nextVideoBtn_" + adTag || type == "videoNextBtn_" + adTag || type == "autoSkipNext_" + adTag) {
                            this.processCurVideoPlayIndex(1);
                        }
                    }
                }, {
                    key: "processCurVideoPlayIndex",
                    value: function processCurVideoPlayIndex(type) {
                        this.curVideoPlay += type;

                        if (this.curVideoPlay < 0) {
                            this.curVideoPlay = this.listVideos.length - 1;
                        } else if (this.curVideoPlay > this.listVideos.length - 1) {
                            this.curVideoPlay = 0;
                        }

                        this.userAction.isVideoEnded = true;
                        if (!this.userAction.userClickPlayVideo) this.showAllIconController();
                        this.userAction.userClickPlayVideo = true;
                        this.refreshVideoContainer();
                    } // Play + Pause BTN

                }, {
                    key: "showAllIconController",
                    value: function showAllIconController() {
                        this.listVideoController.forEach(function (item) {
                            return item.classList.remove("power-hidden");
                        });
                    }
                }, {
                    key: "loadVideoSource",
                    value: function loadVideoSource() {
                        this.showLoading();
                        var curVideoSrc = this.listVideos[this.curVideoPlay];

                        for (var _i10 = 0, _Object$entries6 = Object.entries(curVideoSrc.video_url); _i10 < _Object$entries6.length; _i10++) {
                            var _Object$entries6$_i = slicedToArray_default()(_Object$entries6[_i10], 2),
                                key = _Object$entries6$_i[0],
                                value = _Object$entries6$_i[1];

                            if (value) {
                                var source = document.createElement("source");
                                source.src = value;
                                source.type = key == "m3u8" ? "application/x-mpegURL" : "video/" + key;
                                this.powerVideo.appendChild(source); // this.userAction.isVideoLoaded = true;
                                // this.userAction.isVideoPlaying = true;

                                if (key == "m3u8" && Hls.isSupported()) {
                                    if (this.hls) {
                                        this.hls.detachMedia();
                                        this.hls.destroy();
                                        this.hls = null;
                                    }

                                    this.hls = new Hls();
                                    this.hls.loadSource(value);
                                    this.hls.attachMedia(this.powerVideo); // this.hls.on(Hls.Events.MEDIA_ATTACHED, () => {
                                    //     this.hls.on(Hls.Events.MANIFEST_PARSED, (event, data) => {
                                    //         this.hideLoading();
                                    //         // this.logMess('manifest loaded, found ' + data.levels.length + ' quality level');
                                    //     });
                                    // });
                                } else {
                                    this.powerVideo.src = value;
                                    this.powerVideo.load();
                                }

                                break;
                            }
                        }
                    }
                }, {
                    key: "togglePlay",
                    value: function togglePlay() {
                        if (!this.userAction.userClickPlayVideo) {
                            this.toggleMute();
                            this.showAllIconController();
                        }

                        this.userAction.userClickPlayVideo = true;
                        this.clearTimerAutoNextStayVideo();

                        if (this.powerVideo.paused || this.powerVideo.ended) {
                            this.userAction.curVideoStatus = true;
                            this.play();
                        } else {
                            this.userAction.curVideoStatus = false;
                            this.pause();
                        }
                    }
                }, {
                    key: "play",
                    value: function play() {
                        if (!this.userAction.userClickPlayVideo) return; // this.logMess("Play Video");

                        if (!this.userAction.isVideoLoaded) {
                            this.loadVideoSource();
                            return;
                        }

                        this.sendVideoEvent("play");
                        this.hideLoading();
                        this.resumeTimerAutoNextVideo();
                        this.powerVideo.play();
                        this.powerVideoControls.classList.remove("power-show");
                        this.powerVideoControls.classList.remove("ads-logo-active");
                        this.userAction.isVideoPlaying = true;
                        this.playIcon.classList.add('power-hidden');
                        this.pauseIcon.classList.remove('power-hidden');
                    }
                }, {
                    key: "pause",
                    value: function pause() {
                        if (!this.userAction.userClickPlayVideo) return; // this.logMess("Pause Video");

                        this.pauseTimerAutoNextVideo();
                        this.sendVideoEvent("pause");
                        this.powerVideo.pause();
                        this.powerVideoControls.classList.add("power-show");
                        this.powerVideoControls.classList.add("ads-logo-active");
                        this.userAction.isVideoPlaying = false;
                        this.playIcon.classList.remove('power-hidden');
                        this.pauseIcon.classList.add('power-hidden');
                    } // Timer Auto Next Stay BTN

                }, {
                    key: "startTimerShowNextStayBTN",
                    value: function startTimerShowNextStayBTN() {
                        var _this5 = this;

                        if (this.videoSetting.adType != this.adType.InStream || !this.videoSetting.adConfig.autoSkip) return;
                        this.logMess("Start Timer Show Auto Next Stay Video");

                        if (this.timerAutoNextStay) {
                            this.timerAutoNextStay.pause();
                            this.timerAutoNextStay = null;
                        }

                        var autoSkip = this.videoSetting.adConfig.autoSkip;
                        this.timerAutoNextStay = new TimerDelay(function () {
                            _this5.timerAutoNextStay.pause();

                            _this5.timerAutoNextStay = null;

                            _this5.autoSkipWrapper.classList.remove('power-hidden');

                            _this5.startTimerAutoNextVideo(autoSkip);
                        }, autoSkip.showAutoSkip);
                        this.timerAutoNextStay.start();
                    }
                }, {
                    key: "startTimerAutoNextVideo",
                    value: function startTimerAutoNextVideo(autoSkip) {
                        var _this6 = this;

                        this.logMess("Start Timer Auto Next Video");

                        if (this.timerAutoNextVideo) {
                            clearInterval(this.timerAutoNextVideo);
                            this.timerAutoNextVideo = null;
                        }

                        var fillFull = this.autoSkipNext.querySelector("power");
                        if (!fillFull) return;
                        fillFull.style.width = "0px";
                        var wPixel = 0;
                        var curTime = 0;
                        var timeFps = 10; // milisec

                        var t = autoSkip.realtimeToSkip; // time

                        var s = this.autoSkipNext.offsetWidth; // width

                        var v = s / t * timeFps; // pixel / timeFps

                        this.timerAutoNextVideo = setInterval(function () {
                            if (_this6.isPauseTimerAutoNextVideo) return;
                            curTime += timeFps;
                            wPixel += v;
                            fillFull.style.width = wPixel + "px";

                            if (curTime >= t) {
                                _this6.clearTimerAutoNextStayVideo();

                                _this6.backNextVideoBtn({
                                    currentTarget: {
                                        id: "autoSkipNext_" + _this6.placementAdsSlot.id
                                    }
                                });
                            }
                        }, timeFps);
                    }
                }, {
                    key: "pauseTimerAutoNextVideo",
                    value: function pauseTimerAutoNextVideo() {
                        if (this.isPauseTimerAutoNextVideo) return;
                        if (this.videoSetting.adType != this.adType.InStream || !this.videoSetting.adConfig.autoSkip) return;
                        if (this.timerAutoNextStay) this.timerAutoNextStay.pause();
                        this.isPauseTimerAutoNextVideo = true;
                    }
                }, {
                    key: "resumeTimerAutoNextVideo",
                    value: function resumeTimerAutoNextVideo() {
                        if (!this.isPauseTimerAutoNextVideo) return;
                        if (this.videoSetting.adType != this.adType.InStream || !this.videoSetting.adConfig.autoSkip) return;
                        if (this.timerAutoNextStay) this.timerAutoNextStay.resume();
                        this.isPauseTimerAutoNextVideo = false;
                    }
                }, {
                    key: "clearTimerAutoNextStayVideo",
                    value: function clearTimerAutoNextStayVideo() {
                        if (this.videoSetting.adType != this.adType.InStream || !this.videoSetting.adConfig.autoSkip) return;
                        this.logMess("Clear All Timer Auto Next Stay Video");

                        if (this.timerAutoNextStay) {
                            this.timerAutoNextStay.pause();
                            this.timerAutoNextStay = null;
                        }

                        if (this.timerAutoNextVideo) {
                            clearInterval(this.timerAutoNextVideo);
                            this.timerAutoNextVideo = null;
                        }

                        if (this.autoSkipWrapper) this.autoSkipWrapper.classList.add('power-hidden');
                        this.isPauseTimerAutoNextVideo = false;
                    } // On Off Related of Video When Play Ads

                }, {
                    key: "offRelatedVideo",
                    value: function offRelatedVideo() {
                        var _this7 = this;

                        this.pauseTimerAutoNextVideo();
                        var playerSkinType = this.videoSetting.playerSkinType;

                        if (playerSkinType == 2) {
                            this.coverRelatedContent.forEach(function (item) {
                                return item.style.height = "100%";
                            });
                        } else if (playerSkinType == 4) {
                            this.coverRelatedContent.forEach(function (item) {
                                item.style.width = _this7.backVideoBtn.offsetWidth + "px";
                                item.style.height = "100%";
                            });
                        } else if (playerSkinType == 5) {
                            this.coverRelatedContent.forEach(function (item) {
                                return item.style.height = _this7.powerVideoList.offsetHeight + "px";
                            });
                        } else if (playerSkinType == 6 || playerSkinType == 7) {
                            var height = this.powerVideoList.offsetHeight;
                            this.coverRelatedContent.forEach(function (item) {
                                return item.style.height = "".concat(height, "px");
                            });
                        } else if (playerSkinType == 8) {
                            var _height = this.powerVideoContainerWrap.offsetHeight;
                            this.coverRelatedContent.forEach(function (item) {
                                return item.style.height = "".concat(_height, "px");
                            });
                        }
                    }
                }, {
                    key: "onRelatedVideo",
                    value: function onRelatedVideo() {
                        var _this8 = this;

                        this.resumeTimerAutoNextVideo();
                        var playerSkinType = this.videoSetting.playerSkinType;

                        if (playerSkinType == 4) {
                            this.coverRelatedContent.forEach(function (item) {
                                item.style.width = _this8.backVideoBtn.offsetWidth + "px";
                                item.style.height = null;
                            });
                        } else if (playerSkinType == 2 || playerSkinType == 5 || playerSkinType == 6 || playerSkinType == 7 || playerSkinType == 8) {
                            this.coverRelatedContent.forEach(function (item) {
                                return item.style.height = null;
                            });
                        }
                    } // Video Loading

                }, {
                    key: "showLoading",
                    value: function showLoading() {
                        if (!this.vPlayerLoading) return;
                        this.vPlayerLoading.classList.remove("power-hidden");
                    }
                }, {
                    key: "hideLoading",
                    value: function hideLoading() {
                        if (!this.vPlayerLoading) return;
                        this.vPlayerLoading.classList.add("power-hidden");
                    } // Show + Hide Video Container for Outstream

                }, {
                    key: "showVideoContainer",
                    value: function showVideoContainer(isPlacementAdSlot) {
                        if (!this.powerVideoContainerWrap) return;
                        this.userAction.isVisible = true;

                        if (isPlacementAdSlot) {
                            var w = this.powerVideoContainerWrap.offsetWidth;
                            this.powerVideoContainerWrap.style.height = "".concat(Math.floor(w * 0.5625), "px");
                        }
                    }
                }, {
                    key: "hideVideoContainer",
                    value: function hideVideoContainer() {
                        if (!this.powerVideoContainerWrap) return; // HNL

                        this.userAction.isVisible = false;
                        this.powerVideoContainerWrap.style.height = "0px";
                    } // Anim Show Hide for Outstream // HNL
                    // showAnimOutstream() {
                    // if (!this.powerVideoWrapper || !this.videoSetting.floatingSetting) return;
                    // const anim = "pubpowerShow" + this.videoSetting.floatingSetting.posAnim;
                    // this.powerVideoWrapper.classList.add(anim);
                    // setTimeout(() => {
                    //     this.powerVideoWrapper.classList.remove(anim);
                    // }, 1550);
                    // }
                    // hideAnimOutstream() {
                    //     if (!this.powerVideoWrapper || !this.videoSetting.floatingSetting) return;
                    //     const anim = "pubpowerHide" + this.videoSetting.floatingSetting.posAnim;
                    //     this.powerVideoWrapper.classList.add(anim);
                    //     setTimeout(() => {
                    //         this.powerVideoWrapper.classList.remove(anim);
                    //     }, 1550);
                    // }

                }, {
                    key: "hideAdOutstream",
                    value: function hideAdOutstream() {
                        if (this.powerVideo) {
                            this.powerVideo.style.display = "none";
                        }

                        if (this.powerVideoControls) {
                            this.powerVideoControls.style.display = "none";
                        }

                        if (this.powerVideoCover) {
                            this.powerVideoCover.style.display = "none";
                        }
                    } // Get size video container

                }, {
                    key: "getFullSizeWrapper",
                    value: function getFullSizeWrapper() {
                        try {
                            var viewWrapper = this.videoSetting.adType == this.adType.OutStream ? this.getPowerVideoContainer() : this.powerVideoContainerWrap;
                            var w = Math.floor(viewWrapper.offsetWidth);
                            var h = Math.floor(w * 0.5625);
                            return [w, h];
                        } catch (e) {
                            return null;
                        }
                    }
                }, {
                    key: "getWidth",
                    value: function getWidth() {
                        try {
                            var playerWidth = this.userAction.isFloating ? this.powerVideoWrapper.offsetWidth : this.powerVideoContainer.offsetWidth;
                            return playerWidth ? playerWidth : null;
                        } catch (e) {
                            return null;
                        }
                    } // Set callback btn close floating

                }, {
                    key: "setVideoController",
                    value: function setVideoController(callback) {
                        this.userAction.videoControllerCB = callback;
                    }
                }, {
                    key: "sendVideoEvent",
                    value: function sendVideoEvent(event) {
                        if (this.userAction.videoControllerCB) this.userAction.videoControllerCB(event);
                    } // Get Ads Placeholder

                }, {
                    key: "getAdsPlaceholder",
                    value: function getAdsPlaceholder() {
                        return this.powerAdsPlaceholder;
                    } // Get Video Container

                }, {
                    key: "getPowerVideoContainer",
                    value: function getPowerVideoContainer() {
                        if (this.videoSetting.adType == this.adType.TopArticles) {
                            // TopArticles
                            return this.placementAdsSlot;
                        } else if (this.videoSetting.adType == this.adType.OutStream) {
                            // OutStream
                            return this.powerVideoContainerWrap; // HNL
                        } else {
                            // Instream
                            return this.powerVideoContainer;
                        }
                    } // TopArticles
                    // Play + Pause TopArticles

                }, {
                    key: "toggleTopArtPlay",
                    value: function toggleTopArtPlay() {
                        if (!this.userAction.userClickPlayVideo) this.setTopArtSliderInfor(this.curSliderContent);
                        this.userAction.userClickPlayVideo = true;

                        if (!this.userAction.isVideoPlaying) {
                            this.playTopArt();
                        } else {
                            this.pauseTopArt();
                        }

                        this.userAction.curVideoStatus = this.userAction.isVideoPlaying;
                    }
                }, {
                    key: "playTopArt",
                    value: function playTopArt() {
                        if (!this.userAction.userClickPlayVideo) return;
                        this.logMess("Play TopArticles");
                        this.userAction.isVideoPlaying = true; // Change icon play + pause

                        var svgBtn = this.powerTopArtPlayPauseBtn.querySelectorAll('svg');
                        svgBtn[0].classList.add('power-hidden');
                        svgBtn[1].classList.remove('power-hidden'); // Hide Overlay + Play Center

                        this.powerTopArtOverlay.classList.add("power-hidden");
                        this.powerTopArtPlayBtn.classList.add("power-hidden");
                        this.stopRunAnimTopArt();
                    }
                }, {
                    key: "pauseTopArt",
                    value: function pauseTopArt() {
                        if (!this.userAction.userClickPlayVideo) return;
                        this.logMess("Pause TopArticles");
                        this.userAction.isVideoPlaying = false; // Change icon play + pause

                        var svgBtn = this.powerTopArtPlayPauseBtn.querySelectorAll('svg');
                        svgBtn[0].classList.remove('power-hidden');
                        svgBtn[1].classList.add('power-hidden'); // Show Overlay + Play Center

                        this.powerTopArtOverlay.classList.remove("power-hidden");
                        this.powerTopArtPlayBtn.classList.remove("power-hidden");
                        this.stopRunAnimTopArt();
                    } // Show + Hide Video Wrapper

                }, {
                    key: "showAdsWrapper",
                    value: function showAdsWrapper() {
                        if (!this.powerVideoContainer) return;
                        this.userAction.isShowAds = true;

                        if (!this.userAction.isFloating) {
                            this.powerVideoContainer.style.zIndex = "1 !important";
                        } else {
                            this.powerRelatedIframe.style.zIndex = null;
                        }
                    }
                }, {
                    key: "hideAdsWrapper",
                    value: function hideAdsWrapper() {
                        if (!this.powerVideoContainer) return;
                        this.userAction.isShowAds = false;

                        if (!this.userAction.isFloating) {
                            this.powerVideoContainer.style.zIndex = "0 !important";
                        } else {
                            var curStyle = this.powerRelatedIframe.style.cssText + "; z-index: ".concat(this.powerVideoWrapper.style.zIndex, " !important");
                            this.powerRelatedIframe.style.cssText = curStyle;
                        }
                    }
                }, {
                    key: "clickBtnTopArt",
                    value: function clickBtnTopArt(event) {
                        event.preventDefault;

                        try {
                            var target = event.currentTarget;
                            var id = target.id;

                            if (id == "powerTopArtOverlay" || id == "powerTopArtPlayBtn") {
                                this.setupTopArtTimer();
                                this.toggleTopArtPlay();
                            } else if (id == "powerTopArtPlayPauseBtn") {
                                this.toggleTopArtPlay();
                            } else if (id == "powerTopArtPrevBtn") {
                                this.processSliderIndex(-1);
                            } else if (id == "powerTopArtNextBtn") {
                                this.processSliderIndex(1);
                            } else if (id == this.topArtSliderIndexID) {
                                var dataIndex = target.getAttribute(this.dataSliderIndexTopArt);
                                if (this.curSliderContent == dataIndex) return;
                                this.setTopArtSliderInfor(parseInt(dataIndex), true); // Set timer for slider play next content

                                this.setupTopArtTimer(true);
                            } else if (id == "powerTopArtSliderContent") {
                                var rect = target.getBoundingClientRect();
                                var x = event.clientX - rect.left;

                                if (x <= target.offsetWidth * 0.5) {
                                    this.processSliderIndex(-1);
                                } else {
                                    this.processSliderIndex(1);
                                }
                            }
                        } catch (e) {
                            this.logMess("Err: " + e);
                        }
                    }
                }, {
                    key: "processSliderIndex",
                    value: function processSliderIndex(type) {
                        this.curSliderContent += type;

                        if (this.curSliderContent < 0) {
                            this.curSliderContent = this.sliderContents.length - 1;
                        } else if (this.curSliderContent > this.sliderContents.length - 1) {
                            this.curSliderContent = 0;
                        }

                        this.setTopArtSliderInfor(this.curSliderContent, true); // Set timer for slider play next content

                        this.setupTopArtTimer(true);
                    } // Process Description Text

                }, {
                    key: "getTopArtWidth",
                    value: function getTopArtWidth() {
                        try {
                            var playerWidth = this.userAction.isFloating ? this.powerRelatedIframe.offsetWidth : this.powerVideoContainerWrap.offsetWidth;
                            return playerWidth ? playerWidth : null;
                        } catch (e) {
                            return null;
                        }
                    }
                }, {
                    key: "setDescLineNum",
                    value: function setDescLineNum(num) {
                        if (num == 1) {
                            this.powerTopArtDescription.setAttribute("one", "");
                        } else {
                            this.powerTopArtDescription.removeAttribute("one");
                        }
                    }
                }, {
                    key: "calcWidthDescText",
                    value: function calcWidthDescText(text) {
                        var isPadding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                        if (!text) return 0;
                        var spanEle = document.createElement("span");
                        spanEle.style.fontFamily = "Roboto";
                        spanEle.style.fontSize = 20 + "px";
                        spanEle.style.height = 'auto';
                        spanEle.style.width = 'auto';
                        spanEle.style.position = 'absolute';
                        if (isPadding) spanEle.style.padding = "4px 10px 6px";
                        spanEle.style.whiteSpace = 'no-wrap';
                        spanEle.innerHTML = text;
                        document.body.appendChild(spanEle);
                        var w = Math.ceil(spanEle.clientWidth);
                        document.body.removeChild(spanEle);
                        return w;
                    }
                }, {
                    key: "getDescTextFor2Line",
                    value: function getDescTextFor2Line(text, maxSizeDesc) {
                        if (!text) return;

                        try {
                            var wordCount = text.split(" ");
                            var wordSplit = Math.ceil(wordCount.length * 2 / 3);
                            var line1 = "";
                            var line2 = "";

                            for (var i = 0; i < wordCount.length; i++) {
                                var word = wordCount[i];
                                var wTemp = this.calcWidthDescText(line1 + word);

                                if (i <= wordSplit && wTemp < maxSizeDesc) {
                                    line1 += word + " ";
                                } else {
                                    line2 += word + " ";
                                }
                            }

                            line1 = line1.trim();
                            line2 = line2.trim();
                            var wLine1 = this.calcWidthDescText(line1);
                            var wLine2 = this.calcWidthDescText(line2);
                            return {
                                line1: line1,
                                line2: line2,
                                wLine2: wLine2 > wLine1 * 0.5 ? wLine1 * 0.5 : null
                            };
                        } catch (err) {
                            this.logMess("Err: " + err);
                            return {
                                line1: "",
                                line2: "",
                                wLine2: null
                            };
                        }
                    }
                }, {
                    key: "processDescription",
                    value: function processDescription(sliderTitle, line1, line2) {
                        try {
                            var wTitle = this.calcWidthDescText(sliderTitle, true);
                            var wDescription = this.maxWidthDescText - 44; // 44: power-vertical-line + padding description

                            var borderDesc = 40; // 20 * 2

                            var documentI = this.powerRelatedIframe.contentWindow.document;
                            var readMoreWidth = documentI.querySelector(".power-topart__frame[open] > .power-readmore_wrapper");
                            var maxSizeDesc = this.getTopArtWidth() - borderDesc - readMoreWidth.offsetWidth;
                            maxSizeDesc = maxSizeDesc < wDescription ? maxSizeDesc : wDescription;

                            if (wTitle < maxSizeDesc) {
                                this.setDescLineNum(1);
                                line1.innerText = sliderTitle;
                            } else {
                                var titleDesc = this.getDescTextFor2Line(sliderTitle, maxSizeDesc);
                                line1.innerText = titleDesc.line1;
                                line2.innerText = titleDesc.line2;
                                if (titleDesc.wLine2) line2.style.width = titleDesc.wLine2 + "px";
                            }
                        } catch (e) {
                            this.logMess("Err: " + e);
                        }
                    }
                }, {
                    key: "setTopArtSliderInfor",
                    value: function setTopArtSliderInfor(index) {
                        var _this9 = this;

                        var isResetFill = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                        this.curSliderContent = index; // Set Description for Slider

                        var sliderItem = this.sliderContents[index];
                        this.powerTopArtDescription.href = sliderItem.link;
                        var vline = this.powerTopArtDescription.querySelector(".power-vertical-line");
                        vline.style.animation = "none";
                        vline.offsetHeight; // Reset animation

                        vline.style.animation = null;
                        var line1 = this.powerTopArtDescription.querySelector(".power-description_line1");
                        line1.style.animation = "none";
                        line1.offsetHeight; // Reset animation

                        line1.style.animation = null;
                        var line2 = this.powerTopArtDescription.querySelector(".power-description_line2");
                        line2.style.animation = "none";
                        line2.offsetHeight; // Reset animation

                        line2.style.animation = null; // Calculate Width Set Title To Line

                        setTimeout(function () {
                            _this9.processDescription(sliderItem.title, line1, line2);
                        }, 100); // Start Anim Description

                        this.powerTopArtDescription.setAttribute("open", ""); // Set Slider Index (set full all slider index 0 > index)

                        var documentI = this.powerRelatedIframe.contentWindow.document;
                        var listSliderIndex = documentI.querySelectorAll("#".concat(this.topArtSliderIndexID)); // Reset all slider index to default

                        listSliderIndex.forEach(function (item, iIndex) {
                            item.removeAttribute("full");
                            item.removeAttribute("open");
                            var fill = item.querySelector(".power_progress_fill");

                            if (fill && isResetFill) {
                                fill.classList.remove("power_progress_fill");
                                fill.offsetHeight; // Reset animation

                                fill.classList.add("power_progress_fill");
                            }
                        }); // Set Full all slider index <= index

                        for (var i = 0; i <= index - 1; i++) {
                            listSliderIndex[i].setAttribute("full", "");
                        } // Run animation for slider index


                        listSliderIndex[index].setAttribute("open", ""); // Set Slider Content Anim

                        var listSlider = this.powerTopArtSliderContent.getElementsByClassName("power-topart__frame");

                        for (var _i11 = 0; _i11 < listSlider.length; _i11++) {
                            var element = listSlider[_i11];

                            if (index == _i11) {
                                element.setAttribute("open", "");
                                element.classList.remove("power-hidden");
                            } else {
                                element.removeAttribute("open");
                                element.classList.add("power-hidden");
                            }
                        }
                    }
                }, {
                    key: "stopRunAnimTopArt",
                    value: function stopRunAnimTopArt() {
                        var _this10 = this;

                        // Cotroller slider timer
                        if (this.timerSliderCountdown) {
                            if (this.userAction.isVideoPlaying) {
                                this.timerSliderCountdown.resume();
                            } else {
                                this.timerSliderCountdown.pause();
                            }
                        } // Play Stop Animation Slider Index


                        var documentI = this.powerRelatedIframe.contentWindow.document;
                        var listSliderIndex = documentI.querySelectorAll("#".concat(this.topArtSliderIndexID)); // Reset all slider index to default

                        listSliderIndex.forEach(function (item, iIndex) {
                            if (_this10.curSliderContent == iIndex && _this10.userAction.isVideoPlaying) {
                                item.setAttribute("open", "");
                            } else {
                                item.removeAttribute("open");
                            }
                        }); // Play Stop Animation Slider Content

                        var listSlider = this.powerTopArtSliderContent.querySelectorAll(".power-topart__frame");

                        for (var i = 0; i < listSlider.length; i++) {
                            var element = listSlider[i];

                            if (this.curSliderContent == i && this.userAction.isVideoPlaying) {
                                element.setAttribute("open", "");
                                element.classList.remove("power-hidden");
                            } else {
                                element.removeAttribute("open");
                                if (this.curSliderContent != i) element.classList.add("power-hidden");
                            }
                        }
                    }
                }, {
                    key: "setupTopArtTimer",
                    value: function setupTopArtTimer() {
                        var _this11 = this;

                        var isReset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

                        if (isReset) {
                            if (this.timerSliderCountdown) this.timerSliderCountdown.pause();
                            this.timerSliderCountdown = null;
                        }

                        if (this.timerSliderCountdown) return;
                        this.timerSliderCountdown = new TimerDelay(function () {
                            _this11.timerSliderCountdown.pause();

                            _this11.timerSliderCountdown = null;

                            _this11.processSliderIndex(1);
                        }, this.timerSliderDelay);
                        this.timerSliderCountdown.start();
                    } // formatTime takes a time length in seconds and returns the time in minutes and seconds

                }, {
                    key: "isVideoBegin",
                    value: function isVideoBegin() {
                        this.logMess("currentTime: " + this.powerVideo.currentTime);
                        return this.powerVideo.currentTime <= 0.9;
                    }
                }, {
                    key: "formatTime",
                    value: function formatTime(timeInSeconds) {
                        var result = new Date(timeInSeconds * 1000).toISOString().substr(11, 8);
                        return {
                            minutes: result.substr(3, 2),
                            seconds: result.substr(6, 2)
                        };
                    } //

                }, {
                    key: "updateProgressBar",
                    value: function updateProgressBar() {
                        this.seek.value = Math.floor(this.powerVideo.currentTime);
                        this.progressBar.value = Math.floor(this.powerVideo.currentTime); // Update Time Elapsed
                        // updateTimeElapsed indicates how far through the video
                        // the current playback is by updating the timeElapsed element

                        var time = this.formatTime(Math.round(this.powerVideo.currentTime));
                        this.timeElapsed.innerText = "".concat(time.minutes, ":").concat(time.seconds);
                        this.timeElapsed.setAttribute('datetime', "".concat(time.minutes, "m ").concat(time.seconds, "s"));
                    }
                }, {
                    key: "updateSeekTooltip",
                    value: function updateSeekTooltip(event) {
                        var target = event.target;
                        var max = target.getAttribute('max');
                        if (max == null) return;
                        var skipTo = Math.round(event.offsetX / target.clientWidth * parseInt(max, 10));
                        target.setAttribute('data-seek', skipTo); // Set Tooltip Position

                        var rect = this.powerVideo.getBoundingClientRect(); // const maxPos

                        var posX = Math.min(event.pageX - rect.left, rect.right); // rect.width - rect.left

                        posX = posX <= 15 ? posX + 15 : posX - 15;
                        this.seekTooltip.style.left = "".concat(posX, "px"); // Set Tooltip Time

                        var t = this.formatTime(skipTo);
                        this.seekTooltip.textContent = "".concat(t.minutes, ":").concat(t.seconds);
                    } // Skip x Sec

                }, {
                    key: "skipAhead",
                    value: function skipAhead(event) {
                        var _this12 = this;

                        this.clearTimerAutoNextStayVideo();
                        var skipTo = event.target.dataset.seek ? event.target.dataset.seek : event.target.value;
                        this.powerVideo.currentTime = skipTo;
                        this.progressBar.value = skipTo;
                        this.seek.value = skipTo;

                        if (this.userAction.isMobile) {
                            var offsetX = skipTo / parseInt(this.seek.max, 10) * this.seek.clientWidth; // Set Tooltip Position

                            var rect = this.powerVideo.getBoundingClientRect();
                            var posX = Math.min(offsetX + rect.left, rect.width - rect.left - this.seekTooltip.offsetWidth * 0.5);
                            this.seekTooltip.style.left = "".concat(posX, "px"); // Set Tooltip Time

                            var t = this.formatTime(skipTo);
                            this.seekTooltip.textContent = "".concat(t.minutes, ":").concat(t.seconds); // Clear Timer HideController If Exist When Show Tooltip

                            if (this.timerHideController) {
                                clearTimeout(this.timerHideController);
                                this.timerHideController = null;
                            } // Set Timer for Hide Tooltip


                            if (this.timerHideTooltip) {
                                clearTimeout(this.timerHideTooltip);
                                this.timerHideTooltip = null;
                            }

                            this.seekTooltip.style.display = 'block';
                            this.timerHideTooltip = setTimeout(function () {
                                _this12.seekTooltip.style.display = 'none';

                                _this12.processAutoHideControllerMobile();
                            }, 500);
                        }
                    }
                }, {
                    key: "skipSecBackFunc",
                    value: function skipSecBackFunc() {
                        this.powerVideo.currentTime = this.powerVideo.currentTime - 10;
                        this.clearTimerAutoNextStayVideo();
                    }
                }, {
                    key: "skipSecForwardFunc",
                    value: function skipSecForwardFunc() {
                        this.powerVideo.currentTime = this.powerVideo.currentTime + 10;
                        this.clearTimerAutoNextStayVideo();
                    }
                }, {
                    key: "updateVolume",
                    value: function updateVolume() {
                        if (this.powerVideo.muted) this.powerVideo.muted = false;
                        this.userAction.volume = this.volumeBar.value;
                        this.powerVideo.volume = this.volumeBar.value;
                        this.volumeProcessBar.value = this.volumeBar.value;
                        this.clearTimerAutoNextStayVideo();
                    }
                }, {
                    key: "updateVolumeIcon",
                    value: function updateVolumeIcon() {
                        this.volumeIcons.forEach(function (icon) {
                            icon.classList.add('power-hidden');
                        });

                        if (this.powerVideo.muted || this.powerVideo.volume == 0) {
                            this.volumeMute.classList.remove('power-hidden');
                        } else {
                            this.volumeOn.classList.remove('power-hidden');
                        }

                        this.userAction.isMuted = this.powerVideo.muted;
                    }
                }, {
                    key: "toggleMute",
                    value: function toggleMute() {
                        var muted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

                        if (typeof muted == "boolean") {
                            this.powerVideo.muted = muted;
                        } else {
                            this.powerVideo.muted = !this.powerVideo.muted;
                            this.clearTimerAutoNextStayVideo();
                        }

                        if (this.powerVideo.muted) {
                            this.volumeBar.setAttribute('data-volume', this.volumeBar.value);
                            this.volumeBar.value = 0;
                        } else {
                            this.volumeBar.value = this.volumeBar.dataset.volume;
                        }
                    } // toggleFullScreen toggles the full screen state of the video

                }, {
                    key: "toggleFullScreen",
                    value: function toggleFullScreen() {
                        if (!this.userAction.isFullscreen) this.fullscreenIcons.forEach(function (icon) {
                            return icon.classList.toggle('power-hidden');
                        });
                        this.clearTimerAutoNextStayVideo();

                        if (document.fullscreenElement) {
                            document.exitFullscreen();
                            this.userAction.isFullscreen = false;
                            this.removeMouseInFullscreen();
                        } else if (document.webkitFullscreenElement) {
                            // Need this to support Safari PC
                            document.webkitExitFullscreen();
                            this.userAction.isFullscreen = false;
                            this.removeMouseInFullscreen();
                        } else if (this.powerVideoContainer.webkitRequestFullscreen) {
                            // Need this to support Safari PC
                            this.powerVideoContainer.webkitRequestFullscreen();
                            this.userAction.isFullscreen = true;
                            this.addMouseInFullscreen();
                        } else {
                            if (this.userAction.isMobile && getMobileOperatingSystem() == "iOS") {
                                this.powerVideo.webkitEnterFullScreen();
                            } else {
                                this.powerVideoContainer.requestFullscreen();
                            }

                            this.userAction.isFullscreen = true;
                            this.addMouseInFullscreen();
                        }
                    } // initializeVideo sets the video duration, and maximum value of the progressBar

                }, {
                    key: "initializeVideo",
                    value: function initializeVideo() {
                        var _this13 = this;

                        // this.volumeBar.value = this.volumeBar.getAttribute("max");
                        // this.volumeProcessBar.value = this.volumeBar.value;
                        var videoDuration = Math.round(this.powerVideo.duration);
                        this.seek.setAttribute('max', videoDuration);
                        this.progressBar.setAttribute('max', videoDuration);
                        var time = this.formatTime(videoDuration);
                        this.duration.innerText = "".concat(time.minutes, ":").concat(time.seconds);
                        this.duration.setAttribute('datetime', "".concat(time.minutes, "m ").concat(time.seconds, "s"));

                        this.powerVideo.onloadeddata = function () {
                            // Update current volume
                            _this13.powerVideo.isMuted = _this13.userAction.isMuted;
                            _this13.userAction.volume = _this13.powerVideo.volume;
                            _this13.volumeBar.value = _this13.userAction.volume;

                            _this13.updateVolumeIcon();

                            _this13.updateProgressBar();

                            var onLoadedVideo = function onLoadedVideo() {
                                // if (this.userAction.isVideoEnded || this.userAction.isVideoPlaying) this.play();
                                _this13.userAction.isVideoEnded = false;
                                _this13.userAction.isVideoLoaded = true;

                                _this13.sendVideoEvent("onloadeddata");
                            };

                            if (!_this13.userAction.isTempDemo) {
                                if (_this13.userAction.isRequestBid) {
                                    _this13.pause();

                                    setTimeout(function () {
                                        return onLoadedVideo(true);
                                    }, 3000);
                                } else {
                                    onLoadedVideo(false);
                                }
                            } else {
                                if (_this13.userAction.isVideoEnded || _this13.userAction.isVideoPlaying) _this13.play();
                                _this13.userAction.isVideoEnded = false;
                                _this13.userAction.isVideoLoaded = true;
                            }
                        };
                    }
                }, {
                    key: "getFloatingCSS",
                    value: function getFloatingCSS(type) {
                        if (type == "close") {
                            return "position: absolute;width: 20px;height: 20px;background-color: rgba(0, 0, 0, 0.65);border-radius: 50%;line-height: 18px;";
                        }

                        if (type == "relatedIframe") {
                            return "border: none; margin: 0px; overflow: hidden; position: absolute; z-index: 0 !important; top: 0px; left: 0px; max-width: 100%; min-width: 100%; width: 100%;";
                        }

                        var cssText = "position: relative;";

                        if (this.videoSetting && this.videoSetting.powerVideoContainerWrapCSS) {
                            cssText += this.videoSetting.powerVideoContainerWrapCSS;
                        }

                        if (this.videoSetting.adType == this.adType.OutStream) {
                            // set animation show ad Outstream
                            cssText += "transition: all 0.6s ease 0s;";
                        }

                        return cssText;
                    }
                }, {
                    key: "createLinkCss",
                    value: function createLinkCss(innerDocument, name) {
                        var styleSheet = innerDocument.createElement("style");
                        styleSheet.id = "power_css_videocontainer";
                        styleSheet.type = "text/css";
                        styleSheet.innerText = name;
                        return styleSheet; // return `<style>${name}</style>`;
                    }
                }, {
                    key: "logMess",
                    value: function logMess(mess) {
                        if (typeof_default()(mess) === "object") {
                            vilog("".concat(JSON.stringify(mess)), "VideoContainerTemplate");
                        } else {
                            vilog("".concat(mess), "VideoContainerTemplate");
                        }
                    }
                }]);

                return VideoContainerTemplate;
            }();


// CONCATENATED MODULE: ./src/plugins/helper/mixins.js


            var mixinCreateCss = {
                createCSS: function createCSS(id, css) {
                    var styleSheet = document.createElement("style");
                    styleSheet.setAttribute("type", "text/css");

                    if (id) {
                        styleSheet.id = id;
                    }

                    styleSheet.innerText = css;
                    document.head.appendChild(styleSheet);
                }
            };
            var mixinLog = {
                pwlog: function pwlog(mess) {
                    if (typeof_default()(mess) === "object") {
                        vilog("".concat(JSON.stringify(mess)), this.constructor.name);
                    } else {
                        vilog("".concat(mess), this.constructor.name);
                    }
                }
            };
            var mixinLoadFont = {
                loadFont: function loadFont(idElement) {
                    if (!idElement || document.getElementById(idElement)) {
                        return;
                    }

                    var link = document.createElement("link");
                    link.id = idElement;
                    link.href = "https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400;1,500;1,600;1,700;1,800&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&family=Source+Sans+Pro:ital,wght@0,200;0,300;0,400;0,600;0,700;0,900;1,200;1,300;1,400;1,600;1,700;1,900&display=swap";
                    link.rel = "stylesheet";
                    link.type = "text/css";
                    document.head.appendChild(link);
                }
            };
            var mixinCloneElement = {
                cloneElement: function cloneElement(old) {
                    var elm = old;
                    var newone = elm.cloneNode(true);
                    elm.parentNode.replaceChild(newone, elm);
                }
            };
// EXTERNAL MODULE: ./src/plugins/helper/css/ad-top.css
            var ad_top = __webpack_require__(61);
            var ad_top_default = /*#__PURE__*/__webpack_require__.n(ad_top);

// EXTERNAL MODULE: ./src/plugins/helper/html/controls.html
            var controls = __webpack_require__(62);
            var controls_default = /*#__PURE__*/__webpack_require__.n(controls);

// EXTERNAL MODULE: ./src/plugins/template/pinzone/svg/pause.html
            var svg_pause = __webpack_require__(11);
            var pause_default = /*#__PURE__*/__webpack_require__.n(svg_pause);

// EXTERNAL MODULE: ./src/plugins/template/pinzone/svg/play.html
            var svg_play = __webpack_require__(12);
            var play_default = /*#__PURE__*/__webpack_require__.n(svg_play);

// EXTERNAL MODULE: ./src/plugins/template/pinzone/svg/mute.html
            var mute = __webpack_require__(63);
            var mute_default = /*#__PURE__*/__webpack_require__.n(mute);

// EXTERNAL MODULE: ./src/plugins/template/pinzone/svg/unmute.html
            var unmute = __webpack_require__(64);
            var unmute_default = /*#__PURE__*/__webpack_require__.n(unmute);

// EXTERNAL MODULE: ./src/plugins/template/pinzone/progress.html
            var progress = __webpack_require__(13);
            var progress_default = /*#__PURE__*/__webpack_require__.n(progress);

// CONCATENATED MODULE: ./src/plugins/helper/AdPlayer.js





            var AdPlayer_CONSTANTS = __webpack_require__(5);











            var PROCESS_BAR_HEIGHT = 25;

            var AdPlayer_AdPlayer = /*#__PURE__*/function () {
                function AdPlayer(config) {
                    classCallCheck_default()(this, AdPlayer);

                    if (typeof_default()(config) !== "object" || !config.pixelManager || !config.brandLogo || !config.baseDomain || !config.adElement || !config.adWidth || !config.adHeight) {
                        throw new Error("[AdPlayer] missing input!");
                    }

                    this.adsManager = null;
                    this.pixelManager = config.pixelManager;
                    this.brandLogo = config.brandLogo;
                    this.baseDomain = config.baseDomain;
                    this.adElement = config.adElement; // HTML DOM of ad slot

                    this.videoElement = config.videoElement || null; // HTML DOM of video content (not required)

                    this.adWidth = config.adWidth;
                    this.adHeight = config.adHeight;
                    this.adSlotId = config.adSlotId || null;
                    this.loadVideoTimeout = config.loadVideoTimeout || 20000; // in milliseconds

                    this.vastLoadTimeout = config.vastLoadTimeout || 8000; // in milliseconds

                    this.showVolumeControl = config.showVolumeControl && config.showVolumeControl === false ? false : true;
                    this.showProgressBar = config.showProgressBar && config.showProgressBar === true || false;
                    this.loadingText = config.loadingText || "Loading advertisement..";
                    this.skipRequired = config.skipRequired && config.skipRequired === true || false; // set config luôn có nút skip trong ads

                    this.defaultVolume = config.defaultVolume && config.defaultVolume === 1 ? 1 : 0;
                    this.adWillPlayMuted = config.adWillPlayMuted && config.adWillPlayMuted === true || false; // config là false sẽ tăng tỷ lệ bid của google, áp dụng cho các định dạng có instream giống như video discovery

                    this.eventListener = config.eventListener || null;
                    this.renderPlayerMode = config.renderPlayerMode || "root";
                    this.isPinZone = config.isPinZone && config.isPinZone === true ? true : false;
                    this.adSlotWidth = this.adWidth;
                    this.adSlotHeight = this.getAdSlotHeight(this.adHeight);
                    this.adContainer = new AdPlayer_AdVideoContainerBuilder({
                        adElement: this.adElement,
                        adWidth: this.adWidth,
                        adHeight: this.adHeight,
                        adSlotHeight: this.adSlotHeight,
                        modeRenderAdWrapper: this.renderPlayerMode,
                        adSlotId: this.adSlotId,
                        // transparentBackground: config.transparentBackground || false,
                        brandLogoUrl: this.brandLogo,
                        defaultVolume: this.defaultVolume,
                        showVolumeControl: this.showVolumeControl,
                        isPinZone: this.isPinZone,
                        showProgressBar: this.showProgressBar,
                        loadingText: this.loadingText,
                        // AdInfo
                        curAds: config.curAds,
                        maxAds: config.maxAds,
                        isShowAdInfor: config.isShowAdInfor ? true : false
                    });
                    this.bidWon = null;
                    this.vastUrl = null;
                    this.vastXml = null;
                    this.dfpConfig = {};
                    this.useVastDfp = false;
                    this.adRequested = [];
                    this.started = [];
                    this.impression = [];
                    this.error = [];
                    this.complete = [];
                    this.skip = [];
                    this.click = [];
                    this.firstQuartile = [];
                    this.midpoint = [];
                    this.thirdQuartile = [];
                    this.hidden = [];
                    this.adsVolumeChange = [];
                    this.paused = [];
                    this.resumed = [];
                    this.init();
                }

                createClass_default()(AdPlayer, [{
                    key: "init",
                    value: function init() {
                        var _this = this;

                        if (this.videoElement == null) {
                            var pluginUrl = "//" + Configs.staticDomain + "/assets/plugins/vlPlayer";

                            if (Configs.runWithPP == false) {
                                pluginUrl = "//assets.vlitag.com/plugins/vlPlayer";
                            }

                            this.videoElement = this.adContainer.addVideoElement({
                                mp4: "".concat(pluginUrl, "/static/vi1.mp4"),
                                webm: "".concat(pluginUrl, "/static/vid.webm"),
                                ogv: "".concat(pluginUrl, "/static/vid.ogv")
                            });
                        }

                        if (this.showVolumeControl) {
                            this.adContainer.getVolumeControlEl().addEventListener("click", function () {
                                if (!_this.adsManager) {
                                    return;
                                }

                                if (_this.adsManager.getVolume() == 0) {
                                    vilog("[AdPlayer] set volume to 1");

                                    _this.adsManager.setVolume(1);
                                } else {
                                    vilog("[AdPlayer] set volume to 0");

                                    _this.adsManager.setVolume(0);
                                }
                            });
                        }

                        if (this.isPinZone) {
                            this.adContainer.getPlayPauseEl().addEventListener("click", function () {
                                if (!_this.adsManager) {
                                    return;
                                }

                                if (_this.adContainer.getPlayPauseEl().classList.contains("power-playing-now")) {
                                    vilog("[AdPlayer] set ad pause");

                                    _this.adsManager.pause();

                                    _this.adsManager.pauseByUser = true;

                                    _this.adContainer.getPlayPauseEl().classList.remove("power-playing-now");
                                } else {
                                    vilog("[AdPlayer] set ad play");

                                    _this.adsManager.resume();

                                    _this.adsManager.pauseByUser = false;

                                    _this.adContainer.getPlayPauseEl().classList.add("power-playing-now");
                                }
                            });
                        }

                        var collector = this.pixelManager.logBidVideo();
                        this.setCallBacks({
                            adRequested: function adRequested(vastUrl) {
                                collector.requested(_this.useVastDfp, _this.dfpConfig.targetAccountId, _this.bidWon); // đếm bid win cho demand trong trường hợp không đấu giá với google ở đây
                            },
                            impression: function impression(event) {
                                collector.impression(_this.googleIsWinner(), _this.bidWon, _this.dfpConfig.targetAccountId);
                            },
                            started: function started(event) {
                                collector.started(_this.googleIsWinner(), _this.bidWon, _this.dfpConfig.targetAccountId);

                                if (_this.isPinZone) {
                                    _this.adContainer.adIframe.querySelector(".power-ad-progress-bar").style.display = "block";
                                }
                            },
                            firstQuartile: function firstQuartile(event) {
                                collector.firstQuartile(_this.googleIsWinner(), _this.bidWon, _this.dfpConfig.targetAccountId);
                            },
                            midpoint: function midpoint(event) {
                                collector.midpoint(_this.googleIsWinner(), _this.bidWon, _this.dfpConfig.targetAccountId);
                            },
                            thirdQuartile: function thirdQuartile(event) {
                                collector.thirdQuartile(_this.googleIsWinner(), _this.bidWon, _this.dfpConfig.targetAccountId);
                            },
                            complete: function complete(event) {
                                collector.complete(_this.googleIsWinner(), _this.bidWon, _this.dfpConfig.targetAccountId);
                            },
                            skip: function skip(event) {
                                collector.skip(_this.googleIsWinner(), _this.bidWon, _this.dfpConfig.targetAccountId);
                            },
                            click: function click(event) {
                                collector.click(_this.googleIsWinner(), _this.bidWon, _this.dfpConfig.targetAccountId);
                            } // error: () => {
                            //     if (_this.googleIsWinner()) {
                            //         collector.click(_this.getPlayerSize(), _this.dfpConfig.targetAccountId)
                            //     } else {
                            //         try {
                            //             _this.bidWon.adsEvent.click();
                            //         } catch (e) {}
                            //     }
                            // },

                        });
                    }
                }, {
                    key: "googleIsWinner",
                    value: function googleIsWinner() {
                        return this.useVastDfp ? true : false; // nếu vast sử dụng là vast dfp và event started được call nghĩa là google win vì demand win link vast sẽ luôn luôn trả về lỗi
                    }
                }, {
                    key: "setCallBacks",
                    value: function setCallBacks(callbacks) {
                        callbacks.adRequested && this.adRequested.push(callbacks.adRequested);
                        callbacks.started && this.started.push(callbacks.started);
                        callbacks.impression && this.impression.push(callbacks.impression);
                        callbacks.error && this.error.push(callbacks.error);
                        callbacks.complete && this.complete.push(callbacks.complete);
                        callbacks.skip && this.skip.push(callbacks.skip);
                        callbacks.click && this.click.push(callbacks.click);
                        callbacks.firstQuartile && this.firstQuartile.push(callbacks.firstQuartile);
                        callbacks.midpoint && this.midpoint.push(callbacks.midpoint);
                        callbacks.thirdQuartile && this.thirdQuartile.push(callbacks.thirdQuartile);
                        callbacks.hidden && this.hidden.push(callbacks.hidden);
                        callbacks.adsVolumeChange && this.adsVolumeChange.push(callbacks.adsVolumeChange);
                        callbacks.paused && this.paused.push(callbacks.paused);
                        callbacks.resumed && this.resumed.push(callbacks.resumed);
                    }
                }, {
                    key: "getPlayerSize",
                    value: function getPlayerSize() {
                        if (["640x480", "400x300"].indexOf(this.dfpConfig.playerSize) === -1) {
                            return "640x480";
                        }

                        return this.dfpConfig.playerSize;
                    }
                }, {
                    key: "buildDfpVideoUrl",
                    value: function buildDfpVideoUrl() {
                        var params = {
                            iu: this.dfpConfig.adUnit,
                            sz: this.getPlayerSize()
                        };
                        var TARGET_KEYS = AdPlayer_CONSTANTS.TARGET_KEYS;
                        var defaultParams = {
                            hb_domain: Configs.domainName,
                            section: "blog",
                            anotherKey: "anotherValue"
                        };
                        defaultParams[TARGET_KEYS.ACCOUNT] = this.dfpConfig.targetAccountId; // defaultParams[TARGET_KEYS.AD_SLOT] = this.dfpConfig.targetAdSlot;

                        var customParams = Object.assign(defaultParams, this.dfpConfig.customParams);

                        if (this.bidWon !== null) {
                            try {
                                var prebidTargetingSet = Object.assign({}, // Why are we adding standard keys here ? Refer https://github.com/prebid/Prebid.js/issues/3664
                                    {
                                        hb_uuid: this.bidWon && this.bidWon.videoCacheKey
                                    }, // hb_uuid will be deprecated and replaced by hb_cache_id
                                    {
                                        hb_cache_id: this.bidWon && this.bidWon.videoCacheKey
                                    }, this.bidWon.adserverTargeting);
                                customParams = Object.assign(prebidTargetingSet, customParams); // set hb_uuid và hb_cache_id = rỗng để khi vast trả về là line của prebid sẽ không phát được sau đó sẽ thử lại bằng vast gốc của bid win ( để tách report của demand và google riêng )

                                customParams.hb_uuid = "";
                                customParams.hb_cache_id = "";
                            } catch (e) {}
                        }

                        return buildVastUrl(params, customParams);
                    }
                }, {
                    key: "getVastUrl",
                    value: function getVastUrl() {
                        if (this.useVastDfp) {
                            return this.buildDfpVideoUrl();
                        }

                        if (this.bidWon !== null && this.bidWon.vastUrl) {
                            return this.bidWon.vastUrl;
                        }

                        return this.vastUrl;
                    }
                }, {
                    key: "getVastXml",
                    value: function getVastXml() {
                        if (this.useVastDfp) {
                            return null;
                        }

                        if (this.bidWon !== null && this.bidWon.vastXml) {
                            return this.bidWon.vastXml;
                        }

                        return this.vastXml;
                    }
                }, {
                    key: "getAdSlotHeight",
                    value: function getAdSlotHeight(adHeight) {
                        return this.showProgressBar ? adHeight - PROCESS_BAR_HEIGHT : adHeight;
                    }
                }, {
                    key: "resizeAds",
                    value: function resizeAds(adWidth, adHeight, adViewmode) {
                        vilog("[AdPlayer] Ad resize to " + adViewmode);
                        adViewmode == "FULLSCREEN" ? adViewmode = google.ima.ViewMode.FULLSCREEN : adViewmode = google.ima.ViewMode.NORMAL;
                        this.adsManager && this.adsManager.resize(adWidth, adHeight, adViewmode);
                        this.adContainer.resize(adWidth, adHeight, this.getAdSlotHeight(adHeight));
                    }
                }, {
                    key: "play",
                    value: function play(config) {
                        var _this2 = this;

                        this.bidWon = config.bidWon || null;
                        this.vastUrl = config.vastUrl || null;
                        this.vastXml = config.vastXml || null;
                        this.dfpConfig = config.dfp ? {
                            customParams: config.dfp.customParams || {},
                            adUnit: config.dfp.adUnit || "",
                            targetAccountId: config.dfp.targetAccountId || "",
                            targetAdSlot: config.dfp.targetAdSlot || "",
                            playerSize: config.dfp.playerSize || null // playerSize chỉ có thể sử dụng 400x300 hoặc 640x480

                        } : {};
                        this.useVastDfp = this.dfpConfig.adUnit && this.dfpConfig.adUnit !== "" ? true : false;
                        this.initIMA();
                        return {
                            pause: function pause() {
                                vilog("Ad pause", "AdPlayer");
                                _this2.adsManager && _this2.adsManager.pause();
                            },
                            resume: function resume() {
                                vilog("Ad resume", "AdPlayer");
                                _this2.adsManager && _this2.adsManager.resume();
                            },
                            resize: function resize(adWidth, adHeight, adViewmode) {
                                _this2.resizeAds(adWidth, adHeight, adViewmode);
                            },
                            skip: function skip() {
                                vilog("[AdPlayer] Ad skip");
                                _this2.adsManager && _this2.adsManager.skip();
                            },
                            setVolume: function setVolume(volume) {
                                vilog("[AdPlayer] set volume to " + volume);
                                _this2.adsManager && _this2.adsManager.setVolume(volume);
                            },
                            getRemainingTime: function getRemainingTime() {
                                return _this2.adsManager ? _this2.adsManager.getRemainingTime() : 0;
                            },
                            // AdInfor
                            setAdInforNum: function setAdInforNum(curAds, maxAds) {
                                _this2.adContainer && _this2.adContainer.setAdInforNum(curAds, maxAds);
                            },
                            callError: function callError() {
                                vilog("[AdEvent] Error: ad play with error", "AdPlayer");

                                _this2.emitEvent("error", "ad play with error");

                                _this2.adsManager && _this2.adsManager.destroy();
                            }
                        };
                    }
                }, {
                    key: "initIMA",
                    value: function initIMA() {
                        google.ima.settings.setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.INSECURE);
                        google.ima.settings.setDisableCustomPlaybackForIOS10Plus(true);
                        google.ima.settings.setNumRedirects(5);
                        var adDisplayContainer = new google.ima.AdDisplayContainer(this.adContainer.getContainerEl(), this.videoElement);
                        adDisplayContainer.initialize();
                        var adsRequest = new google.ima.AdsRequest();
                        adsRequest.forceNonLinearFullSlot = true;
                        adsRequest.vastLoadTimeout = this.vastLoadTimeout;
                        adsRequest.adTagUrl = this.getVastUrl();
                        adsRequest.adsResponse = this.getVastXml();
                        adsRequest.linearAdSlotWidth = this.adSlotWidth;
                        adsRequest.linearAdSlotHeight = this.adSlotHeight;
                        adsRequest.nonLinearAdSlotWidth = this.adSlotWidth;
                        adsRequest.nonLinearAdSlotHeight = this.adSlotHeight; // Create ads loader.

                        var adsLoader = new google.ima.AdsLoader(adDisplayContainer); // Listen and respond to ads loaded and error events.

                        adsLoader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, this.onAdsManagerLoaded.bind(this), false);
                        adsLoader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, this.onError.bind(this), false);
                        adsRequest.setAdWillAutoPlay(false);
                        adsRequest.setAdWillPlayMuted(this.adWillPlayMuted);
                        adsLoader.requestAds(adsRequest);
                        this.onAdRequested(adsRequest.adTagUrl);
                    }
                }, {
                    key: "onAdsManagerLoaded",
                    value: function onAdsManagerLoaded(adsManagerLoadedEvent) {
                        var adsRenderingSettings = new google.ima.AdsRenderingSettings();
                        adsRenderingSettings.loadVideoTimeout = this.loadVideoTimeout;
                        adsRenderingSettings.uiElements = [google.ima.UiElements.COUNTDOWN];
                        this.adsManager = adsManagerLoadedEvent.getAdsManager(this.videoElement, adsRenderingSettings);
                        this.adsManager.setVolume(this.defaultVolume); // Add listeners to the required events.

                        this.adsManager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, this.onError.bind(this));
                        this.adsManager.addEventListener(google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED, this.onContentPauseRequested.bind(this));
                        this.adsManager.addEventListener(google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED, this.onContentResumeRequested.bind(this)); // Listen to any additional events, if necessary.

                        this.adsManager.addEventListener(google.ima.AdEvent.Type.LOADED, this.onLoaded.bind(this));
                        this.adsManager.addEventListener(google.ima.AdEvent.Type.STARTED, this.onStarted.bind(this));
                        this.adsManager.addEventListener(google.ima.AdEvent.Type.COMPLETE, this.onComplete.bind(this));
                        this.adsManager.addEventListener(google.ima.AdEvent.Type.IMPRESSION, this.onImpression.bind(this));
                        this.adsManager.addEventListener(google.ima.AdEvent.Type.CLICK, this.onClick.bind(this));
                        this.adsManager.addEventListener(google.ima.AdEvent.Type.PAUSED, this.onPaused.bind(this));
                        this.adsManager.addEventListener(google.ima.AdEvent.Type.RESUMED, this.onResumed.bind(this));
                        this.adsManager.addEventListener(google.ima.AdEvent.Type.SKIPPED, this.onSkipped.bind(this));
                        this.adsManager.addEventListener(google.ima.AdEvent.Type.FIRST_QUARTILE, this.onFirstQuartile.bind(this));
                        this.adsManager.addEventListener(google.ima.AdEvent.Type.MIDPOINT, this.onMidPoint.bind(this));
                        this.adsManager.addEventListener(google.ima.AdEvent.Type.THIRD_QUARTILE, this.onThirdQuartile.bind(this));
                        this.adsManager.addEventListener(google.ima.AdEvent.Type.VOLUME_CHANGED, this.onVolumeChanged.bind(this));

                        try {
                            this.adsManager.init(this.adSlotWidth, this.adSlotHeight, google.ima.ViewMode.NORMAL);
                            this.adsManager.start();
                            this.addAdsEventListener();
                        } catch (e) {
                            this.onError({
                                getError: function getError() {
                                    return {
                                        getErrorCode: function getErrorCode() {
                                            return 1111;
                                        }
                                    };
                                }
                            });
                        }
                    }
                }, {
                    key: "addAdsEventListener",
                    value: function addAdsEventListener() {
                        // thêm sự kiện cho vpaid
                        if (!this.eventListener) {
                            return;
                        }

                        for (var eventName in this.eventListener) {
                            this.adsManager.addEventListener(google.ima.AdEvent.Type[eventName], this.eventListener[eventName]);
                        }
                    }
                }, {
                    key: "onAdRequested",
                    value: function onAdRequested(vastUrl) {
                        this.emitEvent("adRequested", vastUrl);
                    }
                }, {
                    key: "onLoaded",
                    value: function onLoaded(adEvent) {
                        var ad = adEvent.getAd();

                        var _this = this;

                        this.showProgressBar && this.adContainer.displayProgressBar();

                        if (this.skipRequired && ad.getSkipTimeOffset() < 0) {
                            this.adContainer.addSkipButton(function () {
                                vilog("[AdEvent] Skiped", "AdPlayer");

                                _this.emitEvent("skip", adEvent);

                                _this.emitEvent("hidden", adEvent);
                            });
                        }

                        this.emitEvent("loaded", adEvent);
                    }
                }, {
                    key: "onError",
                    value: function onError(adEvent) {
                        vilog("[AdEvent] Error code:" + adEvent.getError().getErrorCode(), "AdPlayer");
                        this.emitEvent("error", adEvent.getError().getErrorCode());
                        this.adsManager && this.adsManager.destroy();
                    }
                }, {
                    key: "onStarted",
                    value: function onStarted(adEvent) {
                        this.adsManager && this.adsManager.setVolume(this.defaultVolume); // set về default volume để tắt tiếng trong trường hợp định dạng video discovery muốn request adwillplaymuted = false nhưng muốn tắt tiếng khi ad start

                        this.showVolumeControl && this.adContainer.displayVolumeControl(); // AdInfor

                        this.adContainer.displayAdInfor();
                        this.adContainer.setAdInforTimer(this.adsManager.getRemainingTime());

                        if (this.adElement.offsetWidth > 0 && this.adElement.offsetWidth != this.adWidth || this.adElement.offsetHeight > 0 && this.adElement.offsetHeight != this.adHeight) {
                            this.resizeAds(this.adElement.offsetWidth, this.adElement.offsetHeight, "NORMAL");
                        }

                        var ad = adEvent.getAd();

                        if (ad.isLinear() && this.showProgressBar) {
                            this.adContainer.startProgress(this.adsManager.getRemainingTime());
                        }

                        if (this.isPinZone) {
                            var totalTimes = this.adsManager.getRemainingTime();
                            var miniProgress = this.adContainer.adIframe.querySelector(".power-progress-mini");
                            var nowPer = 0;
                            var interval = setInterval(function () {
                                var nowTime = this.adsManager.getRemainingTime();

                                if (nowTime > totalTimes) {
                                    //For test can see approximate
                                    totalTimes = nowTime;
                                } // var per = Math.round(((totalTimes - nowTime) / totalTimes) * 100);


                                var per = (totalTimes - nowTime) / totalTimes * 100;

                                if (per == nowPer) {
                                    return;
                                }

                                if (per > 100) {
                                    clearInterval(interval);
                                }

                                miniProgress.style.width = per + "%";
                                nowPer = per;
                            }.bind(this), 500);
                        }

                        this.emitEvent("started", adEvent);
                    }
                }, {
                    key: "onContentPauseRequested",
                    value: function onContentPauseRequested(adEvent) {
                        this.emitEvent("contentPauseRequested", adEvent);
                    }
                }, {
                    key: "onContentResumeRequested",
                    value: function onContentResumeRequested(adEvent) {
                        var ad = adEvent.getAd();

                        if (ad) {
                            this.emitEvent("hidden", adEvent);
                        } else {
                            vilog("[AdEvent] Error: ad null", "AdPlayer");
                            var errMess = adEvent.getError() && adEvent.getError().getErrorCode() ? adEvent.getError().getErrorCode() : adEvent;
                            this.emitEvent("error", errMess);
                            this.adsManager && this.adsManager.destroy();
                        }
                    }
                }, {
                    key: "onComplete",
                    value: function onComplete(adEvent) {
                        vilog("[AdEvent] Complete", "AdPlayer"); // AdInfor

                        this.adContainer.clearAdInforTimer();
                        this.emitEvent("complete", adEvent);
                    }
                }, {
                    key: "onImpression",
                    value: function onImpression(adEvent) {
                        vilog("[AdEvent] Impression ping", "AdPlayer");
                        this.emitEvent("impression", adEvent);
                    }
                }, {
                    key: "onClick",
                    value: function onClick(adEvent) {
                        this.emitEvent("click", adEvent);
                    }
                }, {
                    key: "onPaused",
                    value: function onPaused(adEvent) {
                        // AdInfor
                        this.adContainer.setStartPauseTimeAdsRemining(true);
                        this.emitEvent("paused", adEvent);
                    }
                }, {
                    key: "onResumed",
                    value: function onResumed(adEvent) {
                        // AdInfor
                        this.adContainer.setStartPauseTimeAdsRemining(false);
                        this.emitEvent("resumed", adEvent);
                    }
                }, {
                    key: "onSkipped",
                    value: function onSkipped(adEvent) {
                        vilog("[AdEvent] Skiped", "AdPlayer"); // AdInfor

                        this.adContainer.clearAdInforTimer();
                        this.emitEvent("skip", adEvent);
                    }
                }, {
                    key: "onFirstQuartile",
                    value: function onFirstQuartile(adEvent) {
                        this.emitEvent("firstQuartile", adEvent);
                    }
                }, {
                    key: "onMidPoint",
                    value: function onMidPoint(adEvent) {
                        this.emitEvent("midpoint", adEvent);
                    }
                }, {
                    key: "onThirdQuartile",
                    value: function onThirdQuartile(adEvent) {
                        this.emitEvent("thirdQuartile", adEvent);
                    }
                }, {
                    key: "onVolumeChanged",
                    value: function onVolumeChanged(adEvent) {
                        vilog("[AdEvent] Volume change", "AdPlayer");
                        this.emitEvent("adsVolumeChange", this.adsManager.getVolume());
                    }
                }, {
                    key: "emitEvent",
                    value: function emitEvent(eventName, adEvent) {
                        if (!this[eventName] || !Array.isArray(this[eventName])) {
                            return;
                        }

                        this[eventName].forEach(function (action, index) {
                            typeof action === "function" && action(adEvent);
                        }); // clear event
                        // eventName == "adsVolumeChange" cho phep goi lai neu tai kick hoat

                        if (eventName != "adsVolumeChange") {
                            this[eventName].length = 0;
                        }
                    }
                }, {
                    key: "playerAdsManagerPause",
                    value: function playerAdsManagerPause() {
                        return this.adsManager && this.adsManager.pauseByUser;
                    }
                }]);

                return AdPlayer;
            }();

            var AdPlayer_AdVideoContainerBuilder = /*#__PURE__*/function () {
                function AdVideoContainerBuilder(config) {
                    classCallCheck_default()(this, AdVideoContainerBuilder);

                    this.adElement = config.adElement;
                    this.adWidth = config.adWidth;
                    this.adHeight = config.adHeight;
                    this.adSlotHeight = config.adSlotHeight; // this.transparentBackground = config.transparentBackground === true ? true : false;

                    this.brandLogoUrl = config.brandLogoUrl;
                    this.defaultVolume = config.defaultVolume;
                    this.showVolumeControl = config.showVolumeControl;
                    this.isPinZone = config.isPinZone;
                    this.showProgressBar = config.showProgressBar;
                    this.loadingText = config.loadingText;
                    this.modeRenderAdWrapper = config.modeRenderAdWrapper;
                    this.adSlotId = config.adSlotId || new Date().getTime();
                    this.uniqueId = this.adSlotId;
                    this.ifID = "if_".concat(this.uniqueId);
                    this.adwrapper = "pp_adwrapper_".concat(this.uniqueId);
                    this.adcontainer = "ad_container_".concat(this.uniqueId);
                    this.toggleVolume = "pp_toggleVolume_".concat(this.uniqueId);
                    this.progressbar = "pp_progress_bar_".concat(this.uniqueId);
                    this.ppMessageBox = "ppMessageBox_".concat(this.uniqueId);
                    this.pubpowerbrand = "pubpowerbrand_".concat(this.uniqueId);
                    this.powerAdInfor = "powerAdInfor_".concat(this.uniqueId);
                    this.volumeTopArt2 = "power-vol-ad-control_".concat(this.uniqueId);
                    this.playPauseTopArt2 = "power-play-pause-ad-control_".concat(this.uniqueId);
                    this.classAdControlsTop = "power-ad-controls-top";
                    this.classHoverControl = "power-hover-control"; // AdInfor

                    this.isShowAdInfor = config.isShowAdInfor;
                    this.adIframe = {};
                    this.adDoc = {};
                    this.createAdContainer();

                    if (this.isPinZone) {
                        if (!document.getElementById("power-top-css-adplayer")) {
                            //Avoid add many times if add many slots
                            this.createCSS("power-top-css-adplayer", ad_top_default.a);
                        }

                        this.toggleClassOfElement(this.getPlayPauseEl(), ["power-play-status", "power-pause-status"]); //Hightlight vol buttons

                        this.createCSS(null, "#".concat(this.adwrapper, ":hover .power-ad-controls-top:not(.power-ad-controls-top:hover){opacity: 1;\n\t\tbackground: rgba(53, 53, 53, 0.22);\n\t\t-webkit-box-shadow: 0 0 0 1px rgb(0 0 0 / 22%);\n\t\t-moz-box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.22);\n\t\tbox-shadow: 0 0 0 1px rgb(0 0 0 / 22%);}"));
                    }

                    this.resize(this.adWidth, this.adHeight, this.adSlotHeight);

                    if (this.showVolumeControl === true) {
                        this.toggleClassOfElement(this.getVolumeControlEl(), ["sound_off", "sound_on"]);
                    } // Hide AdInfo when init


                    if (this.isShowAdInfor) {
                        this.isPauseAdRemining = false;
                        this.timerAdsRemaining = null;
                        this.getAdInforEl().style.display = "none";
                    }
                }

                createClass_default()(AdVideoContainerBuilder, [{
                    key: "toggleClassOfElement",
                    value: function toggleClassOfElement(el, arrClass) {
                        el.addEventListener("click", function () {
                            if (el.classList.contains(arrClass[0])) {
                                el.classList.remove(arrClass[0]);
                                el.classList.add(arrClass[1]);
                            } else if (el.classList.contains(arrClass[1])) {
                                el.classList.remove(arrClass[1]);
                                el.classList.add(arrClass[0]);
                            }
                        });
                    }
                }, {
                    key: "createAdContainer",
                    value: function createAdContainer() {
                        var htmlPlayAd = "<".concat(Configs.tagElement, " id=\"").concat(this.ifID, "\"></").concat(Configs.tagElement, ">");

                        if (this.modeRenderAdWrapper == "iframe") {
                            htmlPlayAd = "<iframe id=\"".concat(this.ifID, "\" SRC=\"about:blank\" FRAMEBORDER=\"0\" SCROLLING=\"no\" MARGINHEIGHT=\"0\" MARGINWIDTH=\"0\" TOPMARGIN=\"0\" LEFTMARGIN=\"0\" ALLOWTRANSPARENCY=\"true\" style=\"border: 0px!important; vertical-align: bottom!important\"></iframe>");
                        }

                        this.adElement.innerHTML = htmlPlayAd;
                        var containerHtm = "<style>#".concat(this.adwrapper, "{position:relative;width:100%;height:100%;display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex;-ms-flex-pack:center;-webkit-justify-content:center;justify-content:center;-ms-flex-align:center;-webkit-align-items:center;align-items:center}#").concat(this.progressbar, "{position:relative;height:").concat(PROCESS_BAR_HEIGHT, "px;display:-webkit-box;display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex;-ms-flex-align:center;-webkit-align-items:center;align-items:center;width:100%;border-top:1px solid #aaa;background:#000}#").concat(this.ppMessageBox, "{padding-left:5px;color:#999;font-family:Arial;font-size:10pt}#").concat(this.pubpowerbrand, "{position:absolute;z-index:10;top:2px;right:0;background-image:url(\"//").concat(this.brandLogoUrl, "\");background-repeat:no-repeat;width:85px;height:22px;background-size:82px}#").concat(this.toggleVolume, "{position:absolute;z-index:9999; left:10px;bottom:6px;cursor:pointer}.sound_on .vi__muted{display:none}.sound_off .vi__volume{display:none}</style>");
                        containerHtm += "<".concat(Configs.tagElement, " id=\"").concat(this.adwrapper, "\">");
                        containerHtm += "<".concat(Configs.tagElement, " id=\"").concat(this.adcontainer, "\" style=\"width:100%;height:100%\"></").concat(Configs.tagElement, ">");
                        this.showVolumeControl === true && (containerHtm += this.getVolumeControlHtml());
                        containerHtm += "</".concat(Configs.tagElement, ">");
                        this.showProgressBar === true && (containerHtm += this.getProgressBarHtml());

                        if (this.isPinZone) {
                            containerHtm += handleBarsCustom(progress_default.a, {
                                classProgressBar: "power-progress-bar power-ad-progress-bar",
                                classProgressMini: "power-progress-mini",
                                classPowerProgress: "power-progress-section",
                                index: ""
                            });
                        }

                        containerHtm += this.getAdsInfoHTML();
                        this.adIframe = this.adElement.querySelector("#".concat(this.ifID));

                        if (this.modeRenderAdWrapper == "iframe") {
                            this.adDoc = this.adIframe.contentWindow || this.adIframe.contentDocument;

                            if (this.adDoc && this.adDoc.document) {
                                this.adDoc = this.adDoc.document;
                            }

                            this.adDoc.open();
                            this.adDoc.write(containerHtm);
                            this.adDoc.close();
                        } else {
                            this.adIframe.innerHTML = containerHtm;
                            this.adDoc = document;
                        }
                    }
                }, {
                    key: "getVolumeControlHtml",
                    value: function getVolumeControlHtml() {
                        if (this.isPinZone) {
                            return handleBarsCustom(controls_default.a, {
                                playPauseTopArt2: this.playPauseTopArt2,
                                toggleVolume: this.toggleVolume,
                                volumeTopArt2: this.volumeTopArt2,
                                classAdControlsTop: this.classAdControlsTop,
                                classStatus: "power-play-status power-playing-now",
                                classVol: this.defaultVolume === 0 ? "sound_off" : "sound_on",
                                playPower: handleBarsCustom(play_default.a, {
                                    "class": "class=\"power-ad-controls-icon power-ad-play-icon-svg\""
                                }),
                                pausePower: handleBarsCustom(pause_default.a, {
                                    "class": "class=\"power-ad-controls-icon power-ad-pause-icon-svg\""
                                }),
                                mutePower: handleBarsCustom(mute_default.a, {
                                    "class": "power-ad-mute-icon-svg"
                                }),
                                unMutePower: handleBarsCustom(unmute_default.a, {
                                    "class": "power-ad-unmute-icon-svg"
                                })
                            });
                        }

                        return "<power id=\"".concat(this.toggleVolume, "\" class=\"").concat(this.defaultVolume === 0 ? "sound_off" : "sound_on", "\" style=\"display: none\">\n                    <power class=\"vi__muted\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" id=\"Capa_1\" x=\"0px\" y=\"0px\" width=\"1.3em\" height=\"1.3em\" viewBox=\"0 0 124.625 124.625\" style=\"enable-background:new 0 0 124.625 124.625;\" xml:space=\"preserve\"> <g> <path d=\"M6,92.404h23.1l25.6,19.3c4,3,9.601,0.2,9.601-4.8v-89.2c0-4.9-5.701-7.8-9.601-4.8l-25.6,19.3H6c-3.3,0-6,2.7-6,6v48.301 C0,89.704,2.7,92.404,6,92.404z\" fill=\"#dddddd\"></path> <path d=\"M122.4,40.604c-2.7-2.7-7.2-2.7-9.9,0l-11.8,11.8l-11.8-11.8c-2.7-2.7-7.2-2.7-9.9,0c-2.699,2.7-2.699,7.2,0,9.9 l11.801,11.8L79,74.104c-2.699,2.7-2.699,7.2,0,9.9c1.4,1.399,3.2,2.1,5,2.1c1.801,0,3.6-0.7,5-2.1l11.801-11.801L112.6,84.004 c1.4,1.399,3.201,2.1,5,2.1c1.801,0,3.601-0.7,5-2.1c2.701-2.7,2.701-7.2,0-9.9l-12-11.8l11.801-11.8 C125.1,47.804,125.1,43.304,122.4,40.604z\" fill=\"#dddddd\"></path> </g> <g> </g> <g> </g> <g> </g> <g> </g> <g> </g> <g> </g> <g> </g> <g> </g> <g> </g> <g> </g> <g> </g> <g> </g> <g> </g> <g> </g> <g> </g> </svg></power>\n                    <power class=\"vi__volume\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\" id=\"Capa_1\" x=\"0px\" y=\"0px\" width=\"1.3em\" height=\"1.3em\" viewBox=\"0 0 115.3 115.3\" style=\"enable-background:new 0 0 115.3 115.3;\" xml:space=\"preserve\"> <g> <path d=\"M47.9,14.306L26,30.706H6c-3.3,0-6,2.7-6,6v41.8c0,3.301,2.7,6,6,6h20l21.9,16.4c4,3,9.6,0.2,9.6-4.8v-77 C57.5,14.106,51.8,11.306,47.9,14.306z\" fill=\"#dddddd\"></path> <path d=\"M77.3,24.106c-2.7-2.7-7.2-2.7-9.899,0c-2.7,2.7-2.7,7.2,0,9.9c13,13,13,34.101,0,47.101c-2.7,2.7-2.7,7.2,0,9.899 c1.399,1.4,3.199,2,4.899,2s3.601-0.699,4.9-2.1C95.8,72.606,95.8,42.606,77.3,24.106z\" fill=\"#dddddd\"></path> <path d=\"M85.1,8.406c-2.699,2.7-2.699,7.2,0,9.9c10.5,10.5,16.301,24.4,16.301,39.3s-5.801,28.8-16.301,39.3 c-2.699,2.7-2.699,7.2,0,9.9c1.4,1.399,3.2,2.1,4.9,2.1c1.8,0,3.6-0.7,4.9-2c13.1-13.1,20.399-30.6,20.399-49.2 c0-18.6-7.2-36-20.399-49.2C92.3,5.706,87.9,5.706,85.1,8.406z\" fill=\"#dddddd\"></path> </g> <g> </g> <g> </g> <g> </g> <g> </g> <g> </g> <g> </g> <g> </g> <g> </g> <g> </g> <g> </g> <g> </g> <g> </g> <g> </g> <g> </g> <g> </g> </svg></power>\n                </power>");
                    }
                }, {
                    key: "getProgressBarHtml",
                    value: function getProgressBarHtml() {
                        return "<div id=\"".concat(this.progressbar, "\" style=\"display: none;\"><div id='").concat(this.ppMessageBox, "'>").concat(this.loadingText, "</div><div id='").concat(this.pubpowerbrand, "'></div></div>");
                    }
                }, {
                    key: "addVideoElement",
                    value: function addVideoElement(videoSource) {
                        if (typeof_default()(this.adDoc) !== "object") {
                            return;
                        }

                        var videoElm = this.adDoc.createElement("video");
                        var sourceMP4 = this.adDoc.createElement("source");
                        sourceMP4.type = "video/mp4";
                        sourceMP4.src = videoSource.mp4;
                        videoElm.appendChild(sourceMP4);
                        var sourceWEBM = this.adDoc.createElement("source");
                        sourceWEBM.type = "video/webm";
                        sourceWEBM.src = videoSource.webm;
                        videoElm.appendChild(sourceWEBM);
                        var sourceOGG = this.adDoc.createElement("source");
                        sourceOGG.type = "video/ogg";
                        sourceOGG.src = videoSource.ogv;
                        videoElm.appendChild(sourceOGG);
                        videoElm.setAttribute("style", "position: absolute;z-index: -1;width: 100%;height: 100%;display:none");
                        videoElm.setAttribute("id", "viVideoContent");
                        videoElm.setAttribute("playsinline", "");
                        this.getContainerEl().appendChild(videoElm);
                        return videoElm;
                    }
                }, {
                    key: "addSkipButton",
                    value: function addSkipButton(skipCallback) {
                        var adWrapper = this.getWrapperEl();
                        var skip_container = this.adDoc.createElement("div");
                        var skipHtml = '<div class="videoAdUi" style="pointer-events: auto; cursor: pointer; z-index: 9998; position: absolute; right: 1px; bottom: 20px; background: rgb(0, 0, 0); display: block; padding: 0px; margin: 0px;"><div class="videoAdUiTopBar videoAdUiTopBarWithGradients" style="display: block;"></div><div class="videoAdUiBottomBar"><div class="videoAdUiSkipWidgetV2 noTextSkipButton raisedSkipButton"><div class="videoAdUiPreSkipContainer" style="opacity: 0.9;"><div class="videoAdUiPreSkipButton" tabindex="0"><div class="videoAdUiPreSkipText" style="opacity: 0.9; padding: 12px 15px; color: #fff; text-align: center; font-size: 14px;min-width:16px;cursor: default; font-family: Arial" aria-label="Skip Ad Countdown">5</div></div></div><div class="videoAdUiSkipContainer html5-stop-propagation" style="display:none;"><button style="cursor: pointer;min-width: 180px; border: 1px solid #ccc; padding: 10px 15px; color: #fff; background-color: #000;" class="videoAdUiSkipButton videoAdUiAction videoAdUiRedesignedSkipButton" aria-label="Skip Ad"><div class="videoAdUiSkipButtonExperimentalText" style="display:inline-block; font-size:18px;">Skip Ad</div><div class="videoAdUiSkipIcon" style="display:inline-block"><svg xmlns="http://www.w3.org/2000/svg" fill="white" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" focusable="false" width="1.4rem" height="1.4rem" style="-ms-transform: rotate(360deg); -webkit-transform: rotate(360deg); transform: rotate(360deg);margin-bottom: -0.3rem" preserveAspectRatio="xMidYMid meet" viewBox="0 0 24 24"><path d="M16 18h2V6h-2M6 18l8.5-6L6 6v12z"></path></svg></div></button></div></div></div></div>';
                        skipHtml += "<style>@media only screen and (max-width: 576px){.videoAdUiPreSkipText{font-size: 11px !important;padding:12px !important} .videoAdUiSkipButtonExperimentalText{font-size: 16px !important;} .videoAdUiSkipIcon svg{width: 1.2rem !important; height: 1.2rem !important;} .videoAdUiSkipButton{padding: 10px !important; min-width: 120px !important;}}</style>";
                        skip_container.innerHTML = skipHtml;
                        adWrapper.appendChild(skip_container); // start count down

                        var skipContainer = this.adDoc.querySelector(".videoAdUiSkipContainer");
                        var preSkipContainer = this.adDoc.querySelector(".videoAdUiPreSkipText");

                        if (preSkipContainer) {
                            var skipTime = 5;
                            preSkipContainer.innerHTML = skipTime;
                            var countDown = setInterval(function () {
                                if (skipTime <= 1) {
                                    preSkipContainer.style.display = "none";
                                    preSkipContainer.style.opacity = "0";
                                    skipContainer.style.display = "block";
                                    clearInterval(countDown);
                                } else {
                                    skipTime--;
                                    preSkipContainer.innerHTML = skipTime;
                                }
                            }, 1000);
                        } // sự kiện click nút skip


                        skipContainer.addEventListener("click", skipCallback);
                    }
                }, {
                    key: "resize",
                    value: function resize(adWidth, adHeight, adSlotHeight) {
                        this.adIframe.style.width = "".concat(adWidth, "px");
                        this.adIframe.style.height = "".concat(adHeight, "px");
                        this.getWrapperEl().style.height = "".concat(adSlotHeight, "px");
                    }
                }, {
                    key: "getWrapperEl",
                    value: function getWrapperEl() {
                        if (this.adDoc.getElementById(this.adwrapper)) {
                            return this.adDoc.getElementById(this.adwrapper);
                        } else {
                            // trường hợp vpaid jwplayer, js vpaid được player của jw render trong 1 iframe khác
                            this.adDoc = window.parent.document;
                            return this.adDoc.getElementById(this.adwrapper);
                        }
                    }
                }, {
                    key: "getContainerEl",
                    value: function getContainerEl() {
                        return this.adDoc.getElementById(this.adcontainer);
                    }
                }, {
                    key: "getVolumeControlEl",
                    value: function getVolumeControlEl() {
                        if (this.isPinZone) {
                            return this.adDoc.getElementById(this.volumeTopArt2);
                        }

                        return this.adDoc.getElementById(this.toggleVolume);
                    }
                }, {
                    key: "getPlayPauseEl",
                    value: function getPlayPauseEl() {
                        return this.adDoc.getElementById(this.playPauseTopArt2);
                    }
                }, {
                    key: "startProgress",
                    value: function startProgress(remainingTime) {
                        this.adDoc.getElementById(this.vlMessageBox).style.display = "none";
                        var progress = this.adDoc.createElement("div");
                        progress.setAttribute("style", "position:absolute;height:25px;background:#e5bb00;width:0%");
                        progress.setAttribute("id", "progress");
                        this.adDoc.getElementById(this.progressbar).appendChild(progress);

                        var PRELOAD = function (doc) {
                            var TIMER, COUNTER, TOTAL_STEP, AMOUNT;
                            COUNTER = 0;
                            AMOUNT = 0;
                            TOTAL_STEP = 0;
                            var config = {
                                time: remainingTime,
                                stepPerSecond: 20,
                                bgCorver: "#002b50",
                                bgMain: "#009cff"
                            };

                            function findOne(str) {
                                return doc.querySelector(str);
                            }

                            function updatePreload(percent) {
                                var main;
                                main = findOne("#progress");

                                if (main) {
                                    main.style.width = percent + "%";
                                }
                            }

                            function _init(option) {
                                config = Object.assign(config, option);
                                TOTAL_STEP = config.time * config.stepPerSecond;
                                AMOUNT = 100 / TOTAL_STEP;
                            }

                            function loop() {
                                if (++COUNTER > TOTAL_STEP) {
                                    clearTimeout(TIMER);
                                    return;
                                }

                                updatePreload(COUNTER * AMOUNT);
                                TIMER = setTimeout(loop, 1e3 / config.stepPerSecond);
                            }

                            return {
                                init: function init(option) {
                                    _init(option);
                                },
                                run: function run() {
                                    loop();
                                }
                            };
                        }(this.adDoc);

                        PRELOAD.init({
                            time: remainingTime,
                            stepPerSecond: 20
                        });
                        PRELOAD.run();
                    }
                }, {
                    key: "displayVolumeControl",
                    value: function displayVolumeControl() {
                        this.adDoc.getElementById(this.toggleVolume).style.display = "block";
                    }
                }, {
                    key: "displayProgressBar",
                    value: function displayProgressBar() {
                        this.adDoc.getElementById(this.progressbar).style.display = "block";
                    } // AdInfor

                }, {
                    key: "getAdsInfoHTML",
                    value: function getAdsInfoHTML() {
                        if (!this.isShowAdInfor) return "";
                        return "<div id=\"".concat(this.powerAdInfor, "\" style=\"font-family: Roboto; z-index:9999; position: absolute; display: flex; align-items: center; top: 8px;left: 8px; background-color: #00000050; border-radius: 2px; padding: 5px;\">\n                    <div style=\"font-family: Roboto; background-color: #f7a855; color: #ffffff; padding: 1.5px 4px 1.5px 4px;; border-radius: 2px; letter-spacing:0.5px; font-size: 0.75rem;\">\n                        Ad\n                    </div>\n                    <div style=\"font-family: Roboto; padding-left: 6.5px; padding-right: 6.5px; color: #ffffff; letter-spacing:0.5px; font-size: 0.75rem; \">\n                        0/2</div>\n                    <div style=\"font-family: Roboto; color: #ffffff; letter-spacing:0.5px;font-size: 0.75rem; \">00:00</div>\n                </div>");
                    }
                }, {
                    key: "getAdInforEl",
                    value: function getAdInforEl() {
                        if (!this.isShowAdInfor) return;
                        return this.adDoc.getElementById(this.powerAdInfor);
                    }
                }, {
                    key: "displayAdInfor",
                    value: function displayAdInfor() {
                        if (!this.isShowAdInfor) return;
                        this.getAdInforEl().style.display = "flex";
                    }
                }, {
                    key: "setAdInforNum",
                    value: function setAdInforNum() {
                        var curAds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
                        var maxAds = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                        if (!this.isShowAdInfor) return;
                        var listDiv = this.getAdInforEl().querySelectorAll("div");
                        listDiv[1].innerHTML = curAds + "/" + maxAds;
                    }
                }, {
                    key: "setStartPauseTimeAdsRemining",
                    value: function setStartPauseTimeAdsRemining(bool) {
                        if (!this.isShowAdInfor) return;
                        this.isPauseAdRemining = bool;
                    }
                }, {
                    key: "setAdInforTimer",
                    value: function setAdInforTimer(time) {
                        var _this3 = this;

                        if (!this.isShowAdInfor) return;
                        var listDiv = this.getAdInforEl().querySelectorAll("div");
                        var timeStart = this.formatTime(time);
                        listDiv[2].innerHTML = "".concat(timeStart.minutes, ":").concat(timeStart.seconds);
                        var adsTime = time;
                        this.timerAdsRemaining = setInterval(function () {
                            if (_this3.isPauseAdRemining) return;
                            adsTime--;

                            var timeFormat = _this3.formatTime(adsTime);

                            listDiv[2].innerHTML = "".concat(timeFormat.minutes, ":").concat(timeFormat.seconds);
                            if (adsTime <= 0) _this3.clearAdInforTimer();
                        }, 1000);
                    }
                }, {
                    key: "clearAdInforTimer",
                    value: function clearAdInforTimer() {
                        if (!this.isShowAdInfor) return;
                        clearInterval(this.timerAdsRemaining);
                        this.timerAdsRemaining = null;
                    }
                }, {
                    key: "formatTime",
                    value: function formatTime(timeInSeconds) {
                        var result = new Date(timeInSeconds * 1000).toISOString().substr(11, 8);
                        return {
                            minutes: result.substr(3, 2),
                            seconds: result.substr(6, 2)
                        };
                    }
                }]);

                return AdVideoContainerBuilder;
            }();

            Object.assign(AdPlayer_AdVideoContainerBuilder.prototype, mixinCreateCss);
            /* harmony default export */ var helper_AdPlayer = (AdPlayer_AdPlayer);
// CONCATENATED MODULE: ./src/plugins/Instream.js










            var Instream_CONSTANTS = __webpack_require__(5);

            var adSlots = [];

            var Instream_Instream = /*#__PURE__*/function () {
                function Instream(adSlotObj) {
                    classCallCheck_default()(this, Instream);

                    if (!adSlotObj) throw new Error('adSlot is null'); /// Setup All Config
                    /// Ads

                    var instreamSlot = Configs.adsTags.instreamSlot;

                    if (!instreamSlot || !instreamSlot[adSlotObj]) {
                        this.logMess("Instream['".concat(adSlotObj, "'] config is Empty..."));
                        return;
                    }

                    var adWrapper = null;
                    var adElements = document.getElementsByClassName(Configs.adClass);

                    for (var j = 0; j < adElements.length; j++) {
                        var element = adElements[j];

                        if (element && element.getAttribute("data-ad-slot") == adSlotObj) {
                            adWrapper = element;
                            break;
                        }
                    }

                    if (adWrapper && !isCheckElementVisible(adWrapper)) {
                        this.logMess("Instream['".concat(adSlotObj, "'] not visible..."));
                        return;
                    }

                    this.slotId = adSlotObj;
                    this.initConfig = JSON.parse(JSON.stringify(instreamSlot[adSlotObj]));
                    this.initConfig.floorPrice = isNaN(parseFloat(this.initConfig.floorPrice)) ? 0 : parseFloat(this.initConfig.floorPrice); // this.initConfig.dynamicFloor = isNaN(parseFloat(this.initConfig.dynamicFloor)) ? 0 : parseFloat(this.initConfig.dynamicFloor);

                    this.curFloorObj = null; // Current floor price obj after requestbid | price, type

                    this.initConfig.inViewPort = true; // Ads true => inViewPort, false => outViewPort
                    // Placement Adslot

                    this.placementAdsSlot = this.getPlacementByAdSlot(adSlotObj); // include all content (Video + Ads)

                    if (!this.placementAdsSlot) this.logMess('Placement current dont available');

                    if (adSlots[this.slotId]) {
                        adSlots[this.slotId] += 1;
                    } else {
                        adSlots[this.slotId] = 1;
                    }

                    this.adSlot = this.slotId + "_instream_" + adSlots[this.slotId];
                    Configs.videoAdClass[this.adSlot] = this;
                    this.placementAdsSlot.id = this.adSlot;
                    this.placementAdsSlot.dataset.id = this.adSlot;
                    this.init();
                }

                createClass_default()(Instream, [{
                    key: "init",
                    value: function init() {
                        /// View Container
                        this.videoContainerTemp = this.initVideoContainer();

                        if (!this.videoContainerTemp) {
                            this.logMess('Video templete is null.');
                            return;
                        }

                        ;
                        this.adsPlaceholder = this.videoContainerTemp.getAdsPlaceholder();
                        this.powerVideoContainer = this.videoContainerTemp.getPowerVideoContainer(); // Ads Controller

                        this.adsPlayer = null;
                        this.curBidWon = null;
                        this.dfpConfig = null;
                        this.bidManager = null;
                        this.adsManager = null;
                        this.bidResponseDFP = null; // All View Check

                        this.placementViewPort = null;
                        this.adsViewPortDetect = null;
                        createInfoDebugOverlay(this.adSlot, false, true); // Timer Refresh Ads

                        var adConfig = this.videoContainerTemp.videoSetting.adConfig;
                        this.timerRefreshAds = null;
                        this.bidConfig = {
                            type: adConfig.autoSkip ? "default" : "delay",
                            // default, auto, manual
                            curAds: 0,
                            // ads showed
                            maxAds: adConfig.autoSkip ? adConfig.autoSkip.adsNums : 1,
                            // total ads
                            curRequest: 0,
                            maxRequest: adConfig.vastRetry,
                            delay: adConfig.delay,
                            isAdsPlaying: false,
                            // true -> ads playing
                            isRequestBid: false,
                            // true -> request bid, false -> not request bid
                            isStopProcessBids: false,
                            // true -> stop process bid, false -> process bid
                            isShowAutoNextVideo: false // true -> show auto next video, false -> not show auto next video

                        }; // this.initConfig.isFistLoad = true; // First time play video

                        this.initBidManager();
                    }
                }, {
                    key: "processHeavyAds",
                    value: function processHeavyAds() {
                        this.logMess("Process Heavy Ads with adsSlot: " + this.adSlot); // remove and init new content html

                        if (this.placementAdsSlot) {
                            this.placementAdsSlot.innerHTML = "";
                            this.placementAdsSlot.style.cssText = "";
                        }

                        this.videoContainerTemp = null;
                        this.adsPlaceholder = null; // Clear View Port

                        if (this.placementViewPort) {
                            this.placementViewPort.clear();
                            this.placementViewPort = null;
                        }

                        if (this.adsViewPortDetect) {
                            this.adsViewPortDetect.clear();
                            this.adsViewPortDetect = null;
                        } // remove timer


                        if (this.timerRefreshAds) {
                            this.timerRefreshAds.pause();
                            this.timerRefreshAds = null;
                        }

                        this.init();
                    } // Init View + Bids Manager

                }, {
                    key: "initVideoContainer",
                    value: function initVideoContainer() {
                        if (!this.placementAdsSlot || !this.initConfig || !this.initConfig.vid || !this.initConfig.vid.contents || !this.initConfig.vid.template) {
                            return;
                        }

                        var videoContainerTemp = new VideoContainerTemplate_VideoContainerTemplate({
                            placementAdSlot: this.placementAdsSlot,
                            config: this.initConfig.vid
                        });
                        return videoContainerTemp;
                    }
                }, {
                    key: "increaseDistanceBottomFloating",
                    value: function increaseDistanceBottomFloating(data) {
                        try {
                            this.logMess("Increase distance Bottom for slot ".concat(this.adSlot));

                            if (!this.videoContainerTemp || !data) {
                                return;
                            }

                            if (this.videoContainerTemp.marginBottomDistance > data.heightBid) {
                                return;
                            }

                            var offset = utlis_mobileDetect() ? 40 : 10;
                            this.videoContainerTemp.marginBottomDistance = data.heightBid + offset;
                            this.videoContainerTemp.powerVideoWrapper.style.bottom = "".concat(data.heightBid + offset, "px");
                            this.videoContainerTemp.updateStyleFloating();
                        } catch (error) {}
                    }
                }, {
                    key: "reductionDistanceBottomFloating",
                    value: function reductionDistanceBottomFloating() {
                        try {
                            this.logMess("Reduction distance Bottom for slot ".concat(this.adSlot));

                            if (!this.videoContainerTemp) {
                                return;
                            }

                            this.videoContainerTemp.setDefaultDistanceBottomFloating();
                        } catch (error) {}
                    }
                }, {
                    key: "initBidManager",
                    value: function initBidManager() {
                        var _this = this;

                        this.logMess("Init BidManger");
                        var playerSize = this.videoContainerTemp.getFullSizeWrapper();

                        if (!playerSize) {
                            this.logMess("Player Size is Empty");
                            return;
                        }

                        var adUnitList = []; // Bid Instream

                        var adunit = this.initConfig.adunit;
                        adunit.code = this.adSlot;
                        adunit.bids = adunit.bids ? adunit.bids : [];
                        if (!adunit.mediaTypes) adunit.mediaTypes = mediaTypesAdFormatVideo('instream', playerSize);
                        adUnitList.push(adunit); // Check Ad In Out Of View
                        // Use Process Video BG

                        this.placementViewPort = newViewPortDetect(this.powerVideoContainer, {
                            threshold: [51]
                        }, false);
                        this.placementViewPort.inViewPort(function () {
                            // this.logMess(`placementViewPort ${this.adSlot} - inViewPort.`);
                            // Trigger set Video in view port first time.
                            var floatingSetting = _this.videoContainerTemp.videoSetting.floatingSetting;

                            if (floatingSetting && floatingSetting.floatingOnView) {
                                _this.videoContainerTemp.videoSetting.floatingSetting.floatingOnView = false;
                            }

                            _this.videoContainerTemp.deActiveFloating();

                            if (_this.adsManager) _this.resizeAds();
                        });
                        this.placementViewPort.outViewPort(function () {
                            // this.logMess(`placementViewPort ${this.adSlot} - outViewPort.`);
                            // this.videoContainerTemp.activeFloating();
                            if (_this.adsManager) _this.resizeAds();
                        }); // Use Process Video Ads

                        this.adsViewPortDetect = newViewPortDetect(this.adsPlaceholder, {
                            threshold: [51]
                        }, false);
                        this.adsViewPortDetect.inViewPort(function () {
                            // this.logMess(`adsViewPortDetect ${this.adSlot} - inViewPort.`);
                            _this.initConfig.inViewPort = true;

                            _this.procesAdsInView();

                            if (_this.videoContainerTemp.userAction.curVideoStatus) _this.playVideoBG();

                            if (_this.bidConfig.curAds < _this.bidConfig.maxAds) {
                                if (!_this.adsManager && !_this.adsPlayer && _this.bidManager.bidResponses.length > 0) {
                                    _this.bidConfig.isStopProcessBids = false;

                                    _this.processBids();
                                } else if (!_this.videoContainerTemp.userAction.curVideoStatus && !_this.adsManager && _this.adsPlayer && _this.bidManager.bidResponses.length <= 0) {
                                    _this.videoContainerTemp.userAction.isRequestBid = true;

                                    _this.playVast();
                                }
                            }
                        });
                        this.adsViewPortDetect.outViewPort(function () {
                            // this.logMess(`adsViewPortDetect ${this.adSlot} - outViewPort.`);
                            _this.initConfig.inViewPort = false;

                            _this.videoContainerTemp.activeFloating();

                            _this.procesAdsOutView();

                            _this.videoContainerTemp.userAction.curVideoStatus = _this.videoContainerTemp.userAction.isVideoPlaying;

                            _this.pauseVideoBG();
                        });
                        this.adsViewPortDetect.inTab(function () {
                            // this.logMess(`adsViewPortDetect ${this.adSlot} - inTab.`);
                            if (_this.adsManager && _this.initConfig.inViewPort) _this.adsManager.resume();
                            if (_this.timerRefreshAds) _this.timerRefreshAds.resume();
                        });
                        this.adsViewPortDetect.outTab(function () {
                            // this.logMess(`adsViewPortDetect ${this.adSlot} - outTab.`);
                            if (_this.adsManager) _this.adsManager.pause();
                            if (_this.timerRefreshAds) _this.timerRefreshAds.pause();
                        });

                        var _getFloorTest = getFloorTest(this.initConfig.floorTest, adunit.code),
                            _getFloorTest2 = slicedToArray_default()(_getFloorTest, 2),
                            floorTest = _getFloorTest2[0],
                            testCaseId = _getFloorTest2[1]; // Create BidManger


                        this.bidManager = new helper_BidManager({
                            slotId: this.adSlot,
                            tagId: this.initConfig.zid,
                            floorPrice: this.initConfig.floorPrice,
                            dynamicFloor: getDynamicFloor(this.initConfig.dynamicFloor, adunit.code),
                            abTestFloorId: this.initConfig.abTestId,
                            floorTest: floorTest,
                            testTime: this.initConfig.timeTest,
                            testCaseId: testCaseId,
                            adUnits: adUnitList,
                            adWidth: this.initConfig.w,
                            adHeight: this.initConfig.h,
                            tagWidth: this.initConfig.w,
                            tagHeight: this.initConfig.h,
                            viewPortDetect: this.adsViewPortDetect
                        }); // Process with heavy ads

                        _addEventListener("INSTREAM_HEAVY_ADS", function (event) {
                            return _this.processHeavyAds();
                        }); // Btn Close Floating Event


                        this.videoContainerTemp.setVideoController(function (event) {
                            _this.logMess("VideoContainer ".concat(_this.adSlot, " - event: ").concat(event));

                            if (event == 'floatingClose') {
                                if (_this.adsManager) return;
                                _this.videoContainerTemp.userAction.curVideoStatus = _this.videoContainerTemp.userAction.isVideoPlaying;

                                _this.pauseVideoBG();

                                _this.resizeAds();
                            } else if (event == 'changeVideo') {
                                if (_this.bidConfig.type == "default") {
                                    if (!_this.videoContainerTemp.userAction.isVideoPlaying) return;

                                    _this.setStartAutoNextVideoAfter();

                                    _this.resetBidConfig(true);

                                    _this.videoContainerTemp.userAction.curVideoStatus = false;

                                    _this.videoContainerTemp.showLoading();

                                    if (!_this.adsManager && !_this.adsPlayer && _this.bidManager.bidResponses.length > 0) {
                                        _this.bidConfig.isStopProcessBids = false;

                                        _this.processBids();
                                    } else if (!_this.adsManager && _this.adsPlayer && _this.bidManager.bidResponses.length <= 0) {
                                        _this.videoContainerTemp.userAction.isRequestBid = true;

                                        _this.playVast();
                                    } else {
                                        _this.videoContainerTemp.hideLoading();

                                        if (_this.bidConfig.curAds < _this.bidConfig.maxAds) {
                                            _this.processRequestBid();
                                        }
                                    }
                                } else {
                                    _this.logMess("Remove + ReInit AdsRefreshTimer for adSlot ".concat(_this.adSlot));

                                    _this.initAdRefreshTimer(true);
                                }
                            } else if (event == 'play') {} else if (event == 'onloadeddata') {
                                _this.setStartAutoNextVideoAfter();

                                if (!_this.adsManager && _this.bidManager.bidResponses.length <= 0) {
                                    _this.logMess("onloadeddata: play video");

                                    _this.playVideoBG();

                                    _this.videoContainerTemp.hideLoading(); // Init Auto Next Start Video For InStream


                                    _this.videoContainerTemp.startTimerShowNextStayBTN();
                                }

                                if (_this.bidConfig.type != "default") {
                                    // delay 
                                    if (_this.timerRefreshAds) _this.timerRefreshAds.resume();
                                }
                            }
                        });
                        this.processRequestBid();
                    } // Process + Request Bid + DFP + Render Ads

                }, {
                    key: "setStartAutoNextVideoAfter",
                    value: function setStartAutoNextVideoAfter() {
                        // this.videoContainerTemp.userAction.isVideoPlaying = true;
                        // this.videoContainerTemp.userAction.curVideoStatus = this.videoContainerTemp.userAction.isVideoPlaying;
                        this.bidConfig.isShowAutoNextVideo = true;
                    }
                }, {
                    key: "resetBidConfig",
                    value: function resetBidConfig() {
                        var resetFull = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                        if (resetFull) this.bidConfig.curAds = 0;
                        if (resetFull) this.bidConfig.isStopProcessBids = false;
                        this.bidConfig.curRequest = 0;
                        this.bidConfig.isRequestBid = false;
                        this.videoContainerTemp.userAction.isRequestBid = false;
                    }
                }, {
                    key: "processRequestBid",
                    value: function processRequestBid() {
                        // TH1: User dont click play => Request Bid -> maxRequest (if ads ok => show ads else request bid again until next video)
                        // TH2: User click play + Request bid < 5 => if ads ok => show ads else request bid to 5 times if ads ok => show ads else play video
                        // TH3: User click play + Request Bid > 5 => if ads ok => show ads else => play video
                        if (this.adsManager) this.bidConfig.isStopProcessBids = true;
                        this.bidConfig.curRequest++; // Request bid > 5 and user next or play video -> play video and stop ads 

                        if (this.bidConfig.curRequest > 5 && this.videoContainerTemp.userAction.isVideoLoaded) {
                            this.logMess("Request Bid > 5 and user next or play video -> play video and stop ads");
                            this.videoContainerTemp.play();
                            this.videoContainerTemp.hideLoading(); // Init Auto Next Start Video For InStream

                            this.videoContainerTemp.startTimerShowNextStayBTN();
                            return;
                        }

                        if (this.bidConfig.curRequest > this.bidConfig.maxRequest) {
                            this.logMess("AdSlot " + this.adSlot + " request bid " + this.bidConfig.maxRequest + " times is maximum.");
                            return;
                        }

                        this.startNewAuction();
                    }
                }, {
                    key: "startNewAuction",
                    value: function startNewAuction() {
                        var _this2 = this;

                        this.logMess("=========================");
                        this.logMess("Start New Auction: " + this.adSlot + " - " + this.bidConfig.curRequest + " times.");
                        this.bidConfig.isRequestBid = true;
                        this.videoContainerTemp.userAction.isRequestBid = true;
                        this.bidManager.requestBids(function (auctionIsEmptyBid, curFloorObj) {
                            _this2.curFloorObj = curFloorObj;
                            var isRequestDFP = !Configs.gbk && _this2.initConfig.dfpAdUnit ? true : false;

                            if (auctionIsEmptyBid && !isRequestDFP) {
                                _this2.logMess("Bid Response is Empty and Not request to DFP...");

                                _this2.bidConfig.isRequestBid = false;
                                _this2.videoContainerTemp.userAction.isRequestBid = false;

                                _this2.initAdRefreshTimer();

                                return;
                            }

                            if (_this2.bidConfig.isStopProcessBids) {
                                _this2.bidConfig.isRequestBid = false;
                                _this2.videoContainerTemp.userAction.isRequestBid = false;
                            } else {
                                _this2.processBids();
                            }
                        });
                    }
                }, {
                    key: "processBids",
                    value: function processBids() {
                        try {
                            var dfpAdUnitObj = !Configs.gbk && this.initConfig.dfpAdUnit ? processDfpAdUnit(this.initConfig.dfpAdUnit) : null;

                            if (dfpAdUnitObj) {
                                // Request to DFP with highest bid in all bid responses
                                this.logMess("Request Bid to DFP on adSlot: " + this.adSlot);
                                this.bidResponseDFP = this.bidManager.getHighestBid(); // Process currency

                                var _ref = this.bidResponseDFP ? processRealCpm(this.bidResponseDFP.cpm, dfpAdUnitObj) : processRealCpm(this.curFloorObj.price, dfpAdUnitObj),
                                    _ref2 = slicedToArray_default()(_ref, 2),
                                    realCPM = _ref2[0],
                                    granularityMultiplier = _ref2[1];

                                var dfpAdUnit = dfpAdUnitObj.dfpAdUnit ? dfpAdUnitObj.dfpAdUnit : ""; //

                                var TARGET_KEYS = Instream_CONSTANTS.TARGET_KEYS;
                                var customParams = {};
                                customParams["pw_ref"] = Configs.refererDomainID ? Configs.refererDomainID + "_" + Configs.domainID : null;
                                customParams[TARGET_KEYS.ACCOUNT] = this.initConfig.targetGoogleAccount ? this.initConfig.targetGoogleAccount : "";
                                customParams[TARGET_KEYS.PW_NETWORK] = true;
                                customParams[TARGET_KEYS.PW_LINE_ID] = this.initConfig.targetLineId ? this.initConfig.targetLineId : "";
                                var targetAdSlot = this.initConfig.targetAdSlot || "";
                                var targetAdSlotVal = this.curFloorObj.type != null ? "".concat(targetAdSlot, "_").concat(this.curFloorObj.abTestId, "_").concat(this.curFloorObj.type) : targetAdSlot;
                                customParams[TARGET_KEYS.TARGET_ADSLOT] = targetAdSlotVal;
                                var dfpConfig = {
                                    adUnit: dfpAdUnit,
                                    targetAccountId: this.initConfig.targetGoogleAccount || "",
                                    targetAdSlot: targetAdSlot,
                                    customParams: customParams
                                }; // 

                                if (this.bidResponseDFP) {
                                    var ggBidAdj = this.initConfig.googleBidAdjustment ? parseFloat(this.initConfig.googleBidAdjustment) : 1;

                                    if (Configs.listAmazonBidder.includes(this.bidResponseDFP.bidder)) {
                                        this.bidResponseDFP.adserverTargeting[TARGET_KEYS.PRICE_AMZ_VIDEO] = getCustomAPDPB(this.bidResponseDFP.mediaType, this.bidResponseDFP.adserverTargeting[TARGET_KEYS.PRICE_AMZ_VIDEO], granularityMultiplier, ggBidAdj);
                                    } else {
                                        this.bidResponseDFP.adserverTargeting[TARGET_KEYS.PRICE_BUCKET] = getCustomAPDPB(this.bidResponseDFP.mediaType, realCPM, granularityMultiplier, ggBidAdj);
                                        dfpConfig.customParams[TARGET_KEYS.PRICE_BUCKET] = this.bidResponseDFP.adserverTargeting[TARGET_KEYS.PRICE_BUCKET];
                                    }
                                } else {
                                    if (realCPM > 0) {
                                        dfpConfig.customParams[TARGET_KEYS.PRICE_BUCKET] = getCustomAPDPB("video", realCPM, granularityMultiplier, 1);
                                    }
                                }

                                this.initVast(dfpConfig);
                            } else {
                                this.initVast();
                            }
                        } catch (e) {
                            this.logMess("Error: " + e);
                        }
                    }
                }, {
                    key: "initVast",
                    value: function initVast() {
                        var _this3 = this;

                        var dfpConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
                        if (!dfpConfig) this.logMess("BidManager Get Highest Bid for adSlot: " + this.adSlot);
                        var bidWon = dfpConfig ? this.bidResponseDFP : this.bidManager.getHighestBid();

                        if (!bidWon && !dfpConfig) {
                            this.logMess("Bids is Empty for adSlot: " + this.adSlot);
                            this.clearAds();
                            this.initAdRefreshTimer();
                            return;
                        }

                        this.curBidWon = bidWon;
                        this.dfpConfig = dfpConfig;
                        var adUnitCode = bidWon ? bidWon.adUnitCode : this.adSlot;
                        var wAdsPlayer = this.adsPlaceholder.offsetWidth ? this.adsPlaceholder.offsetWidth : this.initConfig.vid.template.appearance.maxWidth;
                        var hAdsPlayer = this.adsPlaceholder.offsetHeight ? this.adsPlaceholder.offsetHeight : wAdsPlayer * 0.5625; // 16:9

                        this.adsPlayer = new helper_AdPlayer({
                            baseDomain: Configs.rootDomain,
                            brandLogo: Configs.brandLogoBlack,
                            pixelManager: this.bidManager.pixelManager,
                            adElement: this.adsPlaceholder,
                            adSlotId: this.adSlot,
                            adWidth: wAdsPlayer,
                            adHeight: hAdsPlayer,
                            skipRequired: false,
                            showVolumeControl: true,
                            defaultVolume: this.videoContainerTemp.userAction.isMuted ? 0 : 1,
                            showProgressBar: false,
                            // AdInfor
                            curAds: this.bidConfig.curAds,
                            maxAds: this.bidConfig.maxAds,
                            isShowAdInfor: true
                        }); // Callback Dedug Overlay

                        this.adsPlayer.setCallBacks({
                            started: function started() {
                                if (_this3.bidResponseDFP) {
                                    // => DFP win
                                    var dataBid = {
                                        adId: bidWon ? bidWon.adId : "unknown from Adx",
                                        bidder: bidWon ? bidWon.bidder : "Adx",
                                        creativeId: bidWon ? bidWon.creativeId : "unknown from Adx"
                                    };
                                    pushInfoDebugOverlay(_this3.adSlot, dataBid);
                                    _this3.bidResponseDFP = null;
                                } else {
                                    pushInfoDebugOverlay(_this3.adSlot, bidWon);
                                } // Create Report Observer for Heavy Ads


                                var iframeAd = _this3.adsPlaceholder.getElementsByTagName("iframe")[0];

                                var jData = {
                                    "creativeId": bidWon && bidWon.creativeId ? bidWon.creativeId : null,
                                    "adFormat": "Instream"
                                };
                                if (iframeAd) reportingObserver(iframeAd, jData);
                            }
                        }); // Callback Play Ads

                        this.adsPlayer.setCallBacks({
                            started: function started(adEvent) {
                                _this3.logMess("Vast Event Started on adSlot: " + adUnitCode);

                                _this3.bidConfig.isAdsPlaying = true;

                                _this3.videoContainerTemp.showLoading();

                                _this3.videoContainerTemp.userAction.curVideoStatus = _this3.videoContainerTemp.userAction.isVideoPlaying;

                                _this3.pauseVideoBG();

                                _this3.addRenderAdsCss();

                                if (_this3.adsManager && !_this3.initConfig.inViewPort) _this3.adsManager.pause(); // Play Ads Succ => reset bidResponses

                                _this3.bidManager.bidResponses = []; // Check Advertisement Scenario: default, auto, manual

                                _this3.bidConfig.curAds++;

                                if (_this3.bidConfig.type == "default") {
                                    _this3.resetBidConfig(false);
                                } // AdInfor


                                _this3.adsManager.setAdInforNum(_this3.bidConfig.curAds, _this3.bidConfig.maxAds);

                                if (_this3.bidConfig.curAds < _this3.bidConfig.maxAds) {
                                    _this3.processRequestBid();
                                }
                            },
                            impression: function impression() {
                                _this3.logMess("Vast Event Impression on adSlot: " + adUnitCode);
                            },
                            complete: function complete() {
                                _this3.logMess("Vast Event Complete on adSlot: " + adUnitCode);

                                _this3.processAdsCompleteOrHidden();
                            },
                            hidden: function hidden() {
                                if (!_this3.bidConfig.isAdsPlaying) {
                                    _this3.adsManager.callError();
                                } else {
                                    _this3.logMess("Vast Event Hidden on adSlot: " + adUnitCode);

                                    _this3.processAdsCompleteOrHidden();

                                    cleanInfoDebugOverlay(_this3.adSlot);
                                }
                            },
                            paused: function paused() {
                                _this3.logMess("Vast Event Paused on adSlot: " + adUnitCode);
                            },
                            resumed: function resumed() {
                                _this3.logMess("Vast Event Resume on adSlot: " + adUnitCode);
                            },
                            error: function error(_error) {
                                if (_this3.bidManager.bidResponses.length <= 0) {
                                    _this3.bidConfig.isRequestBid = false;
                                    _this3.videoContainerTemp.userAction.isRequestBid = false;
                                } // Bid request to DFP error -> add and recheck to show all bid response


                                if (_this3.bidResponseDFP) {
                                    _this3.logMess("Request Bid to DFP on adSlot: " + adUnitCode + " with Error: " + _error);

                                    _this3.bidManager.addBidToArray(_this3.bidResponseDFP);

                                    _this3.bidResponseDFP = null;
                                } else {
                                    _this3.logMess("Vast Event Error code: " + _error + " on adSlot: " + adUnitCode);
                                }

                                _this3.clearAds(false);

                                _this3.initVast();
                            },
                            adsVolumeChange: function adsVolumeChange(volume) {
                                // 0 -> mute | 1 -> unmute
                                _this3.videoContainerTemp.toggleMute(volume == 0 ? true : false);
                            }
                        });

                        if (this.initConfig.inViewPort && this.bidConfig.curAds < this.bidConfig.maxAds && this.videoContainerTemp.isVideoBegin()) {
                            this.playVast();
                        }
                    }
                }, {
                    key: "playVast",
                    value: function playVast() {
                        if (!this.adsPlayer && !this.curBidWon && this.dfpConfig) return;
                        this.logMess("=> Play Vast on adSlot: " + this.adSlot);
                        this.adsManager = this.adsPlayer.play({
                            bidWon: this.curBidWon,
                            dfp: this.dfpConfig
                        });
                    }
                }, {
                    key: "processAdsCompleteOrHidden",
                    value: function processAdsCompleteOrHidden() {
                        this.bidConfig.isAdsPlaying = false;

                        if (this.bidConfig.type == "default") {
                            if (this.bidManager.bidResponses.length > 0) {
                                this.bidConfig.isStopProcessBids = false;
                                this.processBids();
                            } else {
                                this.clearAds();
                                this.logMess("CurAds: " + this.bidConfig.curAds);

                                if (this.bidConfig.curAds >= this.bidConfig.maxAds) {
                                    this.logMess("Maximum show ads for this video player on adSlot: ".concat(this.adSlot, " and request ads for next Video."));
                                    this.resetBidConfig(false);
                                    this.processRequestBid();
                                } else {
                                    this.processRequestBid();
                                }

                                if (this.bidConfig.curAds > 0) {
                                    this.bidConfig.isStopProcessBids = false; // First time => load + play ads then play video after ads is ended

                                    if (!this.videoContainerTemp.userAction.userClickPlayVideo) {
                                        this.videoContainerTemp.showAllIconController();
                                        this.videoContainerTemp.userAction.isVideoPlaying = true;
                                        this.videoContainerTemp.userAction.userClickPlayVideo = true;
                                        this.videoContainerTemp.userAction.curVideoStatus = this.videoContainerTemp.userAction.isVideoPlaying;
                                    }

                                    this.videoContainerTemp.userAction.curVideoStatus = true;
                                    this.videoContainerTemp.hideLoading();

                                    if (this.videoContainerTemp.userAction.curVideoStatus && this.initConfig.inViewPort) {
                                        this.playVideoBG();

                                        if (this.bidConfig.isShowAutoNextVideo) {
                                            this.bidConfig.isShowAutoNextVideo = false;
                                            this.videoContainerTemp.startTimerShowNextStayBTN();
                                        }
                                    }
                                }
                            }
                        } else {
                            this.clearAds();
                            this.initAdRefreshTimer();
                        }
                    }
                }, {
                    key: "clearAds",
                    value: function clearAds() {
                        var isRemoveRender = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
                        if (isRemoveRender) this.removeRenderAds();
                        this.adsPlayer = null;
                        this.curBidWon = null;
                        this.dfpConfig = null;
                        this.adsManager = null;
                    }
                }, {
                    key: "procesAdsInView",
                    value: function procesAdsInView() {
                        if (!this.adsManager) return;
                        this.resizeAds();
                        this.adsManager.resume();
                    }
                }, {
                    key: "procesAdsOutView",
                    value: function procesAdsOutView() {
                        if (!this.adsManager) return;
                        this.resizeAds();
                        var userAction = this.videoContainerTemp.userAction;
                        if (!userAction.isFloating) this.adsManager.pause();

                        if ((userAction.isEnableFloating || !userAction.userClickCloseBtn) && !userAction.isFloating) {
                            this.videoContainerTemp.activeFloating();
                        } else {
                            this.adsManager.pause();
                        }
                    }
                }, {
                    key: "resizeAds",
                    value: function resizeAds() {
                        var adViewmode = this.videoContainerTemp.userAction.isFullscreen ? "FULLSCREEN" : "NORMAL";

                        if (this.videoContainerTemp.userAction.isFloating) {
                            var wAdsPlayer = !utlis_mobileDetect() ? this.initConfig.vid.template.appearance.floatingSetting.width >= 256 ? this.initConfig.vid.template.appearance.floatingSetting.width : 256 : this.initConfig.vid.template.mobileConfig.width >= 256 ? this.initConfig.vid.template.mobileConfig.width : 256;
                            var hAdsPlayer = wAdsPlayer * 0.5625; // 16:9

                            if (this.adsManager) this.adsManager.resize(wAdsPlayer, hAdsPlayer, adViewmode);
                        } else {
                            var _wAdsPlayer = this.videoContainerTemp.getWidth() ? this.videoContainerTemp.getWidth() : 640;

                            var _hAdsPlayer = _wAdsPlayer * 0.5625; // 16:9


                            if (this.adsManager) this.adsManager.resize(_wAdsPlayer, _hAdsPlayer, adViewmode);
                        }
                    }
                }, {
                    key: "initAdRefreshTimer",
                    value: function initAdRefreshTimer() {
                        var _this4 = this;

                        var isReset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

                        if (isReset) {
                            if (this.timerRefreshAds) this.timerRefreshAds.pause();
                            this.timerRefreshAds = null;
                        }

                        if (this.timerRefreshAds) return;

                        if (this.bidConfig.type == "default") {
                            this.processRequestBid();
                        } else {
                            if (this.bidConfig.curAds == this.bidConfig.maxAds || this.bidConfig.curRequest >= this.bidConfig.maxRequest) {
                                this.logMess("Init AdsRefreshTimer for adSlot ".concat(this.adSlot, " call after ").concat(this.bidConfig.delay / 1000, "s"));
                                this.timerRefreshAds = new TimerDelay(function () {
                                    _this4.logMess("AdRefresh timeout on adSlot ".concat(_this4.adSlot, " at time is ").concat(Math.floor(Date.now() / 1000), " => Start new Auction."));

                                    _this4.timerRefreshAds.pause();

                                    _this4.timerRefreshAds = null;

                                    _this4.resetBidConfig(true);

                                    _this4.processRequestBid();
                                }, this.bidConfig.delay); // Pause Timer vì video chưa load đc => loaded => start timer

                                if (this.videoContainerTemp.userAction.isVideoLoaded) {
                                    this.timerRefreshAds.start();
                                }
                            } else {
                                // Chua full request -> request lai
                                this.processRequestBid();
                            }
                        }
                    } // Ads Render Handle

                }, {
                    key: "addRenderAdsCss",
                    value: function addRenderAdsCss() {
                        if (!this.adsPlaceholder) return;
                        this.adsPlaceholder.style.cssText = "z-index: 999999!important; position: absolute!important; width: 100%!important; height: 100%!important; top: 0!important; left: 0!important; display:block!important;padding:0!important;margin:0!important";
                        this.videoContainerTemp.offRelatedVideo();
                    }
                }, {
                    key: "removeRenderAds",
                    value: function removeRenderAds() {
                        if (!this.adsPlaceholder) return;
                        this.adsPlaceholder.innerHTML = "";
                        this.adsPlaceholder.style.cssText = "";
                        this.videoContainerTemp.onRelatedVideo();
                    } // Video Background Controller

                }, {
                    key: "playVideoBG",
                    value: function playVideoBG() {
                        if (this.videoContainerTemp && !this.adsManager) this.videoContainerTemp.play();
                    }
                }, {
                    key: "pauseVideoBG",
                    value: function pauseVideoBG() {
                        if (this.videoContainerTemp) this.videoContainerTemp.pause();
                    } // Other

                }, {
                    key: "getPlacementByAdSlot",
                    value: function getPlacementByAdSlot(adSlot) {
                        if (!adSlot) return;
                        var placement = null;
                        var availableSlots = document.getElementsByClassName(Configs.adClass);
                        if (availableSlots.length === 0) return;

                        for (var i = 0; i < availableSlots.length; i++) {
                            var slotElem = availableSlots[i];
                            if (slotElem.dataset.adSlot !== adSlot) continue;
                            if (slotElem.hasChildNodes()) continue;
                            placement = slotElem; // if (placement.id === "") placement.id = adSlot;

                            break;
                        }

                        return placement;
                    }
                }, {
                    key: "logMess",
                    value: function logMess(mess) {
                        if (typeof_default()(mess) === "object") {
                            vilog("".concat(JSON.stringify(mess)), "Instream");
                        } else {
                            vilog("".concat(mess), "Instream");
                        }
                    }
                }]);

                return Instream;
            }();


// CONCATENATED MODULE: ./src/plugins/OutStream.js












            var OutStream_CONSTANTS = __webpack_require__(5);

            var OutStream_adSlots = [];

            var OutStream_OutStream = /*#__PURE__*/function () {
                function OutStream(adSlotObj) {
                    classCallCheck_default()(this, OutStream);

                    if (!adSlotObj) throw new Error('adSlot is null'); /// Setup All Config
                    /// Ads

                    var outstreamSlot = Configs.adsTags.outstreamSlot;

                    if (!outstreamSlot || !outstreamSlot[adSlotObj]) {
                        this.logMess("Outstream['".concat(adSlotObj, "'] config is Empty..."));
                        return;
                    }

                    var adWrapper = null;
                    var adElements = document.getElementsByClassName(Configs.adClass);

                    for (var j = 0; j < adElements.length; j++) {
                        var element = adElements[j];

                        if (element && element.getAttribute("data-ad-slot") == adSlotObj) {
                            adWrapper = element;
                            break;
                        }
                    }

                    if (adWrapper && !isCheckElementVisible(adWrapper)) {
                        this.logMess("Outstream ['".concat(adSlotObj, "'] not visible..."));
                        return;
                    }

                    this.initConfig = JSON.parse(JSON.stringify(outstreamSlot[adSlotObj]));
                    this.initConfig.floorPrice = isNaN(parseFloat(this.initConfig.floorPrice)) ? 0 : parseFloat(this.initConfig.floorPrice); // this.initConfig.dynamicFloor = isNaN(parseFloat(this.initConfig.dynamicFloor)) ? 0 : parseFloat(this.initConfig.dynamicFloor);

                    this.curFloorObj = null; // Current floor price obj after requestbid | price, type

                    this.initConfig.inViewPort = false; // Ads true => inViewPort, false => outViewPort
                    // Fix content for create video container

                    this.initConfig.vid.contents = [{
                        "des": "xxx",
                        "id": "15",
                        "is_default": "0",
                        "link": "https://ul.pubpowerplatform.io/assets/video/cff969ceadcd6be33894fc231940ef83.m3u8",
                        "thumb": "https://ul.pubpowerplatform.io/assets/img/thumb_cff969ceadcd6be33894fc231940ef83.png",
                        "title": "xxx",
                        "user_id": "8",
                        "video_url": {
                            "m3u8": "https://ul.pubpowerplatform.io/assets/video/cff969ceadcd6be33894fc231940ef83.m3u8"
                        }
                    }]; // Passback

                    this.initConfig.pass_back = this.initConfig.pass_back ? this.initConfig.pass_back : ""; // Placement Adslot
                    // HNL

                    this.slotId = adSlotObj;
                    this.initConfig.isFirstOutView = true;
                    this.initConfig.isPlacementAdSlot = true; // default have html elemnt placementAdsSlot: true => have <pubtag></pubtag> | false => not have

                    this.placementAdsSlot = this.getPlacementByAdSlot(adSlotObj); // include all content (Video + Ads)

                    if (OutStream_adSlots[this.slotId]) {
                        OutStream_adSlots[this.slotId] += 1;
                    } else {
                        OutStream_adSlots[this.slotId] = 1;
                    }

                    this.adSlot = this.slotId + "_outstream_" + OutStream_adSlots[this.slotId];
                    Configs.videoAdClass[this.adSlot] = this;

                    if (this.placementAdsSlot) {
                        this.placementAdsSlot.id = this.adSlot;
                        this.placementAdsSlot.dataset.id = this.adSlot;
                    }

                    try {
                        var floatSetting = !utlis_mobileDetect() ? this.initConfig.vid.template.appearance.floatingSetting : this.initConfig.vid.template.mobileConfig;

                        if (!this.placementAdsSlot && floatSetting != null && floatSetting != "") {
                            this.logMess('Placement is null => show ads only if setup floating.');
                            this.initConfig.isPlacementAdSlot = false;
                            var pubTag = document.createElement("pubtag");
                            pubTag.id = this.adSlot;
                            pubTag.className = Configs.adClass;
                            pubTag.setAttribute("data-ad-slot", adSlotObj);
                            document.body.insertAdjacentElement("beforeend", pubTag);
                            this.placementAdsSlot = pubTag;
                        }
                    } catch (e) {
                        this.logMess("Error: ".concat(e));
                    }

                    this.init();
                }

                createClass_default()(OutStream, [{
                    key: "increaseDistanceBottomFloating",
                    value: function increaseDistanceBottomFloating(data) {
                        try {
                            this.logMess("Increase distance Bottom for slot ".concat(this.adSlot));

                            if (!this.videoContainerTemp || !data) {
                                return;
                            }

                            if (this.videoContainerTemp.marginBottomDistance > data.heightBid) {
                                return;
                            }

                            var offset = utlis_mobileDetect() ? 40 : 10;
                            this.videoContainerTemp.marginBottomDistance = data.heightBid + offset;
                            this.videoContainerTemp.powerVideoWrapper.style.bottom = "".concat(data.heightBid + offset, "px");
                            this.videoContainerTemp.updateStyleFloating();
                        } catch (error) {}
                    }
                }, {
                    key: "reductionDistanceBottomFloating",
                    value: function reductionDistanceBottomFloating() {
                        try {
                            this.logMess("Reduction distance Bottom for slot ".concat(this.adSlot));

                            if (!this.videoContainerTemp) {
                                return;
                            }

                            this.videoContainerTemp.setDefaultDistanceBottomFloating();
                        } catch (error) {}
                    }
                }, {
                    key: "init",
                    value: function init() {
                        /// View Container
                        this.videoContainerTemp = this.initVideoContainer();

                        if (!this.videoContainerTemp) {
                            this.logMess('Video templete is null.');
                            return;
                        }

                        ;
                        this.adsPlaceholder = this.videoContainerTemp ? this.videoContainerTemp.getAdsPlaceholder() : this.placementAdsSlot;
                        this.powerVideoContainer = this.videoContainerTemp.getPowerVideoContainer();
                        this.powerVideoContainer = this.powerVideoContainer ? this.powerVideoContainer : this.placementAdsSlot;
                        this.videoContainerTemp.hideVideoContainer();
                        this.videoContainerTemp.hideLoading();

                        if (!this.initConfig.isPlacementAdSlot && !this.videoContainerTemp.videoSetting.floatingSetting) {
                            this.logMess("AdSlot dont have placementAdSlot and not setup floating => stop init.");
                            return;
                        }

                        createInfoDebugOverlay(this.adSlot, false, true); // Ads Controller

                        this.bidManager = null;
                        this.adsManager = null;
                        this.bidResponseDFP = null; // All View Check

                        this.placementViewPort = null;
                        this.adsViewPortDetect = null;
                        var adConfig = this.videoContainerTemp.videoSetting.adConfig;
                        this.bidConfig = {
                            curAds: 0,
                            // ads showed
                            maxAds: 1,
                            // total ads
                            curRequest: 0,
                            maxRequest: adConfig.vastRetry,
                            delay: adConfig.delay
                        };
                        this.timerRefreshAds = null;
                        this.initBidManager();
                    }
                }, {
                    key: "processHeavyAds",
                    value: function processHeavyAds() {
                        this.logMess("Process Heavy Ads with adsSlot: " + this.adSlot); // remove and init new content html

                        if (this.placementAdsSlot) {
                            this.placementAdsSlot.innerHTML = "";
                            this.placementAdsSlot.style.cssText = "";
                        }

                        this.videoContainerTemp = null;
                        this.adsPlaceholder = null; // Clear View Port

                        if (this.placementViewPort) {
                            this.placementViewPort.clear();
                            this.placementViewPort = null;
                        }

                        if (this.adsViewPortDetect) {
                            this.adsViewPortDetect.clear();
                            this.adsViewPortDetect = null;
                        } // remove timer


                        if (this.timerRefreshAds) {
                            this.timerRefreshAds.pause();
                            this.timerRefreshAds = null;
                        }

                        this.init();
                    } // Init View + Bids Manager

                }, {
                    key: "initVideoContainer",
                    value: function initVideoContainer() {
                        if (!this.placementAdsSlot || !this.initConfig || !this.initConfig.vid || !this.initConfig.vid.contents || !this.initConfig.vid.template) return;
                        var videoContainerTemp = new VideoContainerTemplate_VideoContainerTemplate({
                            placementAdSlot: this.placementAdsSlot,
                            config: this.initConfig.vid
                        });
                        return videoContainerTemp;
                    }
                }, {
                    key: "initBidManager",
                    value: function initBidManager() {
                        var _this = this;

                        this.logMess("Init BidManger");
                        var playerSize = this.videoContainerTemp.getFullSizeWrapper();

                        if (!playerSize) {
                            this.logMess("Player Size is Empty");
                            return;
                        }

                        if (!this.initConfig.isPlacementAdSlot) {
                            playerSize = [this.initConfig.w, this.initConfig.h];
                        }

                        var adUnitList = []; // Bid Outstream

                        var adunit = this.initConfig.adunit;
                        adunit.code = this.adSlot;
                        adunit.bids = adunit.bids ? adunit.bids : [];
                        if (!adunit.mediaTypes) adunit.mediaTypes = mediaTypesAdFormatVideo('outstream', playerSize);
                        adunit.renderer = adunit.renderer || {
                            url: '',
                            render: function render() {}
                        };
                        adUnitList.push(adunit); // Check Ad In Out Of View
                        // HNL

                        if (this.initConfig.isPlacementAdSlot) {
                            this.placementViewPort = newViewPortDetect(this.powerVideoContainer, {
                                threshold: [51]
                            }, false);
                            this.placementViewPort.inViewPort(function () {
                                // this.logMess(`placementAdsSlot ${this.adSlot} - inViewPort.`);
                                _this.initConfig.inViewPort = true;

                                if (_this.adsManager && _this.videoContainerTemp.userAction.isVisible) {
                                    _this.videoContainerTemp.deActiveFloating();

                                    _this.resizeAds();
                                }

                                if (_this.bidManager.bidResponses.length > 0) {
                                    _this.processBids();
                                }
                            });
                            this.placementViewPort.outViewPort(function () {
                                // this.logMess(`placementAdsSlot ${this.adSlot} - outViewPort.`);
                                _this.initConfig.inViewPort = false;

                                if (_this.adsManager && _this.videoContainerTemp.userAction.isVisible) {
                                    _this.videoContainerTemp.activeFloating();

                                    _this.resizeAds();
                                }
                            });
                        } // Use Process Video Ads


                        this.adsViewPortDetect = newViewPortDetect(this.adsPlaceholder, {
                            threshold: [51]
                        }, false);
                        this.adsViewPortDetect.inViewPort(function () {
                            // this.logMess(`adsPlaceholder ${this.adSlot} - inViewPort.`);
                            _this.procesAdsInView();
                        });
                        this.adsViewPortDetect.outViewPort(function () {
                            // this.logMess(`adsPlaceholder ${this.adSlot} - outViewPort.`);
                            _this.procesAdsOutView(); // Fix issue when is firt time out view


                            if (!_this.initConfig.isPlacementAdSlot) {
                                if (_this.initConfig.isFirstOutView) {
                                    _this.initConfig.isFirstOutView = false;
                                    _this.initConfig.inViewPort = true;
                                    return;
                                }
                            }
                        });
                        this.adsViewPortDetect.inTab(function () {
                            // this.logMess(`adsPlaceholder ${this.adSlot} - inTab.`);
                            // Process ads when no tag Outstream - HNL
                            if (!_this.initConfig.isPlacementAdSlot) {
                                _this.initConfig.inViewPort = true;
                                if (!_this.videoContainerTemp.userAction.userClickCloseBtn && _this.bidManager.bidResponses.length > 0) _this.processBids();
                            }

                            if (_this.adsManager && _this.initConfig.inViewPort) _this.adsManager.resume();
                            if (_this.timerRefreshAds) _this.timerRefreshAds.resume();
                        });
                        this.adsViewPortDetect.outTab(function () {
                            // this.logMess(`adsPlaceholder ${this.adSlot} - outTab.`);
                            // HNL
                            if (!_this.initConfig.isPlacementAdSlot) _this.initConfig.inViewPort = false;
                            if (_this.adsManager) _this.adsManager.pause();
                            if (_this.timerRefreshAds) _this.timerRefreshAds.pause();
                        });

                        var _getFloorTest = getFloorTest(this.initConfig.floorTest, adunit.code),
                            _getFloorTest2 = slicedToArray_default()(_getFloorTest, 2),
                            floorTest = _getFloorTest2[0],
                            testCaseId = _getFloorTest2[1]; // Create BidManger


                        this.bidManager = new helper_BidManager({
                            slotId: this.adSlot,
                            tagId: this.initConfig.zid,
                            floorPrice: this.initConfig.floorPrice,
                            dynamicFloor: getDynamicFloor(this.initConfig.dynamicFloor, adunit.code),
                            abTestFloorId: this.initConfig.abTestId,
                            floorTest: floorTest,
                            testTime: this.initConfig.timeTest,
                            testCaseId: testCaseId,
                            adUnits: adUnitList,
                            adWidth: this.initConfig.w,
                            adHeight: this.initConfig.h,
                            tagWidth: this.initConfig.w,
                            tagHeight: this.initConfig.h,
                            viewPortDetect: this.adsViewPortDetect
                        }); // Process with heavy ads:

                        _addEventListener("OUTSTREAM_HEAVY_ADS", function (event) {
                            return _this.processHeavyAds();
                        }); // Btn Close Floating Event
                        // HNL


                        this.videoContainerTemp.setVideoController(function (event) {
                            // this.logMess(`VideoContainer ${this.adSlot} - event: ${event}`);
                            if (event == 'floatingClose') {
                                // Trigger for activeFLoating run after close
                                _this.videoContainerTemp.userAction.userClickCloseBtn = false;

                                _this.videoContainerTemp.activeFloating();

                                _this.videoContainerTemp.userAction.userClickCloseBtn = true; // Pause + clear Ads

                                if (_this.adsManager) _this.adsManager.pause();

                                _this.clearAds(true);

                                cleanInfoDebugOverlay(_this.adSlot); // Clear Timer Refresh Ads

                                if (_this.timerRefreshAds) {
                                    _this.timerRefreshAds.pause();

                                    _this.timerRefreshAds = null;
                                } // Clear Event Direct View


                                if (_this.placementViewPort) {
                                    _this.placementViewPort.clear();

                                    _this.placementViewPort = null;
                                }

                                if (_this.adsViewPortDetect) {
                                    _this.adsViewPortDetect.clear();

                                    _this.adsViewPortDetect = null;
                                }
                            }
                        });
                        this.processRequestBid();
                    } // Process + Request Bid + DFP + Render Ads

                }, {
                    key: "resetBidConfig",
                    value: function resetBidConfig() {
                        this.bidConfig.curAds = 0;
                        this.bidConfig.curRequest = 0;
                    }
                }, {
                    key: "processRequestBid",
                    value: function processRequestBid() {
                        this.bidConfig.curRequest++;

                        if (this.bidConfig.curRequest > this.bidConfig.maxRequest) {
                            this.logMess("AdSlot " + this.adSlot + " request bid " + this.bidConfig.maxRequest + " times is maximum.");
                            return;
                        }

                        this.startNewAuction();
                    }
                }, {
                    key: "startNewAuction",
                    value: function startNewAuction() {
                        var _this2 = this;

                        this.logMess("Start New Auction: " + this.adSlot + " - " + this.bidConfig.curRequest + " times.");
                        this.bidManager.requestBids(function (auctionIsEmptyBid, curFloorObj) {
                            _this2.curFloorObj = curFloorObj;
                            var isRequestDFP = !Configs.gbk && _this2.initConfig.dfpAdUnit ? true : false;

                            if (auctionIsEmptyBid && !isRequestDFP) {
                                _this2.logMess("Bid Response is Empty and Not request to DFP...");

                                _this2.initAdRefreshTimer(true);

                                return;
                            } // HNL


                            if (_this2.initConfig.inViewPort) {
                                _this2.processBids();
                            }
                        });
                    }
                }, {
                    key: "processBids",
                    value: function processBids() {
                        var dfpAdUnitObj = !Configs.gbk && this.initConfig.dfpAdUnit ? processDfpAdUnit(this.initConfig.dfpAdUnit) : null;

                        if (dfpAdUnitObj) {
                            // Request to DFP with highest bid in all bid responses
                            this.logMess("Request Bid to DFP on adSlot: " + this.adSlot);
                            this.bidResponseDFP = this.bidManager.getHighestBid(); // Process currency

                            var _ref = this.bidResponseDFP ? processRealCpm(this.bidResponseDFP.cpm, dfpAdUnitObj) : processRealCpm(this.curFloorObj.price, dfpAdUnitObj),
                                _ref2 = slicedToArray_default()(_ref, 2),
                                realCPM = _ref2[0],
                                granularityMultiplier = _ref2[1];

                            var dfpAdUnit = dfpAdUnitObj.dfpAdUnit ? dfpAdUnitObj.dfpAdUnit : ""; //

                            var TARGET_KEYS = OutStream_CONSTANTS.TARGET_KEYS;
                            var customParams = {};
                            customParams["pw_ref"] = Configs.refererDomainID ? Configs.refererDomainID + "_" + Configs.domainID : null;
                            customParams[TARGET_KEYS.ACCOUNT] = this.initConfig.targetGoogleAccount ? this.initConfig.targetGoogleAccount : "";
                            customParams[TARGET_KEYS.PW_NETWORK] = true;
                            customParams[TARGET_KEYS.PW_LINE_ID] = this.initConfig.targetLineId ? this.initConfig.targetLineId : "";
                            var targetAdSlot = this.initConfig.targetAdSlot || "";
                            var targetAdSlotVal = this.curFloorObj.type != null ? "".concat(targetAdSlot, "_").concat(this.curFloorObj.abTestId, "_").concat(this.curFloorObj.type) : targetAdSlot;
                            customParams[TARGET_KEYS.TARGET_ADSLOT] = targetAdSlotVal;
                            var dfpConfig = {
                                adUnit: dfpAdUnit,
                                targetAccountId: this.initConfig.targetGoogleAccount || "",
                                targetAdSlot: targetAdSlot,
                                customParams: customParams
                            }; // 

                            if (this.bidResponseDFP) {
                                var ggBidAdj = this.initConfig.googleBidAdjustment ? parseFloat(this.initConfig.googleBidAdjustment) : 1;

                                if (Configs.listAmazonBidder.includes(this.bidResponseDFP.bidder)) {
                                    this.bidResponseDFP.adserverTargeting[TARGET_KEYS.PRICE_AMZ_VIDEO] = getCustomAPDPB(this.bidResponseDFP.mediaType, this.bidResponseDFP.adserverTargeting[TARGET_KEYS.PRICE_AMZ_VIDEO], granularityMultiplier, ggBidAdj);
                                } else {
                                    this.bidResponseDFP.adserverTargeting[TARGET_KEYS.PRICE_BUCKET] = getCustomAPDPB(this.bidResponseDFP.mediaType, realCPM, granularityMultiplier, ggBidAdj);
                                    dfpConfig.customParams[TARGET_KEYS.PRICE_BUCKET] = this.bidResponseDFP.adserverTargeting[TARGET_KEYS.PRICE_BUCKET];
                                }
                            } else {
                                if (realCPM > 0) {
                                    dfpConfig.customParams[TARGET_KEYS.PRICE_BUCKET] = getCustomAPDPB("video", realCPM, granularityMultiplier, 1);
                                }
                            }

                            this.playVast(dfpConfig);
                        } else {
                            this.playVast();
                        }
                    }
                }, {
                    key: "playVast",
                    value: function playVast() {
                        var _this3 = this;

                        var dfpConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
                        if (!dfpConfig) this.logMess("BidManager Get Highest Bid for adSlot: " + this.adSlot);
                        var bidWon = dfpConfig ? this.bidResponseDFP : this.bidManager.getHighestBid();

                        if (!bidWon && !dfpConfig) {
                            this.logMess("Bids is Empty for adSlot: " + this.adSlot);
                            this.initAdRefreshTimer(true);
                            return;
                        }

                        var adUnitCode = bidWon ? bidWon.adUnitCode : this.adSlot;
                        var wAdsPlayer = this.initConfig.vid.template.appearance.maxWidth;
                        var hAdsPlayer = wAdsPlayer * 0.5625; // 16:9

                        var adsPlayer = new helper_AdPlayer({
                            baseDomain: Configs.rootDomain,
                            brandLogo: Configs.brandLogoBlack,
                            pixelManager: this.bidManager.pixelManager,
                            adElement: this.adsPlaceholder,
                            adSlotId: this.adSlot,
                            adWidth: wAdsPlayer,
                            adHeight: hAdsPlayer,
                            skipRequired: false,
                            showVolumeControl: true,
                            defaultVolume: this.videoContainerTemp.userAction.isMuted ? 0 : 1,
                            showProgressBar: false
                        }); // Callback Dedug Overlay

                        adsPlayer.setCallBacks({
                            started: function started() {
                                if (_this3.bidResponseDFP) {
                                    // => DFP win
                                    var dataBid = {
                                        adId: bidWon ? bidWon.adId : "unknown from Adx",
                                        bidder: bidWon ? bidWon.bidder : "Adx",
                                        creativeId: bidWon ? bidWon.creativeId : "unknown from Adx"
                                    };
                                    pushInfoDebugOverlay(_this3.adSlot, dataBid);
                                    _this3.bidResponseDFP = null;
                                } else {
                                    pushInfoDebugOverlay(_this3.adSlot, bidWon);
                                } // Create Report Observer for Heavy Ads


                                var iframeAd = _this3.adsPlaceholder.getElementsByTagName("iframe")[0];

                                var jData = {
                                    "creativeId": bidWon && bidWon.creativeId ? bidWon.creativeId : null,
                                    "adFormat": "Outstream"
                                };
                                if (iframeAd) reportingObserver(iframeAd, jData);
                            }
                        }); // Callback Play Ads

                        adsPlayer.setCallBacks({
                            started: function started(adEvent) {
                                _this3.logMess("Vast Event Started on adSlot: " + adUnitCode);

                                _this3.addRenderAdsCss();

                                _this3.videoContainerTemp.showVideoContainer(_this3.initConfig.isPlacementAdSlot); // HNL


                                if (_this3.initConfig.isPlacementAdSlot) {
                                    if (_this3.initConfig.inViewPort) _this3.procesAdsInView();else _this3.procesAdsOutView();
                                } else {
                                    _this3.adsManager.pause();

                                    _this3.videoContainerTemp.activeFloating();

                                    _this3.resizeAds(); // this.videoContainerTemp.showAnimOutstream();


                                    setTimeout(function () {
                                        if (_this3.initConfig.inViewPort) _this3.adsManager.resume();else _this3.adsManager.pause();
                                    }, 1550);
                                } // Play Ads Succ => reset bidResponses


                                _this3.bidManager.bidResponses = [];
                                _this3.bidConfig.curAds++;
                            },
                            impression: function impression() {
                                _this3.logMess("Vast Event Impression on adSlot: " + adUnitCode);
                            },
                            complete: function complete() {
                                _this3.logMess("Vast Event Complete on adSlot: " + adUnitCode);

                                _this3.clearAds(true);

                                _this3.initAdRefreshTimer();
                            },
                            hidden: function hidden() {
                                _this3.logMess("Vast Event Hidden on adSlot: " + adUnitCode);

                                _this3.clearAds(true);

                                _this3.initAdRefreshTimer();

                                cleanInfoDebugOverlay(_this3.adSlot);
                            },
                            paused: function paused() {
                                _this3.logMess("Vast Event Paused on adSlot: " + adUnitCode);
                            },
                            resumed: function resumed() {
                                _this3.logMess("Vast Event Resume on adSlot: " + adUnitCode);
                            },
                            error: function error(_error) {
                                // Bid request to DFP error -> add and recheck to show all bid response
                                if (_this3.bidResponseDFP) {
                                    _this3.logMess("Request Bid to DFP on adSlot: " + adUnitCode + " with Error: " + _error);

                                    _this3.bidManager.addBidToArray(_this3.bidResponseDFP);

                                    _this3.bidResponseDFP = null;
                                } else {
                                    _this3.logMess("Vast Event Error code: " + _error + " on adSlot: " + adUnitCode);
                                }

                                if (_this3.bidManager.bidResponses.length <= 0) {
                                    _this3.clearAds(false);
                                }

                                _this3.playVast();
                            },
                            adsVolumeChange: function adsVolumeChange(volume) {
                                // 0 -> mute | 1 -> unmute
                                _this3.videoContainerTemp.toggleMute(volume == 0 ? true : false);
                            }
                        });
                        this.adsManager = adsPlayer.play({
                            bidWon: bidWon,
                            dfp: dfpConfig
                        });
                    }
                }, {
                    key: "clearAds",
                    value: function clearAds(isRunAnim) {
                        this.removeOldPassback();
                        this.videoContainerTemp.hideAdOutstream(); // if (isRunAnim) {
                        // Run Animation pubpowerHide time 1.5s
                        // HNL
                        // setTimeout(() => {

                        this.videoContainerTemp.deActiveFloating();
                        this.videoContainerTemp.hideVideoContainer();
                        this.removeRenderAds();
                        this.adsManager = null; // }, 1000);
                        // } else {
                        //     this.videoContainerTemp.deActiveFloating();
                        //     this.videoContainerTemp.hideVideoContainer();
                        //     this.removeRenderAds();
                        //     this.adsManager = null;
                        // }
                    }
                }, {
                    key: "procesAdsInView",
                    value: function procesAdsInView() {
                        if (!this.adsManager) return;
                        this.resizeAds();
                        this.adsManager.resume();
                    }
                }, {
                    key: "procesAdsOutView",
                    value: function procesAdsOutView() {
                        if (!this.adsManager) return;
                        this.resizeAds();
                        this.adsManager.pause();
                    }
                }, {
                    key: "resizeAds",
                    value: function resizeAds() {
                        var adViewmode = this.videoContainerTemp.userAction.isFullscreen ? "FULLSCREEN" : "NORMAL";

                        if (this.videoContainerTemp.userAction.isFloating) {
                            var wAdsPlayer = !utlis_mobileDetect() ? this.initConfig.vid.template.appearance.floatingSetting.width >= 256 ? this.initConfig.vid.template.appearance.floatingSetting.width : 256 : this.initConfig.vid.template.mobileConfig.width >= 256 ? this.initConfig.vid.template.mobileConfig.width : 256;
                            var hAdsPlayer = wAdsPlayer * 0.5625; // 16:9

                            if (this.adsManager) this.adsManager.resize(wAdsPlayer, hAdsPlayer, adViewmode);
                        } else {
                            var _wAdsPlayer = this.videoContainerTemp.getWidth();

                            var _hAdsPlayer = _wAdsPlayer * 0.5625; // 16:9


                            if (this.adsManager) this.adsManager.resize(_wAdsPlayer, _hAdsPlayer, adViewmode);
                        }
                    }
                }, {
                    key: "initAdRefreshTimer",
                    value: function initAdRefreshTimer() {
                        var _this4 = this;

                        var isBidEmpty = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                        if (this.timerRefreshAds) return;

                        if (this.bidConfig.curAds == this.bidConfig.maxAds || this.bidConfig.curRequest >= this.bidConfig.maxRequest) {
                            if (!isBidEmpty) {
                                this.logMess("Init AdsRefreshTimer for adSlot ".concat(this.adSlot, " call after ").concat(this.bidConfig.delay / 1000, "s"));
                                this.timerRefreshAds = new TimerDelay(function () {
                                    _this4.logMess("AdRefresh timeout on adSlot ".concat(_this4.adSlot, " at time is ").concat(Math.floor(Date.now() / 1000), " => Start new Auction."));

                                    _this4.timerRefreshAds.pause();

                                    _this4.timerRefreshAds = null;

                                    _this4.resetBidConfig();

                                    _this4.processRequestBid();
                                }, this.bidConfig.delay);
                                this.timerRefreshAds.start();
                            } else {
                                this.logMess("AdSlot ".concat(this.adSlot, " max request and BidEmpty => show Passback")); // HNL

                                if (this.initConfig.isPlacementAdSlot) this.renderPassback();
                            }
                        } else {
                            // Chua full request -> request lai
                            this.processRequestBid();
                        }
                    } // Ads Render Handle

                }, {
                    key: "addRenderAdsCss",
                    value: function addRenderAdsCss() {
                        if (!this.adsPlaceholder) return;
                        this.adsPlaceholder.style.cssText = "z-index: 999999!important; position: absolute!important; width: 100%!important; height: 100%!important; top: 0!important; left: 0!important; background: #000!important; display:block!important;padding:0!important;margin:0!important";
                        this.videoContainerTemp.offRelatedVideo();
                    }
                }, {
                    key: "removeRenderAds",
                    value: function removeRenderAds() {
                        this.adsPlaceholder.innerHTML = "";
                        this.adsPlaceholder.style.cssText = "";
                        this.videoContainerTemp.onRelatedVideo();
                    } // Other

                }, {
                    key: "removeOldPassback",
                    value: function removeOldPassback() {
                        var divPassback = document.getElementById("passback_" + this.adSlot);

                        if (divPassback) {
                            var divBanner = divPassback.querySelector("div");

                            if (divBanner) {
                                var adSlotID = divBanner.getAttribute("data-id");
                                plugins_BannerManager.removeAdSlotForPassbackOutstream(adSlotID);
                            }

                            divPassback.remove();
                        }
                    }
                }, {
                    key: "renderPassback",
                    value: function renderPassback() {
                        // this.logMess(`Render ${this.initConfig.type} passback for adSlot: ${this.adSlot}`);
                        // Render Passback
                        // HNL
                        var passback = this.initConfig.pass_back;
                        if (typeof passback !== "string" || passback == "") return;
                        this.removeOldPassback();
                        this.videoContainerTemp.hideVideoContainer();

                        if (this.initConfig.type == "inline") {
                            // init passback with banner tag
                            //Create div banner tag
                            var divPassback = document.createElement("div");
                            divPassback.id = "passback_" + this.adSlot;
                            divPassback.style.position = "absolute";
                            var divBanner = document.createElement("div");
                            divBanner.className = "adsbyvli";
                            divBanner.dataset.adSlot = passback;
                            divPassback.appendChild(divBanner);
                            this.placementAdsSlot.appendChild(divPassback);
                            displayBanner(passback);
                        } else {
                            // Custom Passback
                            var _divPassback = document.createElement("div");

                            _divPassback.id = "passback_" + this.adSlot;
                            _divPassback.style.cssText = "position: absolute; margin: 0 auto;";
                            this.placementAdsSlot.insertAdjacentElement("beforeend", _divPassback);
                            this.renderPassbackInIframe(_divPassback, this.adSlot, null, null, passback);
                        }
                    }
                }, {
                    key: "renderPassbackInIframe",
                    value: function renderPassbackInIframe(adElement, adSlotId, adWidth, adHeight, passbackScript) {
                        try {
                            var iframeDoc = renderIframeForSmartBanner(adElement, adSlotId, adWidth, adHeight);
                            iframeDoc.open();
                            iframeDoc.write(passbackScript);
                            iframeDoc.close();
                            var iframePassback = document.getElementById('ifr_' + adSlotId);
                            iframePassback.width = iframeDoc.body.offsetWidth;
                            iframePassback.height = iframeDoc.body.offsetHeight;
                        } catch (e) {
                            this.logMess(e);
                        }
                    }
                }, {
                    key: "getPlacementByAdSlot",
                    value: function getPlacementByAdSlot(adSlot) {
                        if (!adSlot) return;
                        var placement = null;
                        var availableSlots = document.getElementsByClassName(Configs.adClass);
                        if (availableSlots.length === 0) return;

                        for (var i = 0; i < availableSlots.length; i++) {
                            var slotElem = availableSlots[i];
                            if (slotElem.dataset.adSlot !== adSlot) continue;
                            if (slotElem.hasChildNodes()) continue;
                            placement = slotElem; // if (placement.id === "") placement.id = adSlot;

                            break;
                        }

                        return placement;
                    }
                }, {
                    key: "logMess",
                    value: function logMess(mess) {
                        if (typeof_default()(mess) === "object") {
                            vilog("".concat(JSON.stringify(mess)), "Outstream");
                        } else {
                            vilog("".concat(mess), "Outstream");
                        }
                    }
                }]);

                return OutStream;
            }();


// CONCATENATED MODULE: ./src/plugins/TopArticles.js










            var TopArticles_CONSTANTS = __webpack_require__(5);

            var TopArticles_adSlots = [];

            var TopArticles_TopArticles = /*#__PURE__*/function () {
                function TopArticles(adSlotObj) {
                    classCallCheck_default()(this, TopArticles);

                    if (!adSlotObj) throw new Error('adSlot is null'); /// Setup All Config
                    /// Ads

                    var topArticle = Configs.adsTags.topArticle;

                    if (!topArticle || !topArticle[adSlotObj]) {
                        this.logMess("TopArticles['".concat(adSlotObj, "'] config is Empty..."));
                        return;
                    }

                    var adWrapper = null;
                    var adElements = document.getElementsByClassName(Configs.adClass);

                    for (var j = 0; j < adElements.length; j++) {
                        var element = adElements[j];

                        if (element && element.getAttribute("data-ad-slot") == adSlotObj) {
                            adWrapper = element;
                            break;
                        }
                    }

                    if (adWrapper && !isCheckElementVisible(adWrapper)) {
                        this.logMess("TopArticles ['".concat(adSlotObj, "'] not visible..."));
                        return;
                    }

                    this.slotId = adSlotObj;
                    this.initConfig = JSON.parse(JSON.stringify(topArticle[adSlotObj]));
                    this.initConfig.floorPrice = isNaN(parseFloat(this.initConfig.floorPrice)) ? 0 : parseFloat(this.initConfig.floorPrice); // this.initConfig.dynamicFloor = isNaN(parseFloat(this.initConfig.dynamicFloor)) ? 0 : parseFloat(this.initConfig.dynamicFloor);

                    this.curFloorObj = null; // Current floor price obj after requestbid | price, type

                    this.initConfig.inViewPort = true; // Ads true => inViewPort, false => outViewPort
                    // Get Data for TopArticles

                    this.getTopArticlesData();
                }

                createClass_default()(TopArticles, [{
                    key: "init",
                    value: function init() {
                        // Placement Adslot
                        this.placementAdsSlot = this.getPlacementByAdSlot(this.slotId); // include all content (Video + Ads)

                        if (!this.placementAdsSlot) {
                            this.logMess('Placement current dont available');
                            return;
                        }

                        if (TopArticles_adSlots[this.slotId]) {
                            TopArticles_adSlots[this.slotId] += 1;
                        } else {
                            TopArticles_adSlots[this.slotId] = 1;
                        }

                        this.adSlot = this.slotId + "_toparticles_" + TopArticles_adSlots[this.slotId];
                        this.placementAdsSlot.id = this.adSlot;
                        this.placementAdsSlot.dataset.id = this.adSlot; /// View Container

                        this.videoContainerTemp = this.initVideoContainer();

                        if (!this.videoContainerTemp) {
                            this.logMess('Video templete is null.');
                            return;
                        }

                        ;
                        this.adsPlaceholder = this.videoContainerTemp.getAdsPlaceholder();
                        this.powerVideoContainer = this.videoContainerTemp.getPowerVideoContainer();
                        createInfoDebugOverlay(this.adSlot, false, true); // Ads Controller

                        this.bidManager = null;
                        this.adsManager = null;
                        this.bidResponseDFP = null; // All View Check

                        this.placementViewPort = null;
                        this.adsViewPortDetect = null;
                        var adConfig = this.videoContainerTemp.videoSetting.adConfig;
                        this.bidConfig = {
                            curAds: 0,
                            // ads showed
                            maxAds: 1,
                            // total ads
                            curRequest: 0,
                            maxRequest: adConfig.vastRetry,
                            delay: adConfig.delay
                        };
                        this.timerRefreshAds = null;
                        this.videoContainerTemp.hideAdsWrapper();
                        this.initBidManager();
                    }
                }, {
                    key: "processHeavyAds",
                    value: function processHeavyAds() {
                        this.logMess("Process Heavy Ads with adsSlot: " + this.adSlot); // remove and init new content html

                        if (this.placementAdsSlot) {
                            this.placementAdsSlot.innerHTML = "";
                            this.placementAdsSlot.style.cssText = "";
                        }

                        this.videoContainerTemp = null;
                        this.adsPlaceholder = null; // Clear View Port

                        if (this.placementViewPort) {
                            this.placementViewPort.clear();
                            this.placementViewPort = null;
                        }

                        if (this.adsViewPortDetect) {
                            this.adsViewPortDetect.clear();
                            this.adsViewPortDetect = null;
                        } // remove timer


                        if (this.timerRefreshAds) {
                            this.timerRefreshAds.pause();
                            this.timerRefreshAds = null;
                        }

                        this.init();
                    } // Init View + Bids Manager

                }, {
                    key: "initVideoContainer",
                    value: function initVideoContainer() {
                        // Fix content for create video container
                        this.initConfig.vid.contents = this.initConfig.vid.contents || [{
                            "des": "xxx",
                            "id": "15",
                            "is_default": "0",
                            "link": "https://ul.pubpowerplatform.io/assets/video/cff969ceadcd6be33894fc231940ef83.m3u8",
                            "thumb": "https://ul.pubpowerplatform.io/assets/img/thumb_cff969ceadcd6be33894fc231940ef83.png",
                            "title": "xxx",
                            "user_id": "8",
                            "video_url": {
                                "m3u8": "https://ul.pubpowerplatform.io/assets/video/cff969ceadcd6be33894fc231940ef83.m3u8"
                            }
                        }];
                        this.initConfig.vid.template = this.initConfig.vid.template || {
                            "videoTempName": "Test Template TopArticles",
                            "adType": "Top Articles",
                            "appearance": {
                                "playerLayout": 8,
                                "playerSize": "responsive",
                                "maxWidth": 640,
                                "floatingSetting": {
                                    "closeFloatingBtn": true,
                                    "floatOnBottom": true,
                                    "floatingOnView": false,
                                    "width": 360,
                                    "position": 1,
                                    "margin-top-bot": 0,
                                    "margin-left-right": 0
                                },
                                "columnSetting": {
                                    "columnPosition": "",
                                    "columnNumber": 0
                                }
                            },
                            "mobileConfig": null,
                            "text": {
                                "mainTitle": "Top Stories",
                                "titleOn": true,
                                "descriptionOn": true
                            },
                            "color": {
                                "controls": "#ffc107",
                                "background": "gray",
                                "title": "#fff",
                                "description": "",
                                "theme": "#ffc107",
                                "title-background": "#ffc107"
                            },
                            "controls": null,
                            "logoBand": {
                                "endableLogo": true,
                                "poweredByApacdex": false,
                                "customLogo": {
                                    "link": "https://valueimpression.com/images/logo/valueImpression-white.svg",
                                    "clickThrough": "https://valueimpression.com/"
                                }
                            },
                            "adConfig": {
                                "vastRetry": 5,
                                "autoSkip": null,
                                "delay": 10
                            }
                        };
                        if (!this.placementAdsSlot || !this.initConfig || !this.initConfig.vid || !this.initConfig.vid.template) return;
                        var videoContainerTemp = new VideoContainerTemplate_VideoContainerTemplate({
                            placementAdSlot: this.placementAdsSlot,
                            config: this.initConfig.vid
                        });
                        return videoContainerTemp;
                    }
                }, {
                    key: "initBidManager",
                    value: function initBidManager() {
                        var _this = this;

                        this.logMess("Init BidManger");
                        var playerSize = this.videoContainerTemp.getFullSizeWrapper();

                        if (!playerSize) {
                            this.logMess("Player Size is Empty");
                            return;
                        }

                        var adUnitList = []; // Bid TopArticles

                        var adunit = this.initConfig.adunit;
                        adunit.code = this.adSlot + "_instream";
                        adunit.bids = adunit.bids ? adunit.bids : [];
                        if (!adunit.mediaTypes) adunit.mediaTypes = mediaTypesAdFormatVideo('videodiscovery', playerSize);
                        adUnitList.push(adunit); // Check Ad In Out Of View
                        // Use Process Video BG:    // this.placementAdsSlot

                        this.placementViewPort = newViewPortDetect(this.powerVideoContainer, {
                            threshold: [51]
                        }, false);
                        this.placementViewPort.inViewPort(function () {
                            // this.logMess(`placementViewPort ${this.adSlot} - inViewPort.`);
                            // Trigger set Video in view port first time.
                            var floatingSetting = _this.videoContainerTemp.videoSetting.floatingSetting;

                            if (floatingSetting && floatingSetting.floatingOnView) {
                                _this.videoContainerTemp.videoSetting.floatingSetting.floatingOnView = false;
                            }

                            _this.videoContainerTemp.deActiveFloating();

                            if (_this.adsManager) _this.resizeAds();
                            if (_this.videoContainerTemp.userAction.curVideoStatus) _this.playVideoBG();
                        });
                        this.placementViewPort.outViewPort(function () {
                            // this.logMess(`placementViewPort ${this.adSlot} - outViewPort.`);
                            _this.videoContainerTemp.activeFloating();

                            if (_this.adsManager) _this.resizeAds();
                            _this.videoContainerTemp.userAction.curVideoStatus = _this.videoContainerTemp.userAction.isVideoPlaying;
                            if (!_this.videoContainerTemp.userAction.isFloating) _this.pauseVideoBG();
                        }); // Use Process Video Ads

                        this.adsViewPortDetect = newViewPortDetect(this.adsPlaceholder, {
                            threshold: [51]
                        }, false);
                        this.adsViewPortDetect.inViewPort(function () {
                            _this.logMess("adsViewPortDetect ".concat(_this.adSlot, " - inViewPort."));

                            _this.initConfig.inViewPort = true;

                            _this.procesAdsInView();

                            if (_this.bidManager.bidResponses.length > 0) _this.processBids();
                        });
                        this.adsViewPortDetect.outViewPort(function () {
                            _this.logMess("adsViewPortDetect ".concat(_this.adSlot, " - outViewPort."));

                            _this.initConfig.inViewPort = false;

                            _this.procesAdsOutView();
                        });
                        this.adsViewPortDetect.inTab(function () {
                            // this.logMess(`adsViewPortDetect ${this.adSlot} - inTab.`);
                            if (_this.adsManager && _this.initConfig.inViewPort) _this.adsManager.resume();
                            if (_this.timerRefreshAds) _this.timerRefreshAds.resume();
                        });
                        this.adsViewPortDetect.outTab(function () {
                            // this.logMess(`adsViewPortDetect ${this.adSlot} - outTab.`);
                            if (_this.adsManager) _this.adsManager.pause();
                            if (_this.timerRefreshAds) _this.timerRefreshAds.pause();
                        });

                        var _getFloorTest = getFloorTest(this.initConfig.floorTest, adunit.code),
                            _getFloorTest2 = slicedToArray_default()(_getFloorTest, 2),
                            floorTest = _getFloorTest2[0],
                            testCaseId = _getFloorTest2[1]; // Create BidManger


                        this.bidManager = new helper_BidManager({
                            slotId: this.adSlot,
                            tagId: this.initConfig.zid,
                            floorPrice: this.initConfig.floorPrice,
                            dynamicFloor: getDynamicFloor(this.initConfig.dynamicFloor, adunit.code),
                            abTestFloorId: this.initConfig.abTestId,
                            floorTest: floorTest,
                            testTime: this.initConfig.timeTest,
                            testCaseId: testCaseId,
                            adUnits: adUnitList,
                            adWidth: this.initConfig.w,
                            adHeight: this.initConfig.h,
                            tagWidth: this.initConfig.w,
                            tagHeight: this.initConfig.h,
                            viewPortDetect: this.adsViewPortDetect
                        }); // Process with heavy ads

                        _addEventListener("TOPARTICLES_HEAVY_ADS", function (event) {
                            return _this.processHeavyAds();
                        }); // Btn Close Floating Event


                        this.videoContainerTemp.setVideoController(function (event) {
                            _this.logMess("VideoContainer ".concat(_this.adSlot, " - event: ").concat(event));

                            if (event == 'floatingClose') {
                                if (_this.adsManager) return;
                                _this.videoContainerTemp.userAction.curVideoStatus = _this.videoContainerTemp.userAction.isVideoPlaying;

                                _this.pauseVideoBG();

                                _this.resizeAds();
                            }
                        });
                        setTimeout(function () {
                            _this.processRequestBid();
                        }, 1000);
                    } // Process + Request Bid + DFP + Render Ads

                }, {
                    key: "resetBidConfig",
                    value: function resetBidConfig() {
                        this.bidConfig.curAds = 0;
                        this.bidConfig.curRequest = 0;
                    }
                }, {
                    key: "processRequestBid",
                    value: function processRequestBid() {
                        this.bidConfig.curRequest++;

                        if (this.bidConfig.curRequest > this.bidConfig.maxRequest) {
                            this.logMess("AdSlot " + this.adSlot + " request bid " + this.bidConfig.maxRequest + " times is maximum.");
                            return;
                        }

                        this.startNewAuction();
                    }
                }, {
                    key: "startNewAuction",
                    value: function startNewAuction() {
                        var _this2 = this;

                        this.logMess("Start New Auction: " + this.adSlot + " - " + this.bidConfig.curRequest + " times.");
                        this.bidManager.requestBids(function (auctionIsEmptyBid, curFloorObj) {
                            _this2.curFloorObj = curFloorObj;
                            var isRequestDFP = !Configs.gbk && _this2.initConfig.dfpAdUnit ? true : false;

                            if (auctionIsEmptyBid && !isRequestDFP) {
                                _this2.logMess("Bid Response is Empty and Not request to DFP...");

                                _this2.initAdRefreshTimer(true);

                                return;
                            }

                            if (_this2.bidManager.bidResponses.length <= 0 || _this2.initConfig.inViewPort) {
                                _this2.processBids();
                            }
                        });
                    }
                }, {
                    key: "processBids",
                    value: function processBids() {
                        var dfpAdUnitObj = !Configs.gbk && this.initConfig.dfpAdUnit ? processDfpAdUnit(this.initConfig.dfpAdUnit) : null;

                        if (dfpAdUnitObj) {
                            // Request to DFP with highest bid in all bid responses
                            this.logMess("Request Bid to DFP on adSlot: " + this.adSlot);
                            this.bidResponseDFP = this.bidManager.getHighestBid(); // Process currency

                            var _ref = this.bidResponseDFP ? processRealCpm(this.bidResponseDFP.cpm, dfpAdUnitObj) : processRealCpm(this.curFloorObj.price, dfpAdUnitObj),
                                _ref2 = slicedToArray_default()(_ref, 2),
                                realCPM = _ref2[0],
                                granularityMultiplier = _ref2[1];

                            var dfpAdUnit = dfpAdUnitObj.dfpAdUnit ? dfpAdUnitObj.dfpAdUnit : ""; //

                            var TARGET_KEYS = TopArticles_CONSTANTS.TARGET_KEYS;
                            var customParams = {};
                            customParams["pw_ref"] = Configs.refererDomainID ? Configs.refererDomainID + "_" + Configs.domainID : null;
                            customParams[TARGET_KEYS.ACCOUNT] = this.initConfig.targetGoogleAccount ? this.initConfig.targetGoogleAccount : "";
                            customParams[TARGET_KEYS.PW_NETWORK] = true;
                            customParams[TARGET_KEYS.PW_LINE_ID] = this.initConfig.targetLineId ? this.initConfig.targetLineId : "";
                            var targetAdSlot = this.initConfig.targetAdSlot || "";
                            var targetAdSlotVal = this.curFloorObj.type != null ? "".concat(targetAdSlot, "_").concat(this.curFloorObj.abTestId, "_").concat(this.curFloorObj.type) : targetAdSlot;
                            customParams[TARGET_KEYS.TARGET_ADSLOT] = targetAdSlotVal;
                            var dfpConfig = {
                                adUnit: dfpAdUnit,
                                targetAccountId: this.initConfig.targetGoogleAccount || "",
                                targetAdSlot: targetAdSlot,
                                customParams: customParams
                            }; // 

                            if (this.bidResponseDFP) {
                                var ggBidAdj = this.initConfig.googleBidAdjustment ? parseFloat(this.initConfig.googleBidAdjustment) : 1;

                                if (Configs.listAmazonBidder.includes(this.bidResponseDFP.bidder)) {
                                    this.bidResponseDFP.adserverTargeting[TARGET_KEYS.PRICE_AMZ_VIDEO] = getCustomAPDPB(this.bidResponseDFP.mediaType, this.bidResponseDFP.adserverTargeting[TARGET_KEYS.PRICE_AMZ_VIDEO], granularityMultiplier, ggBidAdj);
                                } else {
                                    this.bidResponseDFP.adserverTargeting[TARGET_KEYS.PRICE_BUCKET] = getCustomAPDPB(this.bidResponseDFP.mediaType, realCPM, granularityMultiplier, ggBidAdj);
                                    dfpConfig.customParams[TARGET_KEYS.PRICE_BUCKET] = this.bidResponseDFP.adserverTargeting[TARGET_KEYS.PRICE_BUCKET];
                                }
                            } else {
                                if (realCPM > 0) {
                                    dfpConfig.customParams[TARGET_KEYS.PRICE_BUCKET] = getCustomAPDPB("video", realCPM, granularityMultiplier, 1);
                                }
                            }

                            this.playVast(dfpConfig);
                        } else {
                            this.playVast();
                        }
                    }
                }, {
                    key: "playVast",
                    value: function playVast() {
                        var _this3 = this;

                        var dfpConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
                        if (!dfpConfig) this.logMess("BidManager Get Highest Bid for adSlot: " + this.adSlot);
                        var bidWon = dfpConfig ? this.bidResponseDFP : this.bidManager.getHighestBid();

                        if (!bidWon && !dfpConfig) {
                            this.logMess("Bids is Empty for adSlot: " + this.adSlot);
                            this.initAdRefreshTimer(true);
                            return;
                        }

                        var adUnitCode = bidWon ? bidWon.adUnitCode : this.adSlot;
                        var wAdsPlayer = this.adsPlaceholder.offsetWidth ? this.adsPlaceholder.offsetWidth : this.initConfig.vid.template.appearance.maxWidth;
                        var hAdsPlayer = this.adsPlaceholder.offsetHeight ? this.adsPlaceholder.offsetHeight : wAdsPlayer * 0.5625; // 16:9

                        var adsPlayer = new helper_AdPlayer({
                            baseDomain: Configs.rootDomain,
                            brandLogo: Configs.brandLogoBlack,
                            pixelManager: this.bidManager.pixelManager,
                            adElement: this.adsPlaceholder,
                            adSlotId: this.adSlot,
                            adWidth: wAdsPlayer,
                            adHeight: hAdsPlayer,
                            skipRequired: false,
                            showVolumeControl: true,
                            defaultVolume: this.videoContainerTemp.userAction.isMuted ? 0 : 1,
                            showProgressBar: false
                        }); // Callback Dedug Overlay

                        adsPlayer.setCallBacks({
                            started: function started() {
                                if (_this3.bidResponseDFP) {
                                    // => DFP win
                                    var dataBid = {
                                        adId: bidWon ? bidWon.adId : "unknown from Adx",
                                        bidder: bidWon ? bidWon.bidder : "Adx",
                                        creativeId: bidWon ? bidWon.creativeId : "unknown from Adx"
                                    };
                                    pushInfoDebugOverlay(_this3.adSlot, dataBid);
                                    _this3.bidResponseDFP = null;
                                } else {
                                    pushInfoDebugOverlay(_this3.adSlot, bidWon);
                                } // Create Report Observer for Heavy Ads


                                var iframeAd = _this3.adsPlaceholder.getElementsByTagName("iframe")[0];

                                var jData = {
                                    "creativeId": bidWon && bidWon.creativeId ? bidWon.creativeId : null,
                                    "adFormat": "TopArticles"
                                };
                                if (iframeAd) reportingObserver(iframeAd, jData);
                            }
                        }); // Callback Play Ads

                        adsPlayer.setCallBacks({
                            started: function started(adEvent) {
                                _this3.logMess("Vast Event Started on adSlot: " + adUnitCode);

                                _this3.videoContainerTemp.userAction.isPlayAfterAds = _this3.videoContainerTemp.userAction.isVideoPlaying;

                                _this3.pauseVideoBG();

                                _this3.addRenderAdsCss();

                                _this3.videoContainerTemp.showAdsWrapper();

                                if (_this3.initConfig.inViewPort) _this3.procesAdsInView();else _this3.procesAdsOutView(); // Play Ads Succ => reset bidResponses

                                _this3.bidManager.bidResponses = [];
                                _this3.bidConfig.curAds++;
                            },
                            impression: function impression() {
                                _this3.logMess("Vast Event Impression on adSlot: " + adUnitCode);
                            },
                            complete: function complete() {
                                _this3.logMess("Vast Event Complete on adSlot: " + adUnitCode);

                                _this3.clearAds();

                                _this3.initAdRefreshTimer();
                            },
                            hidden: function hidden() {
                                _this3.logMess("Vast Event Hidden on adSlot: " + adUnitCode);

                                _this3.clearAds();

                                _this3.initAdRefreshTimer();

                                cleanInfoDebugOverlay(_this3.adSlot);
                            },
                            paused: function paused() {
                                _this3.logMess("Vast Event Paused on adSlot: " + adUnitCode);
                            },
                            resumed: function resumed() {
                                _this3.logMess("Vast Event Resume on adSlot: " + adUnitCode);
                            },
                            error: function error(_error) {
                                // Bid request to DFP error -> add and recheck to show all bid response
                                if (_this3.bidResponseDFP) {
                                    _this3.logMess("Request Bid to DFP on adSlot: " + adUnitCode + " with Error: " + _error);

                                    _this3.bidManager.addBidToArray(_this3.bidResponseDFP);

                                    _this3.bidResponseDFP = null;
                                } else {
                                    _this3.logMess("Vast Event Error code: " + _error + " on adSlot: " + adUnitCode);
                                }

                                if (_this3.bidManager.bidResponses.length <= 0) {
                                    _this3.clearAds();
                                }

                                _this3.playVast();
                            },
                            adsVolumeChange: function adsVolumeChange(volume) {
                                // 0 -> mute | 1 -> unmute
                                _this3.videoContainerTemp.toggleMute(volume == 0 ? true : false);
                            }
                        });
                        this.adsManager = adsPlayer.play({
                            bidWon: bidWon,
                            dfp: dfpConfig
                        });
                    }
                }, {
                    key: "clearAds",
                    value: function clearAds() {
                        this.adsManager = null;
                        this.removeRenderAds();
                        this.videoContainerTemp.hideAdsWrapper();

                        if (this.bidManager.bidResponses.length <= 0 && this.videoContainerTemp.userAction.isPlayAfterAds && this.initConfig.inViewPort) {
                            this.playVideoBG();
                        }
                    }
                }, {
                    key: "procesAdsInView",
                    value: function procesAdsInView() {
                        if (!this.adsManager) return;
                        this.resizeAds();
                        this.adsManager.resume();
                    }
                }, {
                    key: "procesAdsOutView",
                    value: function procesAdsOutView() {
                        if (!this.adsManager) return;
                        this.resizeAds();
                        this.adsManager.pause();
                    }
                }, {
                    key: "resizeAds",
                    value: function resizeAds() {
                        var adViewmode = this.videoContainerTemp.userAction.isFullscreen ? "FULLSCREEN" : "NORMAL";

                        if (this.videoContainerTemp.userAction.isFloating) {
                            var wAdsPlayer = !utlis_mobileDetect() ? this.initConfig.vid.template.appearance.floatingSetting.width : this.initConfig.vid.template.mobileConfig.width;
                            var hAdsPlayer = wAdsPlayer * 0.5625; // 16:9

                            if (this.adsManager) this.adsManager.resize(wAdsPlayer, hAdsPlayer, adViewmode);
                        } else {
                            var _wAdsPlayer = this.videoContainerTemp.getWidth();

                            var _hAdsPlayer = _wAdsPlayer * 0.5625; // 16:9


                            if (this.adsManager) this.adsManager.resize(_wAdsPlayer, _hAdsPlayer, adViewmode);
                        }
                    }
                }, {
                    key: "initAdRefreshTimer",
                    value: function initAdRefreshTimer() {
                        var _this4 = this;

                        var isBidEmpty = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                        if (this.timerRefreshAds) return;

                        if (this.bidConfig.curAds == this.bidConfig.maxAds || this.bidConfig.curRequest >= this.bidConfig.maxRequest) {
                            this.logMess("Init AdsRefreshTimer for adSlot ".concat(this.adSlot, " call after ").concat(this.bidConfig.delay / 1000, "s"));
                            this.timerRefreshAds = new TimerDelay(function () {
                                _this4.logMess("AdRefresh timeout on adSlot ".concat(_this4.adSlot, " at time is ").concat(Math.floor(Date.now() / 1000), " => Start new Auction."));

                                _this4.timerRefreshAds.pause();

                                _this4.timerRefreshAds = null;

                                _this4.resetBidConfig();

                                _this4.processRequestBid();
                            }, this.bidConfig.delay);
                            this.timerRefreshAds.start();
                        } else {
                            // Chua full request -> request lai
                            this.processRequestBid();
                        }
                    } // Ads Render Handle

                }, {
                    key: "addRenderAdsCss",
                    value: function addRenderAdsCss() {
                        if (!this.adsPlaceholder) return;
                        this.adsPlaceholder.style.cssText = "z-index: 999999!important; position: absolute!important; width: 100%!important; height: 100%!important; top: 0!important; left: 0!important; display:block!important;padding:0!important;margin:0!important";
                        this.videoContainerTemp.offRelatedVideo();
                    }
                }, {
                    key: "removeRenderAds",
                    value: function removeRenderAds() {
                        this.adsPlaceholder.innerHTML = "";
                        this.adsPlaceholder.style.cssText = "";
                        this.videoContainerTemp.onRelatedVideo();
                    } // Video Background Controller

                }, {
                    key: "playVideoBG",
                    value: function playVideoBG() {
                        if (this.adsManager) return;

                        if (this.videoContainerTemp.videoSetting.playerSkinType == 8) {
                            // TopArticles
                            this.videoContainerTemp.playTopArt();
                        } else {
                            // Instream + Outstream
                            this.videoContainerTemp.play();
                        }
                    }
                }, {
                    key: "pauseVideoBG",
                    value: function pauseVideoBG() {
                        if (this.videoContainerTemp.videoSetting.playerSkinType == 8) {
                            // TopArticles
                            this.videoContainerTemp.pausePinZone();
                        } else {
                            // Instream + Outstream
                            this.videoContainerTemp.pause();
                        }
                    } // Other

                }, {
                    key: "buildPlayerContentsFromJSON",
                    value: function buildPlayerContentsFromJSON(items) {
                        try {
                            var playerContents = [];

                            if (!items || items.length <= 0) {
                                this.getTopArticlesData();
                                return;
                            }

                            for (var i = 0; i < items.length; i++) {
                                if (!items[i].title) continue;
                                if (!items[i].image) continue;
                                if (!items[i].link) continue;
                                var pContent = {
                                    title: items[i].title,
                                    image: items[i].image,
                                    link: items[i].link
                                };
                                playerContents.push(pContent);
                            }

                            if (playerContents.length <= 0) {
                                this.getTopArticlesData();
                                return;
                            }

                            this.initConfig.vid.topArticle = this.initConfig.vid.topArticle || {};
                            this.initConfig.vid.topArticle = playerContents; // Init TopArticles Template

                            this.init();
                        } catch (e) {
                            this.logMess("Err: " + e);
                        }
                    }
                }, {
                    key: "buildPlayerContentsFromXMLDom",
                    value: function buildPlayerContentsFromXMLDom(XMLDom) {
                        try {
                            var playerContents = [];
                            var items = XMLDom.getElementsByTagName("item");

                            if (items.length <= 0) {
                                this.getTopArticlesData();
                                return;
                            }

                            for (var i = 0; i < items.length; i++) {
                                if (!items[i].getElementsByTagName("title")[0]) continue;
                                if (!items[i].getElementsByTagName("image")[0]) continue;
                                if (!items[i].getElementsByTagName("link")[0]) continue;
                                var title = items[i].getElementsByTagName("title")[0].childNodes[0].nodeValue;
                                var image = items[i].getElementsByTagName("image")[0].childNodes[0].nodeValue;
                                var link = items[i].getElementsByTagName("link")[0].childNodes[0].nodeValue;
                                var pContent = {
                                    title: title,
                                    image: image,
                                    link: link
                                };
                                playerContents.push(pContent);
                            }

                            if (playerContents.length <= 0) {
                                this.getTopArticlesData();
                                return;
                            }

                            this.initConfig.vid.topArticle = this.initConfig.vid.topArticle || {};
                            this.initConfig.vid.topArticle = playerContents; // Init TopArticles Template

                            this.init();
                        } catch (e) {
                            this.logMess("Err: " + e);
                        }
                    }
                }, {
                    key: "getTopArticlesData",
                    value: function getTopArticlesData() {
                        var _this5 = this;

                        try {
                            var curDomain = window.location.hostname;

                            if (curDomain.indexOf("freegames66") != -1) {
                                this.initConfig.feed_url = "https://els.pubpowerplatform.io/els.php?key='".concat(document.title ? document.title : "Gun", "'&domain=freegames66.com");
                            } else {
                                if (!this.initConfig.feed_url || this.initConfig.feed_url == "") {
                                    this.logMess("No Feed URL");
                                    return;
                                }
                            }

                            var xhr = new XMLHttpRequest();

                            xhr.onreadystatechange = function () {
                                if (xhr.readyState === 4) {
                                    if (xhr.status === 200) {
                                        if (xhr.response || xhr.responseXML) {
                                            if (xhr.responseXML) {
                                                _this5.buildPlayerContentsFromXMLDom(xhr.responseXML);
                                            } else {
                                                _this5.buildPlayerContentsFromJSON(JSON.parse(xhr.response));
                                            }
                                        } else {
                                            _this5.getTopArticlesData();
                                        }
                                    } else {
                                        _this5.getTopArticlesData();
                                    }
                                }
                            };

                            xhr.open("GET", this.initConfig.feed_url, true);
                            xhr.timeout = 2000;

                            xhr.ontimeout = function () {
                                _this5.getTopArticlesData();
                            };

                            xhr.send();
                        } catch (e) {
                            this.logMess("Err: " + e);
                        }
                    }
                }, {
                    key: "getPlacementByAdSlot",
                    value: function getPlacementByAdSlot(adSlot) {
                        if (!adSlot) return;
                        var placement = null;
                        var availableSlots = document.getElementsByClassName(Configs.adClass);
                        if (availableSlots.length === 0) return;

                        for (var i = 0; i < availableSlots.length; i++) {
                            var slotElem = availableSlots[i];
                            if (slotElem.dataset.adSlot !== adSlot) continue;
                            if (slotElem.hasChildNodes()) continue;
                            placement = slotElem; // if (placement.id === "") placement.id = adSlot;

                            break;
                        }

                        return placement;
                    }
                }, {
                    key: "logMess",
                    value: function logMess(mess) {
                        if (typeof_default()(mess) === "object") {
                            vilog("".concat(JSON.stringify(mess)), "TopArticles");
                        } else {
                            vilog("".concat(mess), "TopArticles");
                        }
                    }
                }]);

                return TopArticles;
            }();


// EXTERNAL MODULE: ./src/plugins/template/pinzone/pinzone.html
            var pinzone = __webpack_require__(65);
            var pinzone_default = /*#__PURE__*/__webpack_require__.n(pinzone);

// EXTERNAL MODULE: ./src/plugins/template/pinzone/video.html
            var pinzone_video = __webpack_require__(66);
            var pinzone_video_default = /*#__PURE__*/__webpack_require__.n(pinzone_video);

// EXTERNAL MODULE: ./src/plugins/template/pinzone/close.html
            var pinzone_close = __webpack_require__(67);
            var close_default = /*#__PURE__*/__webpack_require__.n(pinzone_close);

// EXTERNAL MODULE: ./src/plugins/template/pinzone/loading.html
            var loading = __webpack_require__(68);
            var loading_default = /*#__PURE__*/__webpack_require__.n(loading);

// EXTERNAL MODULE: ./src/plugins/template/pinzone/header.html
            var pinzone_header = __webpack_require__(69);
            var header_default = /*#__PURE__*/__webpack_require__.n(pinzone_header);

// EXTERNAL MODULE: ./src/plugins/template/pinzone/img.html
            var pinzone_img = __webpack_require__(70);
            var img_default = /*#__PURE__*/__webpack_require__.n(pinzone_img);

// EXTERNAL MODULE: ./src/plugins/template/pinzone/power-text.html
            var power_text = __webpack_require__(71);
            var power_text_default = /*#__PURE__*/__webpack_require__.n(power_text);

// EXTERNAL MODULE: ./src/plugins/template/pinzone/power-text-by.html
            var power_text_by = __webpack_require__(72);
            var power_text_by_default = /*#__PURE__*/__webpack_require__.n(power_text_by);

// EXTERNAL MODULE: ./src/plugins/template/pinzone/footer.html
            var footer = __webpack_require__(73);
            var footer_default = /*#__PURE__*/__webpack_require__.n(footer);

// EXTERNAL MODULE: ./src/plugins/template/pinzone/svg/three-dots.html
            var three_dots = __webpack_require__(74);
            var three_dots_default = /*#__PURE__*/__webpack_require__.n(three_dots);

// EXTERNAL MODULE: ./src/plugins/template/pinzone/svg/x-button.html
            var x_button = __webpack_require__(75);
            var x_button_default = /*#__PURE__*/__webpack_require__.n(x_button);

// EXTERNAL MODULE: ./src/plugins/template/pinzone/svg/action-btt.html
            var action_btt = __webpack_require__(23);
            var action_btt_default = /*#__PURE__*/__webpack_require__.n(action_btt);

// EXTERNAL MODULE: ./src/plugins/template/pinzone/svg/close-btt.html
            var close_btt = __webpack_require__(14);
            var close_btt_default = /*#__PURE__*/__webpack_require__.n(close_btt);

// EXTERNAL MODULE: ./src/plugins/template/pinzone/svg/playoverlay.html
            var playoverlay = __webpack_require__(76);
            var playoverlay_default = /*#__PURE__*/__webpack_require__.n(playoverlay);

// EXTERNAL MODULE: ./src/plugins/template/pinzone/close-in-ad.html
            var close_in_ad = __webpack_require__(77);
            var close_in_ad_default = /*#__PURE__*/__webpack_require__.n(close_in_ad);

// EXTERNAL MODULE: ./src/plugins/template/pinzone/pinzone.css
            var pinzone_pinzone = __webpack_require__(78);
            var pinzone_pinzone_default = /*#__PURE__*/__webpack_require__.n(pinzone_pinzone);

// CONCATENATED MODULE: ./src/plugins/helper/PinZoneTemplate.js


























            var PinZoneTemplate_PinZoneTemplate = /*#__PURE__*/function () {
                function PinZoneTemplate(videoConfig) {
                    classCallCheck_default()(this, PinZoneTemplate);

                    this.pwClass = {
                        classContainerWrapper: "power-container-wrapper",
                        classPowerVideoWrapper: "power-video-wrapper",
                        classTopWrapper: "power-top-wrapper",
                        classActive: "power-active-exist",
                        classVideo: "power-video-top",
                        closeClass: "power-floating-close",
                        classHidden: "power-hidden-exist",
                        classNoneHidden: "power-none-hidden",
                        classLoading: "vPlayerLoading",
                        classPause: "power-pause-holder",
                        classPlay: "power-play-holder",
                        classNext: "power-next-holder",
                        classPrev: "power-prev-holder",
                        classAboutButton: "power-about-button",
                        classAboutIcon: "power-about-icon",
                        classAboutInfo: "power-about-info",
                        classHeaderText: "power-header-text",
                        classFooterText: "power-footer-text",
                        classReadMore: "power-footer-read-more",
                        classHeaderWrapper: "power-header-wrapper",
                        classProgressMini: "power-progress-mini",
                        classPowerProgress: "power-progress-section",
                        classProgressBar: "power-progress-bar",
                        classPowerClickAnimation: "power-click-animation",
                        adPlaceHolderClass: "top-place-holder",
                        powerStyleId: "power-css-top-pw",
                        powerSlideAnimation: "power-slider-animation",
                        classFloat: "power-float-position",
                        classFooterWrapper: "power-footer-wrapper",
                        classControlsWrapper: "power-controls-wrapper",
                        classPrevButton: "power-prev-btt",
                        classWrapperButton: "power-wrapper-btt",
                        classOverlay: "power-overlay-pause",
                        classOverlayBtt: "power-overlay-icon-btt",
                        classSmallDevice: "power-small-device",
                        classHolderAdFloat: "power-holder-ad-float",
                        classHolderCloseAdFloat: "power-holder-close-ad-float",
                        classHolderFloatAbove: "power-holder-float"
                    };
                    this.idFontGG = "--power-font-gg-id--";
                    this.aboutDomain = "https://pubpower.io/";
                    this.video = null;
                    this.videoConfig = videoConfig;
                    this.opts = this.videoConfig.opts;
                    this.tinyMobile = 322; //window.innerWidth in 320 mobile is 322

                    this.baseCss = "position: relative; display: flex; justify-content: center;";
                    this.floatingPosition = ["bot-right", "bot-left", "top-right", "top-left"];
                    this.floatingSetting = utlis_mobileDetect() ? this.opts.template.mobileConfig : this.opts.template.appearance.floatingSetting;
                    this.placementAdsSlot = videoConfig.placementAdSlot;
                    this.powerAdsPlaceholder = null;
                    this.powerTopWrapper = null;
                    this.powerVideoContainerWrap = null;
                    this.closeDiv = null;
                    this.videoNow = null;
                    this.vPlayerLoading = null;
                    this.pauseBttNow = null;
                    this.playBttNow = null;
                    this.nextBttNow = null;
                    this.prevBttNow = null;
                    this.aboutIconNow = null;
                    this.aboutInfoNow = null;
                    this.footerReadMoreNow = null;
                    this.headerWrapperNow = null;
                    this.overlayPauseNow = null;
                    this.holderAdFloatNow = null;
                    this.holderAdFloatAboveNow = null;
                    this.holderAdCloseNow = null;
                    this.videoWrapperNow = null;
                    this.userAction = {
                        userClickCloseBtn: false,
                        isFloating: false,
                        isMuted: true,
                        isAutoPlayAd: this.opts.template.autoStart == "on",
                        isPlayAfterAds: this.opts.template.autoStart == "afterAd",
                        isNotAutoPlay: this.opts.template.autoStart == "off",
                        userClickPlayVideo: false,
                        // isVideoPlaying: false,
                        pauseByUser: false,
                        isShowAds: false
                    };
                    this.defaultColors = {
                        theme: {
                            color: "#000000",
                            elements: {
                                "background-color": [this.pwClass.classProgressMini, this.pwClass.classReadMore],
                                "border-left-color": [this.pwClass.classFooterText]
                            }
                        },
                        background: {
                            color: "#ffffff",
                            elements: {
                                "background-color": [this.pwClass.classTopWrapper]
                            }
                        },
                        //Main Title Background
                        mainTitleBackground: {
                            color: "#ffffff",
                            elements: {
                                "background-color": ["power-text", "power-text-by"]
                            }
                        },
                        //Main Title
                        mainTitle: {
                            color: "#000000",
                            elements: {
                                "color": ["power-text", "power-text-by"]
                            }
                        },
                        //Title
                        title: {
                            color: "#ffffff",
                            elements: {
                                "color": [this.pwClass.classFooterText]
                            }
                        },
                        //Title Background
                        "title-background": {
                            color: "#000000",
                            elements: {
                                "background-color": [this.pwClass.classFooterText]
                            }
                        },
                        //Title Hover Background
                        titleTextBackgroundHover: {
                            color: "hsl(0, 0%, 80%)",
                            elements: {
                                "background-color": ["".concat(this.pwClass.classFooterText, ":hover")]
                            }
                        },
                        //Action Button
                        actionButtonColor: {
                            color: "#ffffff",
                            elements: {
                                "color": [this.pwClass.classReadMore, "".concat(this.pwClass.classReadMore, " a")]
                            }
                        }
                    };
                    this.defaultSecondPer = 6;
                    this.positionNow = null;
                    this.dataIndex = "data-index";
                    this.videoSetting = this.videoSettingInput() || {};
                    this.videoSetting.adConfig = this.opts.template.adConfig;
                    this.marginBottomDistance = utlis_mobileDetect() ? this.videoSetting["margin-bot"] : this.videoSetting["margin-top-bot"];
                    this.renderVideo();
                    this.changeInfoPlayer();
                }

                createClass_default()(PinZoneTemplate, [{
                    key: "videoSettingInput",
                    value: function videoSettingInput() {
                        if (utlis_mobileDetect()) {
                            return this.opts.template.mobileConfig;
                        }

                        return this.opts.template.appearance.floatingSetting;
                    }
                }, {
                    key: "topWrapperLeft",
                    value: function topWrapperLeft() {
                        if (!this.videoSettingInput()) {
                            return false;
                        }

                        return this.videoSettingInput()["position"] == 2 || this.videoSettingInput()["position"] == 4;
                    }
                }, {
                    key: "getFloatingCSS",
                    value: function getFloatingCSS() {
                        var floatingPos = this.floatingPosition[this.videoSetting.position - 1];
                        var css = "z-index: 999999999 !important;position: fixed !important;width: " + this.widthFloat() + "px !important;-webkit-box-shadow: 0 5px 5px -3px rgb(0 0 0 / 20%), 0 8px 10px 1px rgb(0 0 0 / 14%), 0 3px 14px 2px rgb(0 0 0 / 12%);box-shadow: 0 5px 5px -3px rgb(0 0 0 / 20%), 0 8px 10px 1px rgb(0 0 0 / 14%), 0 3px 14px 2px rgb(0 0 0 / 12%);";

                        if (this.widthDevice() > this.tinyMobile) {
                            css += "margin: 10px;";
                        }

                        var marginTB = this.marginBottomDistance;
                        var marginLR = this.videoSetting["margin-left-right"];

                        if (floatingPos == "bot-right") {
                            css += "bottom: " + marginTB + "px !important; right: " + marginLR + "px !important;";
                        } else if (floatingPos == "bot-left") {
                            css += "bottom: " + marginTB + "px !important; left: " + marginLR + "px !important;";
                        } else if (floatingPos == "top-right") {
                            css += "top: " + marginTB + "px !important; right: " + marginLR + "px !important;";
                        } else if (floatingPos == "top-left") {
                            css += "top: " + marginTB + "px !important; left: " + marginLR + "px !important;";
                        }

                        return css;
                    }
                }, {
                    key: "setDefaultDistanceBottomFloating",
                    value: function setDefaultDistanceBottomFloating() {
                        var defaultBottom = utlis_mobileDetect() ? this.videoSetting["margin-bot"] : this.videoSetting["margin-top-bot"];
                        this.marginBottomDistance = defaultBottom;
                        this.powerTopWrapper.style.bottom = "".concat(defaultBottom, "px");
                    }
                }, {
                    key: "isEnableFloating",
                    value: function isEnableFloating() {
                        return this.floatingSetting;
                    }
                }, {
                    key: "setFloatOnView",
                    value: function setFloatOnView() {
                        if (!this.isEnableFloating() || !this.floatingSetting.floatingOnView) {
                            return;
                        }

                        this.floatingSetting.floatingOnView = false;
                    }
                }, {
                    key: "isActiveCloseBtt",
                    value: function isActiveCloseBtt() {
                        return this.isEnableFloating() && this.floatingSetting.closeFloatingBtn;
                    } // Floating

                }, {
                    key: "isElementInViewport",
                    value: function isElementInViewport(el) {
                        var rect = el.getBoundingClientRect();
                        return (// rect.top >= 0 && // Dont check top
                            rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth)
                        );
                    }
                }, {
                    key: "activeFloating",
                    value: function activeFloating() {
                        var _this = this;

                        vilog("activeFloating");

                        if (this.userAction.userClickCloseBtn || this.userAction.isFloating || !this.isEnableFloating()) {
                            return;
                        }

                        if (this.floatingSetting.floatingOnView || !this.floatingSetting.floatOnBottom && !this.isElementInViewport(this.powerTopWrapper)) {
                            // Float On Bottom
                            this.pause();
                            return;
                        }

                        this.userAction.isFloating = true;
                        this.powerTopWrapper.style.cssText = this.getFloatingCSS() + this.maxWidthTopWrapper(true);

                        if (!this.isTinyDevice()) {
                            if (this.powerVideoContainerWrap.classList.contains(this.pwClass.classSmallDevice)) {
                                this.powerVideoContainerWrap.classList.remove(this.pwClass.classSmallDevice);
                            }
                        } else {
                            if (!this.powerVideoContainerWrap.classList.contains(this.pwClass.classSmallDevice)) {
                                this.powerVideoContainerWrap.classList.add(this.pwClass.classSmallDevice);
                            }
                        }

                        this.videoWrapperNow.style.height = this.widthFloat() / 1.775 + "px";
                        this.powerVideoContainerWrap.classList.add(this.pwClass.classFloat);
                        this.videoNow.setAttribute("style", "position: unset!important");
                        this.changeCloseBtt({
                            add: true
                        });
                        setTimeout(function () {
                            _this.powerTopWrapper.classList.add(_this.pwClass.powerSlideAnimation);
                        }, 100);
                    }
                }, {
                    key: "deActiveFloating",
                    value: function deActiveFloating() {
                        vilog("deActiveFloating");
                        if (!this.isEnableFloating() || !this.userAction.isFloating) return;
                        this.userAction.isFloating = false;
                        this.powerTopWrapper.style.cssText = this.maxWidthTopWrapper();

                        if (this.isTinyDevice() || this.isParentSmall()) {
                            if (!this.powerVideoContainerWrap.classList.contains(this.pwClass.classSmallDevice)) {
                                this.powerVideoContainerWrap.classList.add(this.pwClass.classSmallDevice);
                            }
                        } else {
                            if (this.powerVideoContainerWrap.classList.contains(this.pwClass.classSmallDevice)) {
                                this.powerVideoContainerWrap.classList.remove(this.pwClass.classSmallDevice);
                            }
                        }

                        this.videoWrapperNow.style.height = this.maxWidthTop() / 1.775 + "px";
                        this.powerTopWrapper.classList.remove(this.pwClass.powerSlideAnimation);
                        this.powerVideoContainerWrap.classList.remove(this.pwClass.classFloat);
                        this.videoNow.setAttribute("style", "");
                        this.changeCloseBtt();
                    }
                }, {
                    key: "changeCloseBtt",
                    value: function changeCloseBtt() {
                        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                        if (!this.isActiveCloseBtt()) return;

                        if (options.add) {
                            this.closeDiv.classList.add(this.pwClass.classActive);
                        } else {
                            this.closeDiv.classList.remove(this.pwClass.classActive);
                        }
                    }
                }, {
                    key: "indexNow",
                    value: function indexNow() {
                        var i = this.mathIndex();

                        if (i >= this.amount()) {
                            return this.amount() - 1;
                        }

                        return i;
                    }
                }, {
                    key: "mathIndex",
                    value: function mathIndex() {
                        return Math.floor(this.videoNow.currentTime / this.defaultSecondPer);
                    }
                }, {
                    key: "isInvalid",
                    value: function isInvalid() {
                        return !this.amount() || !this.videoNow.currentTime && !this.videoNow.currentTime === 0;
                    }
                }, {
                    key: "changeInfoPlayer",
                    value: function changeInfoPlayer() {
                        if (!this.videoNow) {
                            return;
                        }

                        setInterval( //Video total time / number of link -> time change per link
                            function () {
                                if (this.isInvalid()) {
                                    return;
                                }

                                this.miniHandle(this.indexNow());
                            }.bind(this), 100);
                        setInterval( //Video total time / number of link -> time change per link
                            function () {
                                if (this.isInvalid()) {
                                    return;
                                }

                                this.miniProgress(this.indexNow());
                            }.bind(this), 1);
                    }
                }, {
                    key: "miniProgress",
                    value: function miniProgress(i) {
                        if (this.userAction.isShowAds) {
                            return;
                        }

                        var allMini = this.headerWrapperNow.querySelectorAll("." + this.pwClass.classProgressMini);

                        for (var index = 0; index < allMini.length; index++) {
                            if (index < i) {
                                allMini[index].style.width = "100%";
                            }

                            if (index > i) {
                                allMini[index].style.width = "0%";
                            }

                            if (index == i) {
                                allMini[index].style.width = (this.videoNow.currentTime - i * this.defaultSecondPer) / this.defaultSecondPer * 100 + "%";
                            }
                        }
                    }
                }, {
                    key: "miniHandle",
                    value: function miniHandle(i) {
                        if (!this.opts.info[i] || this.userAction.isShowAds) {
                            return;
                        }

                        var iString = i.toString();
                        var text = this.opts.info[i].text;
                        var link = this.opts.info[i].link;

                        if (this.footerTextNow().getAttribute(this.dataIndex) != iString) {
                            this.footerTextNow().innerText = text;
                            this.footerTextNow().title = link;
                            this.footerTextNow().closest("a").href = link;
                            this.footerTextNow().setAttribute(this.dataIndex, iString);
                            this.cloneElement(this.footerTextNow());
                        }

                        if (this.footerReadMoreNow.getAttribute(this.dataIndex) != iString) {
                            this.footerReadMoreNow.href = link;
                            this.footerReadMoreNow.title = text; // this.footerReadMoreNow.querySelector("power").title = text;

                            this.footerReadMoreNow.setAttribute(this.dataIndex, iString);
                        }
                    }
                }, {
                    key: "activeElement",
                    value: function activeElement(i, classInput) {
                        var elems = this.powerVideoContainerWrap.querySelectorAll("".concat(classInput));

                        for (var index = 0; index < elems.length; index++) {
                            if (index == i) {
                                elems[index].classList.add(this.pwClass.classActive);
                            } else {
                                elems[index].classList.remove(this.pwClass.classActive);
                            }
                        }
                    }
                }, {
                    key: "amount",
                    value: function amount() {
                        return this.opts.info.length;
                    }
                }, {
                    key: "getAdsPlaceholder",
                    value: function getAdsPlaceholder() {
                        return this.powerAdsPlaceholder;
                    }
                }, {
                    key: "getPowerVideoContainer",
                    value: function getPowerVideoContainer() {
                        return this.placementAdsSlot;
                    }
                }, {
                    key: "maxWidthTopWrapper",
                    value: function maxWidthTopWrapper() {
                        var _float = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

                        return "max-width: ".concat(this.maxWidthTop(_float), ";");
                    }
                }, {
                    key: "widthFloat",
                    value: function widthFloat() {
                        if (this.widthDevice() <= this.videoSetting.width) {
                            return this.widthDevice();
                        }

                        return this.videoSetting.width;
                    }
                }, {
                    key: "isTinyDevice",
                    value: function isTinyDevice() {
                        return this.widthDevice() <= this.tinyMobile || this.maxWidthTop() <= this.tinyMobile;
                    }
                }, {
                    key: "widthDevice",
                    value: function widthDevice() {
                        return window.innerWidth > 0 ? window.innerWidth : screen.width;
                    }
                }, {
                    key: "maxWidthTop",
                    value: function maxWidthTop() {
                        var widthConfig = 0;

                        if (this.isEnableFloating() && this.userAction.isFloating) {
                            widthConfig = this.videoSettingInput().width;
                        } else {
                            widthConfig = this.opts.template.appearance.playerSize == "fixed" ? this.opts.template.appearance.maxWidth : 1000;
                        }

                        if (this.widthDevice() <= widthConfig) {
                            widthConfig = this.widthDevice();
                        }

                        if (!this.userAction.isFloating && this.placementAdsSlot.parentElement && this.placementAdsSlot.parentElement.offsetWidth < widthConfig) {
                            widthConfig = this.placementAdsSlot.parentElement.offsetWidth;
                        }

                        return widthConfig;
                    }
                }, {
                    key: "isParentSmall",
                    value: function isParentSmall() {
                        return this.placementAdsSlot.parentElement && this.placementAdsSlot.parentElement.offsetWidth <= this.tinyMobile;
                    }
                }, {
                    key: "isM3u8",
                    value: function isM3u8() {
                        // return false;
                        return this.opts.contents && this.opts.contents.length != 0 && this.opts.contents[0].video_url && this.opts.contents[0].video_url.m3u8 && !this.opts.contents[0].video_url.mp4 //Mp4 has higher priority
                            ;
                    }
                }, {
                    key: "checkm3u8",
                    value: function checkm3u8() {
                        if (this.isM3u8() && typeof Hls == "undefined") {
                            //If Hls not exists and config has video m3u8
                            loadScript("//" + Configs.staticDomain + "/plugins/hls.js/hls.min.js", false, function () {
                                this.start();
                            }.bind(this), function () {
                                this.start();
                            }.bind(this));
                            return;
                        }
                    }
                }, {
                    key: "showLoading",
                    value: function showLoading() {
                        this.vPlayerLoading.classList.remove(this.pwClass.classHidden);
                    }
                }, {
                    key: "hideLoading",
                    value: function hideLoading() {
                        this.vPlayerLoading.classList.add(this.pwClass.classHidden);
                    }
                }, {
                    key: "renderVideo",
                    value: function renderVideo() {
                        if (!this.opts.contents || this.opts.contents.length == 0 || !this.opts.contents[0].video_url || !this.opts.contents[0].video_url.mp4 && !this.opts.contents[0].video_url.m3u8 && !this.opts.contents[0].video_url.ogg) {
                            vilog("renderVideo missing video");
                            return;
                        }

                        this.loadFont(this.idFontGG);
                        this.addCustomColorCSS();
                        this.renderOpts = {
                            powerFooterText: this.opts.info[0].text,
                            powerFooterTitle: this.opts.info[0].link,
                            threeDots: handleBarsCustom(three_dots_default.a, {
                                classAboutIcon: this.pwClass.classAboutIcon
                            }),
                            xButton: handleBarsCustom(x_button_default.a, {
                                classXButton: "class=\"".concat(this.pwClass.classAboutIcon, "\"")
                            }),
                            adPlaceHolderClass: this.pwClass.adPlaceHolderClass,
                            classAboutButton: this.pwClass.classAboutButton,
                            closeClass: this.pwClass.closeClass,
                            classAboutInfo: this.pwClass.classAboutInfo,
                            brandNameAd: Configs.runWithPP ? "<img class=\"power-about-img\" src=\"https://pubpower.io/img/Favicon-7.png\" /> About PubPower" : "<img class=\"power-about-img\" src=\"https://valueimpression.com/images/logo/Favicon.png\" /> Valueimpression",
                            classHeaderText: this.pwClass.classHeaderText,
                            classFooterText: this.pwClass.classFooterText,
                            classHeaderWrapper: this.pwClass.classHeaderWrapper,
                            classPowerVideoWrapper: this.pwClass.classPowerVideoWrapper,
                            styleVideoWrapper: "style=\"height: ".concat(this.maxWidthTop() / 1.775, "px\""),
                            classOverlay: this.isAutoStartOn() ? "".concat(this.pwClass.classOverlay, " ").concat(this.pwClass.classHidden) : this.pwClass.classOverlay,
                            classOverlayBtt: this.pwClass.classOverlayBtt,
                            classHolderAdFloat: this.pwClass.classHolderAdFloat,
                            closeBtt: close_btt_default.a,
                            classHolderFloatAbove: this.pwClass.classHolderFloatAbove,
                            closeInAd: this.isActiveCloseBtt() ? handleBarsCustom(close_in_ad_default.a, {
                                classHolderCloseAdFloat: this.pwClass.classHolderCloseAdFloat,
                                closeBtt: close_btt_default.a
                            }) : "",
                            video: handleBarsCustom(pinzone_video_default.a, {
                                classVideo: this.pwClass.classVideo
                            }),
                            powerLoading: handleBarsCustom(loading_default.a, {
                                classLoading: this.pwClass.classLoading
                            }),
                            playOverlay: playoverlay_default.a,
                            powerHeader: this.renderHead(),
                            powerFooter: this.renderFooter(),
                            powerProgess: this.renderProgress()
                        };
                        this.checkm3u8();
                        this.powerVideoContainerWrap = document.createElement("power");
                        this.powerVideoContainerWrap.classList.add(this.pwClass.classContainerWrapper);
                        this.powerVideoContainerWrap.style.cssText = this.baseCss;
                        this.powerVideoContainerWrap.style.width = this.maxWidthTop() + "px";
                        this.powerVideoContainerWrap.style.height = this.maxWidthTop() / 1.775 + (this.isTinyDevice() ? 25 + 25 : 35 + 36) + "px"; //text in footer+ ad text in top

                        this.placementAdsSlot.style.cssText = this.baseCss;
                        this.placementAdsSlot.appendChild(this.powerVideoContainerWrap);
                        this.powerTopWrapper = document.createElement("power");
                        this.powerTopWrapper.classList.add(this.pwClass.classTopWrapper);

                        if (this.topWrapperLeft()) {
                            this.powerTopWrapper.classList.add("power-top-left-wrapper");
                        }

                        this.powerTopWrapper.style.cssText = this.maxWidthTopWrapper();
                        var videoContainerHtml = handleBarsCustom(pinzone_default.a, this.renderOpts);
                        this.powerTopWrapper.innerHTML = videoContainerHtml;
                        this.powerVideoContainerWrap.appendChild(this.powerTopWrapper);
                        this.getAllElements();
                        this.addAllEvents();
                        this.loadVideo();

                        if (this.opts.template.autoStart == "on") {
                            this.play();
                        }

                        if (!document.getElementById(this.pwClass.powerStyleId)) {
                            //Avoid add many times if add many slots
                            this.createCSS(this.pwClass.powerStyleId, pinzone_pinzone_default.a);
                        }

                        if (this.isTinyDevice() || this.isParentSmall()) {
                            this.powerVideoContainerWrap.classList.add(this.pwClass.classSmallDevice);
                        }
                    } //Color custom by user

                }, {
                    key: "addCustomColorCSS",
                    value: function addCustomColorCSS() {
                        var _this2 = this;

                        var customCSS = "<style id=\"".concat(this.placementAdsSlot.id, "-custom-color\">");

                        for (var key in this.defaultColors) {
                            if (Object.hasOwnProperty.call(this.defaultColors, key)) {
                                var colorCustom = this.getColor(key);

                                if (colorCustom && this.defaultColors[key].color != colorCustom) {
                                    var _loop = function _loop(k) {
                                        if (Object.hasOwnProperty.call(_this2.defaultColors[key].elements, k)) {
                                            _this2.defaultColors[key].elements[k].forEach(function (e) {
                                                customCSS += _this2.createStyle(e, k, colorCustom);
                                            });
                                        }
                                    };

                                    for (var k in this.defaultColors[key].elements) {
                                        _loop(k);
                                    }
                                }
                            }
                        }

                        customCSS += "</style>";
                        this.placementAdsSlot.innerHTML += customCSS;
                    }
                }, {
                    key: "createStyle",
                    value: function createStyle(className, prop, value) {
                        //add id of placementAdsSlot for unique if set multiple adSlot
                        return "#".concat(this.placementAdsSlot.id, " .").concat(className, "{").concat(prop, ": ").concat(value, ";}");
                    }
                }, {
                    key: "getColor",
                    value: function getColor(field) {
                        if (this.opts.template && this.opts.template.color && this.opts.template.color[field]) {
                            return this.opts.template.color[field];
                        }

                        return "";
                    }
                }, {
                    key: "renderProgress",
                    value: function renderProgress() {
                        var html = "";

                        for (var index = 0; index < this.amount(); index++) {
                            html += handleBarsCustom(progress_default.a, {
                                classProgressMini: this.pwClass.classProgressMini,
                                classProgressBar: this.pwClass.classProgressBar,
                                classPowerProgress: this.pwClass.classPowerProgress,
                                index: index
                            });
                        }

                        return html;
                    }
                }, {
                    key: "renderCloseButton",
                    value: function renderCloseButton() {
                        if (this.isActiveCloseBtt()) {
                            return handleBarsCustom(close_default.a, {
                                closeClass: this.pwClass.closeClass,
                                closeBtt: close_btt_default.a
                            });
                        }

                        return "";
                    }
                }, {
                    key: "renderHead",
                    value: function renderHead() {
                        var headerOpts = {
                            powerText: "",
                            powerTextBy: "",
                            powerLogoImg: ""
                        }; //Main Title Text

                        if (this.opts.template.text.titleOn) {
                            headerOpts.powerText = handleBarsCustom(power_text_default.a, {
                                logoLeft: this.opts.template.text.mainTitle
                            });
                        } //Sub Title Text


                        if (this.opts.template.logoBand.poweredByApacdex) {
                            headerOpts.powerTextBy = handleBarsCustom(power_text_by_default.a, {
                                text: this.opts.template.logoBand.poweredText ? this.opts.template.logoBand.poweredText : "by ".concat(Configs.brandName)
                            });
                        }

                        if (this.opts.template.logoBand.endableLogo && this.opts.template.logoBand.customLogo && this.opts.template.logoBand.customLogo.link) {
                            headerOpts.powerLogoImg = handleBarsCustom(img_default.a, {
                                logo: this.opts.template.logoBand.customLogo.link
                            });
                        }

                        return handleBarsCustom(header_default.a, headerOpts);
                    }
                }, {
                    key: "isAutoStartOn",
                    value: function isAutoStartOn() {
                        return this.opts.template.autoStart == "on";
                    }
                }, {
                    key: "isAutoStartDisable",
                    value: function isAutoStartDisable() {
                        return this.opts.template.autoStart == "off" || this.opts.template.autoStart == "afterAd";
                    }
                }, {
                    key: "renderFooter",
                    value: function renderFooter() {
                        return handleBarsCustom(footer_default.a, {
                            linkAd: this.opts.info[0].link,
                            prevBtt: handleBarsCustom(action_btt_default.a, {
                                classPrevButton: "class=\"".concat(this.pwClass.classPrevButton, "\"")
                            }),
                            playBtt: handleBarsCustom(play_default.a, {
                                "class": "class=\"power-play-btt\""
                            }),
                            pauseBtt: handleBarsCustom(pause_default.a, {
                                "class": ""
                            }),
                            classPause: this.isAutoStartDisable() ? "".concat(this.pwClass.classPause, " ").concat(this.pwClass.classHidden) : this.pwClass.classPause,
                            classPlay: this.isAutoStartOn() ? "".concat(this.pwClass.classPlay, " ").concat(this.pwClass.classHidden) : this.pwClass.classPlay,
                            classNext: this.pwClass.classNext,
                            classPrev: this.pwClass.classPrev,
                            nextBtt: handleBarsCustom(action_btt_default.a, {
                                classPrevButton: ""
                            }),
                            //Action Button Text
                            readMoreText: this.opts.template && this.opts.template.text && this.opts.template.text.readMore ? this.opts.template.text.readMore : "read more",
                            powerFooterText: this.opts.info[0].text,
                            classReadMore: this.pwClass.classReadMore,
                            classFooterWrapper: this.pwClass.classFooterWrapper,
                            classControlsWrapper: this.pwClass.classControlsWrapper,
                            classWrapperButton: this.pwClass.classWrapperButton
                        });
                    }
                }, {
                    key: "getAllElements",
                    value: function getAllElements() {
                        if (this.isActiveCloseBtt()) {
                            this.closeDiv = this.powerVideoContainerWrap.querySelector(".".concat(this.pwClass.closeClass));
                        }

                        this.videoNow = this.powerVideoContainerWrap.querySelector(".".concat(this.pwClass.classVideo));
                        this.vPlayerLoading = this.powerVideoContainerWrap.querySelector(".".concat(this.pwClass.classLoading));
                        this.powerAdsPlaceholder = this.powerVideoContainerWrap.querySelector(".".concat(this.pwClass.adPlaceHolderClass));
                        this.pauseBttNow = this.powerVideoContainerWrap.querySelector(".".concat(this.pwClass.classPause));
                        this.playBttNow = this.powerVideoContainerWrap.querySelector(".".concat(this.pwClass.classPlay));
                        this.nextBttNow = this.powerVideoContainerWrap.querySelector(".".concat(this.pwClass.classNext));
                        this.prevBttNow = this.powerVideoContainerWrap.querySelector(".".concat(this.pwClass.classPrev));
                        this.aboutButtonNow = this.powerVideoContainerWrap.querySelector(".".concat(this.pwClass.classAboutButton));
                        this.aboutIconNow = this.powerVideoContainerWrap.querySelector(".".concat(this.pwClass.classAboutIcon));
                        this.aboutInfoNow = this.powerVideoContainerWrap.querySelector(".".concat(this.pwClass.classAboutInfo));
                        this.footerReadMoreNow = this.powerVideoContainerWrap.querySelector(".".concat(this.pwClass.classReadMore));
                        this.headerWrapperNow = this.powerVideoContainerWrap.querySelector(".".concat(this.pwClass.classHeaderWrapper));
                        this.overlayPauseNow = this.powerVideoContainerWrap.querySelector(".".concat(this.pwClass.classOverlay));
                        this.holderAdFloatNow = this.powerVideoContainerWrap.querySelector(".".concat(this.pwClass.classHolderAdFloat));
                        this.holderAdFloatAboveNow = this.powerVideoContainerWrap.querySelector(".".concat(this.pwClass.classHolderFloatAbove));
                        this.holderAdCloseNow = this.powerVideoContainerWrap.querySelector(".".concat(this.pwClass.classHolderCloseAdFloat));
                        this.videoWrapperNow = this.powerVideoContainerWrap.querySelector(".".concat(this.pwClass.classPowerVideoWrapper));
                    }
                }, {
                    key: "footerTextNow",
                    value: function footerTextNow() {
                        //always get again (cloneElement and delete for animation -> get one time -> false)
                        return this.powerVideoContainerWrap.querySelector(".".concat(this.pwClass.classFooterText));
                    }
                }, {
                    key: "nextVideo",
                    value: function nextVideo() {
                        this.positionNow = this.mathIndex() + 1;

                        if (this.positionNow > this.amount()) {
                            this.positionNow = 0;
                        }

                        this.setTimeVideo();
                    }
                }, {
                    key: "prevVideo",
                    value: function prevVideo() {
                        this.positionNow = this.mathIndex() - 1;

                        if (this.positionNow < 0) {
                            this.positionNow = this.amount() - 1;
                        }

                        this.setTimeVideo();
                    }
                }, {
                    key: "addAllEvents",
                    value: function addAllEvents() {
                        if (this.isActiveCloseBtt()) {
                            this.closeDiv.addEventListener("click", function () {
                                this.userAction.userClickCloseBtn = true;
                                this.deActiveFloating();
                            }.bind(this));
                        }

                        if (this.isActiveCloseBtt()) {
                            this.holderAdCloseNow.addEventListener("click", function () {
                                this.userAction.userClickCloseBtn = true;
                                this.deActiveFloating();

                                if (!this.userAction.userClickPlayVideo) {
                                    this.userAction.userClickPlayVideo = true;
                                }
                            }.bind(this));
                        }

                        this.pauseBttNow.addEventListener("click", function () {
                            if (!this.userAction.pauseByUser) {
                                this.userAction.pauseByUser = true;
                            }

                            this.handlePause();

                            if (this.userAction.userClickPlayVideo) {
                                this.userAction.userClickPlayVideo = false;
                            }
                        }.bind(this));
                        this.playBttNow.addEventListener("click", function () {
                            if (this.userAction.pauseByUser) {
                                this.userAction.pauseByUser = false;
                            }

                            this.handlePlay();
                        }.bind(this));
                        this.nextBttNow.addEventListener("click", function () {
                            // this.nextVideo();
                            this.positionNow = this.mathIndex() + 1;

                            if (this.positionNow > this.amount()) {
                                this.positionNow = 0;
                            }

                            this.setTimeVideo();
                        }.bind(this));
                        this.prevBttNow.addEventListener("click", function () {
                            this.prevVideo();
                        }.bind(this));
                        this.aboutButtonNow.addEventListener("click", function () {
                            var _this3 = this;

                            this.aboutInfoNow.classList.toggle(this.pwClass.classHidden);

                            if (this.aboutButtonNow.classList.contains(this.pwClass.classPowerClickAnimation)) {
                                this.aboutButtonNow.classList.remove(this.pwClass.classPowerClickAnimation);
                                setTimeout(function () {
                                    _this3.aboutButtonNow.classList.add(_this3.pwClass.classPowerClickAnimation);
                                }, 100);
                            } else {
                                this.aboutButtonNow.classList.add(this.pwClass.classPowerClickAnimation);
                            }
                        }.bind(this));
                        this.aboutInfoNow.addEventListener("click", function () {
                            window.open(this.aboutDomain);
                        }.bind(this));
                        window.addEventListener("click", function (e) {
                            if (e.target != this.aboutButtonNow && e.target != this.aboutInfoNow && !this.aboutInfoNow.contains(e.target) && !this.aboutButtonNow.contains(e.target)) {
                                this.aboutInfoNow.classList.add(this.pwClass.classHidden);
                                this.aboutButtonNow.classList.remove(this.pwClass.classPowerClickAnimation);
                            }
                        }.bind(this));
                        this.headerWrapperNow.addEventListener("click", function (e) {
                            if (e.target.closest(".".concat(this.pwClass.classProgressBar))) {
                                e.target.closest(".".concat(this.pwClass.classProgressBar)).getAttribute(this.dataIndex);
                                this.positionNow = e.target.closest(".".concat(this.pwClass.classProgressBar)).getAttribute(this.dataIndex);
                                this.setTimeVideo();
                                this.miniHandle(this.positionNow);
                                this.miniProgress(this.positionNow);
                            }
                        }.bind(this));
                        this.overlayPauseNow.addEventListener("click", function () {
                            if (this.userAction.pauseByUser) {
                                this.userAction.pauseByUser = false;
                            }

                            this.handlePlay();
                            this.overlayPauseNow.classList.add(this.pwClass.classHidden);
                        }.bind(this));
                        this.videoWrapperNow.addEventListener("click", function (e) {
                            if (this.userAction.isShowAds) {
                                return;
                            }
                        }.bind(this));
                        this.powerTopWrapper.addEventListener("click", function (e) {
                            if (!e.target.classList.contains(this.pwClass.classTopWrapper) && !e.target.classList.contains(this.pwClass.classVideo)) {
                                return;
                            }

                            var clickTargetWidth = this.powerTopWrapper.offsetWidth;
                            var xCoordInClickTarget = e.clientX - this.powerTopWrapper.getBoundingClientRect().left;

                            if (clickTargetWidth / 2 > xCoordInClickTarget) {
                                // clicked left
                                this.prevVideo();
                            } else {
                                // clicked right
                                this.nextVideo();
                            }
                        }.bind(this));
                    }
                }, {
                    key: "setTimeVideo",
                    value: function setTimeVideo() {
                        this.videoNow.currentTime = this.defaultSecondPer * this.positionNow;
                    }
                }, {
                    key: "loadVideo",
                    value: function loadVideo() {
                        this.showLoading();

                        if (this.isM3u8()) {
                            if (Hls.isSupported()) {
                                this.hls = new Hls();
                                this.hls.loadSource(this.opts.contents[0].video_url.m3u8);
                                this.hls.attachMedia(this.videoNow);
                                this.hls.on(Hls.Events.MANIFEST_PARSED, function () {// this.videoNow.play();
                                }.bind(this));
                            } else if (this.videoNow.canPlayType("application/vnd.apple.mpegurl")) {
                                this.videoNow.src = this.opts.contents[0].video_url.m3u8;
                                this.videoNow.addEventListener("loadedmetadata", function () {// this.videoNow.play();
                                }.bind(this));
                            }
                        } else {
                            if (!this.opts.contents || this.opts.contents.length == 0 || !this.opts.contents[0].video_url || !this.opts.contents[0].video_url.mp4) {
                                vilog("renderVideo missing video");
                                return;
                            }

                            var source = document.createElement("source");
                            source.src = this.opts.contents[0].video_url.mp4;
                            source.type = "video/mp4";
                            this.videoNow.appendChild(source);
                            this.videoNow.load();
                        }

                        if (this.isAutoStartDisable()) {
                            this.pause();
                        }

                        this.hideLoading();
                    }
                }, {
                    key: "play",
                    value: function play() {
                        if (!this.videoNow.paused || this.userAction.pauseByUser) {
                            return;
                        }

                        this.handlePlay();
                    }
                }, {
                    key: "handlePlay",
                    value: function handlePlay() {
                        this.videoNow.play()["catch"](function (error) {
                            vilog(error);
                        }); // this.userAction.isVideoPlaying = true;

                        this.pauseBttNow.classList.remove(this.pwClass.classHidden);
                        this.playBttNow.classList.add(this.pwClass.classHidden);

                        if (!this.overlayPauseNow.classList.contains(this.pwClass.classHidden)) {
                            this.overlayPauseNow.classList.add(this.pwClass.classHidden);
                        }
                    }
                }, {
                    key: "pause",
                    value: function pause() {
                        if (this.videoNow.paused) {
                            return;
                        }

                        this.handlePause();
                    }
                }, {
                    key: "handlePause",
                    value: function handlePause() {
                        this.videoNow.pause(); // this.userAction.isVideoPlaying = false;

                        this.pauseBttNow.classList.add(this.pwClass.classHidden);
                        this.playBttNow.classList.remove(this.pwClass.classHidden);
                        this.overlayPauseNow.classList.remove(this.pwClass.classHidden);
                    }
                }, {
                    key: "playPinZone",
                    value: function playPinZone() {
                        if (this.userAction.pauseByUser) return;
                        vilog("Play PinZone");
                        this.play();
                    }
                }, {
                    key: "pausePinZone",
                    value: function pausePinZone() {
                        if (!this.userAction.userClickPlayVideo) return;
                        vilog("Pause PinZone");
                        this.pause();
                    }
                }, {
                    key: "showFloatDiv",
                    value: function showFloatDiv() {
                        this.holderAdFloatNow.classList.remove(this.pwClass.classHidden);
                        this.holderAdFloatAboveNow.classList.add(this.pwClass.classActive);

                        if (this.holderAdCloseNow) {
                            this.holderAdCloseNow.classList.remove(this.pwClass.classHidden);
                        }
                    }
                }, {
                    key: "hideFloatDiv",
                    value: function hideFloatDiv() {
                        this.holderAdFloatNow.classList.add(this.pwClass.classHidden);
                        this.holderAdFloatAboveNow.classList.remove(this.pwClass.classActive);

                        if (this.holderAdCloseNow) {
                            this.holderAdCloseNow.classList.add(this.pwClass.classHidden);
                        }
                    }
                }, {
                    key: "hideAdsWrapper",
                    value: function hideAdsWrapper() {
                        this.userAction.isShowAds = true;
                        this.footerTextNow().classList.add(this.pwClass.classHidden);
                        this.overlayPauseNow.classList.add(this.pwClass.classNoneHidden);
                        this.footerReadMoreNow.classList.add(this.pwClass.classHidden);
                        this.showFloatDiv();
                    }
                }, {
                    key: "showAdsWrapper",
                    value: function showAdsWrapper() {
                        this.userAction.isShowAds = false;
                        this.footerTextNow().classList.remove(this.pwClass.classHidden);
                        this.overlayPauseNow.classList.remove(this.pwClass.classNoneHidden);
                        this.footerReadMoreNow.classList.remove(this.pwClass.classHidden);
                        this.hideFloatDiv();
                    }
                }, {
                    key: "hideAdsHolder",
                    value: function hideAdsHolder() {
                        this.powerAdsPlaceholder.style.zIndex = 1;
                    } // Get size video container

                }, {
                    key: "getFullSizeWrapper",
                    value: function getFullSizeWrapper() {
                        try {
                            var w = Math.floor(this.powerVideoContainerWrap.offsetWidth);
                            var h = Math.floor(w * 0.5625);
                            return [w, h];
                        } catch (e) {
                            return null;
                        }
                    }
                }, {
                    key: "getWidth",
                    value: function getWidth() {
                        try {
                            return this.powerTopWrapper.offsetWidth;
                        } catch (e) {
                            return null;
                        }
                    }
                }, {
                    key: "toggleMute",
                    value: function toggleMute(muted) {
                        if (typeof muted == "boolean") {
                            this.videoNow.muted = muted;
                            this.userAction.isMuted = muted;
                        }
                    }
                }]);

                return PinZoneTemplate;
            }();


            Object.assign(PinZoneTemplate_PinZoneTemplate.prototype, mixinCreateCss);
            Object.assign(PinZoneTemplate_PinZoneTemplate.prototype, mixinLog);
            Object.assign(PinZoneTemplate_PinZoneTemplate.prototype, mixinLoadFont);
            Object.assign(PinZoneTemplate_PinZoneTemplate.prototype, mixinCloneElement);
// CONCATENATED MODULE: ./src/plugins/PinZone.js










            var PinZone_CONSTANTS = __webpack_require__(5);

            var PinZone_adSlots = [];

            var PinZone_PinZone = /*#__PURE__*/function () {
                function PinZone(adSlotObj) {
                    classCallCheck_default()(this, PinZone);

                    if (!adSlotObj) throw new Error("adSlot is null"); /// Setup All Config
                    /// Ads

                    var pinZone = Configs.adsTags.pinZoneSlot;

                    if (!pinZone || !pinZone[adSlotObj]) {
                        this.pwlog("PinZone['".concat(adSlotObj, "'] config is Empty..."));
                        return;
                    }

                    var adWrapper = null;
                    var adElements = document.getElementsByClassName(Configs.adClass);

                    for (var j = 0; j < adElements.length; j++) {
                        var element = adElements[j];

                        if (element && element.getAttribute("data-ad-slot") == adSlotObj) {
                            adWrapper = element;
                            break;
                        }
                    }

                    if (adWrapper && !isCheckElementVisible(adWrapper)) {
                        this.pwlog("PinZone ['".concat(adSlotObj, "'] not visible..."));
                        return;
                    }

                    this.slotId = adSlotObj;
                    this.initConfig = JSON.parse(JSON.stringify(pinZone[adSlotObj]));
                    this.initConfig.floorPrice = isNaN(parseFloat(this.initConfig.floorPrice)) ? 0 : parseFloat(this.initConfig.floorPrice);
                    this.initConfig.inViewPort = true; // Ads true => inViewPort, false => outViewPort

                    this.opts = {};
                    this.opts = this.initConfig.vid;
                    this.minWidthSupport = 256;
                    this.validateWidthVideo();
                    this.isOutViewPlayer = null;
                    this.playerAdsManager = null;
                    this.adIsRunning = false; // Get Data for PinZone

                    this.init();
                }

                createClass_default()(PinZone, [{
                    key: "validateWidthVideo",
                    value: function validateWidthVideo() {
                        var template = this.opts.template;

                        if (template) {
                            var app = template.appearance;

                            if (app) {
                                if (app.maxWidth && app.maxWidth < this.minWidthSupport) {
                                    this.opts.template.appearance.maxWidth = this.minWidthSupport;
                                }

                                if (app.floatingSetting && app.floatingSetting.width && app.floatingSetting.width < this.minWidthSupport) {
                                    this.opts.template.appearance.floatingSetting.width = this.minWidthSupport;
                                }
                            }

                            if (template.mobileConfig && template.mobileConfig.width && template.mobileConfig.width < this.minWidthSupport) {
                                this.opts.template.mobileConfig.width = this.minWidthSupport;
                            }
                        }
                    }
                }, {
                    key: "init",
                    value: function init() {
                        // Placement Adslot
                        this.placementAdsSlot = this.getPlacementByAdSlot(this.slotId); // include all content (Video + Ads)

                        if (!this.placementAdsSlot) {
                            this.pwlog("Placement current dont available");
                            return;
                        }

                        if (PinZone_adSlots[this.slotId]) {
                            PinZone_adSlots[this.slotId] += 1;
                        } else {
                            PinZone_adSlots[this.slotId] = 1;
                        }

                        this.adSlot = this.slotId + "_pinzone_" + PinZone_adSlots[this.slotId];
                        this.placementAdsSlot.id = this.adSlot;
                        this.placementAdsSlot.dataset.id = this.adSlot; /// View Container

                        this.videoContainerTemp = this.renderPinZone(); // this.videoContainerTemp =  this.initVideoContainer();

                        if (!this.videoContainerTemp) {
                            this.pwlog("Video templete is null.");
                            return;
                        }

                        this.adsPlaceholder = this.videoContainerTemp.getAdsPlaceholder();
                        this.powerVideoContainer = this.videoContainerTemp.getPowerVideoContainer();
                        createInfoDebugOverlay(this.adSlot, true);
                        Configs.videoAdClass[this.adSlot] = this; // Ads Controller

                        this.bidManager = null;
                        this.adsManager = null;
                        this.bidResponseDFP = null; // All View Check

                        this.placementViewPort = null;
                        this.adsViewPortDetect = null;
                        var adConfig = this.initConfig.vid.template.adConfig;
                        this.bidConfig = {
                            curAds: 0,
                            // ads showed
                            maxAds: 1,
                            // total ads
                            curRequest: 0,
                            maxRequest: adConfig.vastRetry,
                            delay: adConfig.delay ? adConfig.delay * 1000 : 0
                        };
                        this.timerRefreshAds = null; // this.videoContainerTemp.hideAdsWrapper();

                        this.initBidManager();
                    }
                }, {
                    key: "increaseDistanceBottomFloating",
                    value: function increaseDistanceBottomFloating(data) {
                        try {
                            this.pwlog("Increase distance Bottom for slot ".concat(this.adSlot));

                            if (!this.videoContainerTemp || !data) {
                                return;
                            }

                            if (this.videoContainerTemp.marginBottomDistance > data.heightBid) {
                                return;
                            }

                            var offset = utlis_mobileDetect() ? 40 : 10;
                            this.videoContainerTemp.marginBottomDistance = data.heightBid + offset;
                            this.videoContainerTemp.powerTopWrapper.style.bottom = "".concat(data.heightBid + offset, "px");
                        } catch (error) {}
                    }
                }, {
                    key: "reductionDistanceBottomFloating",
                    value: function reductionDistanceBottomFloating() {
                        try {
                            this.pwlog("Reduction distance Bottom for slot ".concat(this.adSlot));

                            if (!this.videoContainerTemp) {
                                return;
                            }

                            this.videoContainerTemp.setDefaultDistanceBottomFloating();
                        } catch (error) {}
                    }
                }, {
                    key: "processHeavyAds",
                    value: function processHeavyAds() {
                        this.pwlog("Process Heavy Ads with adsSlot: " + this.adSlot); // remove and init new content html

                        if (this.placementAdsSlot) {
                            this.placementAdsSlot.innerHTML = "";
                            this.placementAdsSlot.style.cssText = "";
                        }

                        this.videoContainerTemp = null;
                        this.adsPlaceholder = null; // Clear View Port

                        if (this.placementViewPort) {
                            this.placementViewPort.clear();
                            this.placementViewPort = null;
                        }

                        if (this.adsViewPortDetect) {
                            this.adsViewPortDetect.clear();
                            this.adsViewPortDetect = null;
                        } // remove timer


                        if (this.timerRefreshAds) {
                            this.timerRefreshAds.pause();
                            this.timerRefreshAds = null;
                        }

                        this.init();
                    }
                }, {
                    key: "initBidManager",
                    value: function initBidManager() {
                        var _this = this;

                        this.pwlog("Init BidManger");
                        var playerSize = this.videoContainerTemp.getFullSizeWrapper();

                        if (!playerSize) {
                            this.pwlog("Player Size is Empty");
                            return;
                        }

                        var adUnitList = []; // Bid PinZone

                        var adunit = this.initConfig.adunit;
                        adunit.code = this.adSlot + "_instream";
                        adunit.bids = adunit.bids ? adunit.bids : [];
                        if (!adunit.mediaTypes) adunit.mediaTypes = mediaTypesAdFormatVideo("videodiscovery", playerSize);
                        adUnitList.push(adunit); // Check Ad In Out Of View
                        // Use Process Video BG:    // this.placementAdsSlot

                        this.placementViewPort = newViewPortDetect(this.powerVideoContainer, {
                            threshold: [51]
                        }, false);
                        this.placementViewPort.inViewPort(function () {
                            _this.isOutViewPlayer = false;

                            _this.videoContainerTemp.setFloatOnView();

                            _this.videoContainerTemp.deActiveFloating();

                            _this.playVideoBG();

                            if (_this.adsManager) _this.resizeAds();

                            _this.pwlog("placementViewPort ".concat(_this.adSlot, " - inViewPort."));
                        });
                        this.placementViewPort.outViewPort(function () {
                            _this.isOutViewPlayer = true;

                            _this.pwlog("placementViewPort ".concat(_this.adSlot, " - outViewPort."));

                            _this.videoContainerTemp.activeFloating();

                            if (_this.adsManager) _this.resizeAds();
                            if (!_this.videoContainerTemp.userAction.isFloating) _this.pauseVideoBG();
                        }); // Use Process Video Ads

                        this.adsViewPortDetect = newViewPortDetect(this.adsPlaceholder, {
                            threshold: [51]
                        }, false);
                        this.adsViewPortDetect.inViewPort(function () {
                            _this.pwlog("adsViewPortDetect ".concat(_this.adSlot, " - inViewPort."));

                            _this.isOutViewPlayer = false;
                            _this.initConfig.inViewPort = true; // if (this.bidManager.bidResponses.length > 0) this.processBids()

                            if (_this.bidConfig.curAds < _this.bidConfig.maxAds) {
                                if (!_this.adsManager && !_this.adsPlayer && _this.bidManager.bidResponses.length > 0) {
                                    _this.processBids();
                                } else if (!_this.adsManager && _this.adsPlayer && _this.bidManager.bidResponses.length <= 0) {
                                    _this.playVastX();

                                    _this.playerAdsManager = _this.adsPlayer;
                                }
                            }

                            _this.procesAdsInView();
                        });
                        this.adsViewPortDetect.outViewPort(function () {
                            _this.pwlog("adsViewPortDetect ".concat(_this.adSlot, " - outViewPort."));

                            _this.isOutViewPlayer = true;
                            _this.initConfig.inViewPort = false;

                            _this.procesAdsOutView();
                        });
                        this.adsViewPortDetect.inTab(function () {
                            // this.pwlog(`adsViewPortDetect ${this.adSlot} - inTab.`);
                            if (_this.adsManager && _this.initConfig.inViewPort && !_this.playerAdsManager.playerAdsManagerPause()) _this.adsManager.resume();
                            if (_this.timerRefreshAds) _this.timerRefreshAds.resume();
                        });
                        this.adsViewPortDetect.outTab(function () {
                            // this.pwlog(`adsViewPortDetect ${this.adSlot} - outTab.`);
                            if (_this.adsManager) _this.adsManager.pause();
                            if (_this.timerRefreshAds) _this.timerRefreshAds.pause();
                        }); // Create BidManger

                        this.bidManager = new helper_BidManager({
                            slotId: this.adSlot,
                            tagId: this.initConfig.zid,
                            floorPrice: this.initConfig.floorPrice,
                            adUnits: adUnitList,
                            adWidth: this.initConfig.w,
                            adHeight: this.initConfig.h,
                            tagWidth: this.initConfig.w,
                            tagHeight: this.initConfig.h,
                            viewPortDetect: this.adsViewPortDetect
                        }); // Process with heavy ads

                        _addEventListener("PINZONE_HEAVY_ADS", function (event) {
                            return _this.processHeavyAds();
                        });

                        setTimeout(function () {
                            _this.processRequestBid();
                        }, 1000);
                    } // Process + Request Bid + DFP + Render Ads

                }, {
                    key: "resetBidConfig",
                    value: function resetBidConfig() {
                        this.bidConfig.curAds = 0;
                        this.bidConfig.curRequest = 0;
                    }
                }, {
                    key: "processRequestBid",
                    value: function processRequestBid() {
                        this.bidConfig.curRequest++;

                        if (this.bidConfig.curRequest > this.bidConfig.maxRequest) {
                            this.pwlog("AdSlot " + this.adSlot + " request bid " + this.bidConfig.maxRequest + " times is maximum.");
                            return;
                        }

                        this.startNewAuction();
                    }
                }, {
                    key: "startNewAuction",
                    value: function startNewAuction() {
                        var _this2 = this;

                        this.pwlog("Start New Auction: " + this.adSlot + " - " + this.bidConfig.curRequest + " times.");
                        this.bidManager.requestBids(function (auctionIsEmptyBid) {
                            var isRequestDFP = !Configs.gbk && _this2.initConfig.dfpAdUnit ? true : false;

                            if (auctionIsEmptyBid && !isRequestDFP) {
                                _this2.pwlog("Bid Response is Empty and Not request to DFP...");

                                _this2.initAdRefreshTimer(true);

                                return;
                            }

                            if (_this2.bidManager.bidResponses.length <= 0 || _this2.initConfig.inViewPort) {
                                _this2.processBids();
                            }
                        });
                    }
                }, {
                    key: "processBids",
                    value: function processBids() {
                        var dfpAdUnitObj = !Configs.gbk && this.initConfig.dfpAdUnit ? processDfpAdUnit(this.initConfig.dfpAdUnit) : null;

                        if (dfpAdUnitObj) {
                            // Request to DFP with highest bid in all bid responses
                            this.pwlog("Request Bid to DFP on adSlot: " + this.adSlot);
                            this.bidResponseDFP = this.bidManager.getHighestBid(); // Process currency

                            var _ref = this.bidResponseDFP ? processRealCpm(this.bidResponseDFP.cpm, dfpAdUnitObj) : processRealCpm(this.initConfig.floorPrice, dfpAdUnitObj),
                                _ref2 = slicedToArray_default()(_ref, 2),
                                realCPM = _ref2[0],
                                granularityMultiplier = _ref2[1];

                            var dfpAdUnit = dfpAdUnitObj.dfpAdUnit ? dfpAdUnitObj.dfpAdUnit : ""; //

                            var TARGET_KEYS = PinZone_CONSTANTS.TARGET_KEYS;
                            var customParams = {};
                            customParams["pw_ref"] = Configs.refererDomainID ? Configs.refererDomainID + "_" + Configs.domainID : null;
                            customParams[TARGET_KEYS.ACCOUNT] = this.initConfig.targetGoogleAccount ? this.initConfig.targetGoogleAccount : "";
                            customParams[TARGET_KEYS.PW_NETWORK] = true;
                            customParams[TARGET_KEYS.PW_LINE_ID] = this.initConfig.targetLineId ? this.initConfig.targetLineId : "";
                            customParams[TARGET_KEYS.TARGET_ADSLOT] = this.initConfig.targetAdSlot ? this.initConfig.targetAdSlot : "";
                            var dfpConfig = {
                                adUnit: dfpAdUnit,
                                targetAccountId: this.initConfig.targetGoogleAccount || "",
                                targetAdSlot: this.initConfig.targetAdSlot || "",
                                customParams: customParams
                            }; //

                            if (this.bidResponseDFP) {
                                var ggBidAdj = this.initConfig.googleBidAdjustment ? parseFloat(this.initConfig.googleBidAdjustment) : 1;

                                if (Configs.listAmazonBidder.includes(this.bidResponseDFP.bidder)) {
                                    this.bidResponseDFP.adserverTargeting[TARGET_KEYS.PRICE_AMZ_VIDEO] = getCustomAPDPB(this.bidResponseDFP.mediaType, this.bidResponseDFP.adserverTargeting[TARGET_KEYS.PRICE_AMZ_VIDEO], granularityMultiplier, ggBidAdj);
                                } else {
                                    this.bidResponseDFP.adserverTargeting[TARGET_KEYS.PRICE_BUCKET] = getCustomAPDPB(this.bidResponseDFP.mediaType, realCPM, granularityMultiplier, ggBidAdj);
                                    dfpConfig.customParams[TARGET_KEYS.PRICE_BUCKET] = this.bidResponseDFP.adserverTargeting[TARGET_KEYS.PRICE_BUCKET];
                                }
                            } else {
                                if (realCPM > 0) {
                                    dfpConfig.customParams[TARGET_KEYS.PRICE_BUCKET] = getCustomAPDPB("video", realCPM, granularityMultiplier, 1);
                                }
                            }

                            this.playVast(dfpConfig);
                        } else {
                            this.playVast();
                        }
                    }
                }, {
                    key: "playVast",
                    value: function playVast() {
                        var _this3 = this;

                        var dfpConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
                        // this.videoContainerTemp.hideAdsWrapper();
                        this.pwlog("BidManager Get Highest Bid for adSlot: " + this.adSlot);
                        if (!dfpConfig) this.pwlog("BidManager Get Highest Bid for adSlot: " + this.adSlot);
                        var bidWon = dfpConfig ? this.bidResponseDFP : this.bidManager.getHighestBid();

                        if (!bidWon && !dfpConfig) {
                            this.pwlog("Bids is Empty for adSlot: " + this.adSlot);
                            this.initAdRefreshTimer(true);
                            return;
                        }

                        var adUnitCode = bidWon ? bidWon.adUnitCode : this.adSlot;
                        var wAdsPlayer = this.adsPlaceholder.offsetWidth ? this.adsPlaceholder.offsetWidth : this.initConfig.vid.template.appearance.maxWidth;
                        var hAdsPlayer = this.adsPlaceholder.offsetHeight ? this.adsPlaceholder.offsetHeight : wAdsPlayer * 0.5625; // 16:9

                        this.adsPlayer = new helper_AdPlayer({
                            baseDomain: Configs.rootDomain,
                            brandLogo: Configs.brandLogoBlack,
                            pixelManager: this.bidManager.pixelManager,
                            adElement: this.adsPlaceholder,
                            adWidth: wAdsPlayer,
                            adHeight: hAdsPlayer,
                            skipRequired: false,
                            showVolumeControl: true,
                            defaultVolume: this.videoContainerTemp.userAction.isMuted ? 0 : 1,
                            showProgressBar: false,
                            isPinZone: true
                        }); // Callback Dedug Overlay

                        this.adsPlayer.setCallBacks({
                            started: function started() {
                                if (_this3.bidResponseDFP) {
                                    // => DFP win
                                    var dataBid = {
                                        adId: bidWon ? bidWon.adId : "unknown from Adx",
                                        bidder: bidWon ? bidWon.bidder : "Adx",
                                        creativeId: bidWon ? bidWon.creativeId : "unknown from Adx"
                                    };
                                    pushInfoDebugOverlay(_this3.adSlot, dataBid);
                                    _this3.bidResponseDFP = null;
                                } else {
                                    pushInfoDebugOverlay(_this3.adSlot, bidWon);
                                } // Create Report Observer for Heavy Ads


                                var iframeAd = _this3.adsPlaceholder.getElementsByTagName("iframe")[0];

                                var jData = {
                                    creativeId: bidWon && bidWon.creativeId ? bidWon.creativeId : null,
                                    adFormat: "PinZone"
                                };
                                if (iframeAd) reportingObserver(iframeAd, jData);
                            }
                        }); // Callback Play Ads

                        this.adsPlayer.setCallBacks({
                            started: function started(adEvent) {
                                _this3.bidConfig.isAdsPlaying = true;

                                _this3.pwlog("Vast Event Started on adSlot: " + adUnitCode);

                                _this3.pauseVideoBG();

                                _this3.addRenderAdsCss();

                                if (_this3.initConfig.inViewPort) {
                                    _this3.procesAdsInView();
                                } else {
                                    _this3.procesAdsOutView();
                                }

                                _this3.adIsRunning = true; // Play Ads Succ => reset bidResponses

                                _this3.bidManager.bidResponses = [];
                                _this3.bidConfig.curAds++;
                            },
                            impression: function impression() {
                                _this3.pwlog("Vast Event Impression on adSlot: " + adUnitCode);

                                _this3.videoContainerTemp.hideAdsWrapper();
                            },
                            complete: function complete() {
                                _this3.pwlog("Vast Event Complete on adSlot: " + adUnitCode);

                                _this3.clearAds();

                                _this3.initAdRefreshTimer();

                                _this3.bidConfig.isAdsPlaying = false;
                            },
                            hidden: function hidden() {
                                if (!_this3.bidConfig.isAdsPlaying) {
                                    _this3.adsManager.callError();
                                } else {
                                    _this3.pwlog("Vast Event Hidden on adSlot: " + adUnitCode);

                                    _this3.clearAds();

                                    _this3.initAdRefreshTimer();

                                    cleanInfoDebugOverlay(_this3.adSlot);
                                }
                            },
                            paused: function paused() {
                                _this3.pwlog("Vast Event Paused on adSlot: " + adUnitCode);
                            },
                            resumed: function resumed() {
                                _this3.pwlog("Vast Event Resume on adSlot: " + adUnitCode);
                            },
                            error: function error(_error) {
                                // Bid request to DFP error -> add and recheck to show all bid response
                                if (_this3.bidResponseDFP) {
                                    _this3.pwlog("Request Bid to DFP on adSlot: " + adUnitCode + " with Error: " + _error);

                                    _this3.bidManager.addBidToArray(_this3.bidResponseDFP);

                                    _this3.bidResponseDFP = null;
                                } else {
                                    _this3.pwlog("Vast Event Error code: " + _error + " on adSlot: " + adUnitCode);
                                }

                                if (_this3.bidManager.bidResponses.length <= 0) {
                                    _this3.clearAds();
                                }

                                _this3.playVast();
                            },
                            adsVolumeChange: function adsVolumeChange(volume) {
                                // 0 -> mute | 1 -> unmute
                                _this3.videoContainerTemp.toggleMute(volume == 0 ? true : false);
                            }
                        });

                        if (this.isOutViewPlayer) {
                            this.curBidWon = bidWon;
                            this.dfpConfig = dfpConfig;
                            this.processRequestBid();
                            return;
                        }

                        this.adsManager = this.adsPlayer.play({
                            bidWon: bidWon,
                            dfp: dfpConfig
                        });
                        this.playerAdsManager = this.adsPlayer;
                    }
                }, {
                    key: "playVastX",
                    value: function playVastX() {
                        if (!this.adsPlayer && !this.curBidWon && this.dfpConfig) return;
                        this.pwlog("=> Play Vast on adSlot: " + this.adSlot);
                        this.adsManager = this.adsPlayer.play({
                            bidWon: this.curBidWon,
                            dfp: this.dfpConfig
                        });
                    }
                }, {
                    key: "clearAds",
                    value: function clearAds() {
                        this.adsManager = null;
                        this.removeRenderAds();
                        this.videoContainerTemp.showAdsWrapper();
                        this.videoContainerTemp.hideAdsHolder();

                        if (this.videoContainerTemp.userAction.isNotAutoPlay) {
                            return;
                        }

                        if (this.bidManager.bidResponses.length <= 0 && this.initConfig.inViewPort && !this.isOutViewPlayer && (this.videoContainerTemp.userAction.isPlayAfterAds || this.videoContainerTemp.userAction.isAutoPlayAd)) {
                            this.playVideoBG();
                        }
                    }
                }, {
                    key: "procesAdsInView",
                    value: function procesAdsInView() {
                        if (!this.adsManager) return;
                        this.resizeAds();

                        if (!this.playerAdsManager.playerAdsManagerPause()) {
                            this.adsManager.resume();
                        }
                    }
                }, {
                    key: "procesAdsOutView",
                    value: function procesAdsOutView() {
                        if (!this.adsManager) return;
                        this.resizeAds();
                        this.adsManager.pause();
                    }
                }, {
                    key: "resizeAds",
                    value: function resizeAds() {
                        var adViewmode = this.videoContainerTemp.userAction.isFullscreen ? "FULLSCREEN" : "NORMAL";

                        if (this.videoContainerTemp.userAction.isFloating) {
                            var wAdsPlayer = !utlis_mobileDetect() ? this.initConfig.vid.template.appearance.floatingSetting ? this.initConfig.vid.template.appearance.floatingSetting.width : 0 : this.initConfig.vid.template.mobileConfig ? this.initConfig.vid.template.mobileConfig.width : 0;
                            var hAdsPlayer = wAdsPlayer * 0.5625; // 16:9

                            if (this.adsManager) this.adsManager.resize(wAdsPlayer, hAdsPlayer, adViewmode);
                        } else {
                            var _wAdsPlayer = this.videoContainerTemp.getWidth();

                            var _hAdsPlayer = _wAdsPlayer * 0.5625; // 16:9


                            if (this.adsManager) this.adsManager.resize(_wAdsPlayer, _hAdsPlayer, adViewmode);
                        }
                    }
                }, {
                    key: "initAdRefreshTimer",
                    value: function initAdRefreshTimer() {
                        var _this4 = this;

                        var isBidEmpty = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

                        if (this.timerRefreshAds || //turn off request bid when maxRequest is reached and no ads
                            !this.bidConfig.curAds && this.bidConfig.curRequest >= this.bidConfig.maxRequest) {
                            return;
                        }

                        if (this.bidConfig.curAds == this.bidConfig.maxAds || this.bidConfig.curRequest >= this.bidConfig.maxRequest) {
                            this.pwlog("Init AdsRefreshTimer for adSlot ".concat(this.adSlot, " call after ").concat(this.bidConfig.delay / 1000, "s"));
                            this.timerRefreshAds = new TimerDelay(function () {
                                _this4.pwlog("AdRefresh timeout on adSlot ".concat(_this4.adSlot, " at time is ").concat(Math.floor(Date.now() / 1000), " => Start new Auction."));

                                _this4.timerRefreshAds.pause();

                                _this4.timerRefreshAds = null;

                                _this4.resetBidConfig();

                                _this4.processRequestBid();
                            }, this.bidConfig.delay);
                            this.timerRefreshAds.start();
                        } else {
                            // Chua full request -> request lai
                            this.processRequestBid();
                        }
                    } // Ads Render Handle

                }, {
                    key: "addRenderAdsCss",
                    value: function addRenderAdsCss() {
                        if (!this.adsPlaceholder) return;
                        this.adsPlaceholder.style.cssText = "z-index: 999999!important; position: absolute!important; width: 100%!important; height: 100%!important; top: 0!important; left: 0!important; display:block!important;padding:0!important;margin:0!important";
                    }
                }, {
                    key: "removeRenderAds",
                    value: function removeRenderAds() {
                        this.adsPlaceholder.innerHTML = "";
                    } // Video Background Controller

                }, {
                    key: "playVideoBG",
                    value: function playVideoBG() {
                        if (this.adsManager || this.videoContainerTemp.userAction.isNotAutoPlay || this.videoContainerTemp.userAction.isPlayAfterAds && this.adIsRunning == false) return;
                        this.videoContainerTemp.playPinZone();
                    }
                }, {
                    key: "pauseVideoBG",
                    value: function pauseVideoBG() {
                        this.videoContainerTemp.pause();
                    }
                }, {
                    key: "getPlacementByAdSlot",
                    value: function getPlacementByAdSlot(adSlot) {
                        if (!adSlot) return;
                        var placement = null;
                        var availableSlots = document.getElementsByClassName(Configs.adClass);
                        if (availableSlots.length === 0) return;

                        for (var i = 0; i < availableSlots.length; i++) {
                            var slotElem = availableSlots[i];
                            if (slotElem.dataset.adSlot !== adSlot) continue;
                            if (slotElem.hasChildNodes()) continue;
                            placement = slotElem;
                            break;
                        }

                        return placement;
                    }
                }, {
                    key: "renderPinZone",
                    value: function renderPinZone() {
                        var videoContainerTemp = new PinZoneTemplate_PinZoneTemplate({
                            placementAdSlot: this.placementAdsSlot,
                            config: this.initConfig.vid,
                            opts: this.opts
                        });
                        return videoContainerTemp;
                    }
                }]);

                return PinZone;
            }();


            Object.assign(PinZone_PinZone.prototype, mixinLog);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/asyncToGenerator.js
            var asyncToGenerator = __webpack_require__(79);
            var asyncToGenerator_default = /*#__PURE__*/__webpack_require__.n(asyncToGenerator);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js
            var regenerator = __webpack_require__(24);
            var regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);

// EXTERNAL MODULE: ./src/plugins/template/video/html/relatedzone/template.html
            var relatedzone_template = __webpack_require__(25);
            var relatedzone_template_default = /*#__PURE__*/__webpack_require__.n(relatedzone_template);

// EXTERNAL MODULE: ./src/plugins/template/video/html/relatedzone/template2.html
            var template2 = __webpack_require__(80);
            var template2_default = /*#__PURE__*/__webpack_require__.n(template2);

// EXTERNAL MODULE: ./src/plugins/template/video/html/relatedzone/template3.html
            var template3 = __webpack_require__(81);
            var template3_default = /*#__PURE__*/__webpack_require__.n(template3);

// EXTERNAL MODULE: ./src/plugins/template/video/html/relatedzone/quizz/quizz1.html
            var quizz1 = __webpack_require__(82);
            var quizz1_default = /*#__PURE__*/__webpack_require__.n(quizz1);

// EXTERNAL MODULE: ./src/plugins/template/video/html/relatedzone/quizz/quizz1ask.html
            var quizz1ask = __webpack_require__(83);
            var quizz1ask_default = /*#__PURE__*/__webpack_require__.n(quizz1ask);

// EXTERNAL MODULE: ./src/plugins/template/video/html/relatedzone/quizz/quizz2ask.html
            var quizz2ask = __webpack_require__(84);
            var quizz2ask_default = /*#__PURE__*/__webpack_require__.n(quizz2ask);

// EXTERNAL MODULE: ./src/plugins/template/video/html/relatedzone/detail.html
            var detail = __webpack_require__(15);
            var detail_default = /*#__PURE__*/__webpack_require__.n(detail);

// EXTERNAL MODULE: ./src/plugins/template/video/css/relatedzone.css
            var relatedzone = __webpack_require__(85);
            var relatedzone_default = /*#__PURE__*/__webpack_require__.n(relatedzone);

// CONCATENATED MODULE: ./src/plugins/RelatedZone.js






















            var RelatedZone_onHiddenPowerIcon = new utlis_HandleLog();
            var RelatedZone_onShowPowerIcon = new utlis_HandleLog();
            var RelatedZone_adSlots = [];

            var RelatedZone_RelatedZone = /*#__PURE__*/function () {
                function RelatedZone(adSlot) {
                    var _config$totalAds, _config$layoutType, _config$contentType, _templateConfig$layou;

                    classCallCheck_default()(this, RelatedZone);

                    if (!adSlot) {
                        this.logMess("adSlot is Empty...");
                        return;
                    }

                    var isExit = document.getElementsByClassName("power_relatedzone_" + adSlot + "__wrapper")[0];

                    if (isExit) {
                        this.logMess("RelatedZone is already exist...");
                        return;
                    } // Init Config


                    this.initConfig = Configs.adsTags.relatedZone[adSlot];

                    if (!this.initConfig) {
                        this.logMess("Config is Empty...");
                        return;
                    }

                    var query = window.location.search.substring(1);
                    var config = this.parse_query_string(query);
                    var templateConfig = this.initConfig.detail.template;
                    this.initConfig.detail.template.totalAds = (_config$totalAds = config.totalAds) !== null && _config$totalAds !== void 0 ? _config$totalAds : templateConfig.totalAds;
                    this.initConfig.detail.template.layoutType = (_config$layoutType = config.layoutType) !== null && _config$layoutType !== void 0 ? _config$layoutType : templateConfig.layoutType;
                    this.initConfig.detail.template.contentType = (_config$contentType = config.contentType) !== null && _config$contentType !== void 0 ? _config$contentType : templateConfig.contentType;
                    this.slotId = adSlot;
                    this.initConfig.layoutType = (_templateConfig$layou = templateConfig.layoutType) !== null && _templateConfig$layou !== void 0 ? _templateConfig$layou : 1;
                    this.initConfig.floorPrice = isNaN(parseFloat(this.initConfig.floorPrice)) ? 0 : parseFloat(this.initConfig.floorPrice);
                    this.initConfig.isInit = false; // Init Status: true -> succ

                    this.askIDStr = "askID_";
                    this.percentBarIDStr = "percentBarID_";
                    this.type = {
                        Related: "Related",
                        Quizz: "Quizz",
                        QuizzPic: "QuizzPic"
                    };

                    if (templateConfig.contentType == 1) {
                        this.initConfig.contentType = this.type.Related;
                    } else if (templateConfig.contentType == 2) {
                        this.initConfig.contentType = this.type.Quizz;
                    } else if (templateConfig.contentType == 3) {
                        this.initConfig.contentType = this.type.QuizzPic;
                    } // RelatedZone Setting Final


                    this.adSlot = "".concat(this.initConfig.adSlot);
                    this.relatedZoneSetting = {}; // All RelatedZone Element

                    this.iframeRelatedZoneWrapper = null;
                    this.ifrRelatedZoneWrapper = null;
                    this.ifrRelatedZone1 = null;
                    this.ifrRelatedZone2 = null;
                    this.ifrRelatedFooter1 = null;
                    this.ifrRelatedFooter2 = null;
                    this.ifrAdsPlaceholderWrapperAll = null;
                    this.ifrAdsPlaceholderWrapper1 = null;
                    this.ifrAdsPlaceholderWrapper2 = null;
                    this.ifrAdsPlaceholder1 = null;
                    this.ifrAdsPlaceholder2 = null;
                    this.powerAds1 = null;
                    this.powerAds2 = null; // Active view event quiz change question

                    this.maxTimeActiveView = 10;
                    this.curTimeActiveView = 0;
                    this.timeInterval = null;
                    this.placementViewPort = null; // All Quizz Element

                    this.progressbarID = null;
                    this.feedBackUnLikeID = null;
                    this.feedBackLikeID = null;
                    this.questionID = null;
                    this.answerID = null;
                    this.skipBtnID = null;
                    this.imgBgID = null;
                    this.listAskElem = []; // List Question

                    this.listQues = [];
                    this.curQues = 0; // Request Content

                    this.maxTime = 3; // max time (10request/time)

                    this.curTime = 0;
                    this.curRequest = 0;
                    this.delay = 10000; // delay time (10ms)

                    this.getContentData();
                }

                createClass_default()(RelatedZone, [{
                    key: "parse_query_string",
                    value: function parse_query_string(query) {
                        var vars = query.split("&");
                        var query_string = {};

                        for (var i = 0; i < vars.length; i++) {
                            var pair = vars[i].split("=");
                            var key = decodeURIComponent(pair.shift());
                            var value = decodeURIComponent(pair.join("=")); // If first entry with this name

                            if (typeof query_string[key] === "undefined") {
                                query_string[key] = value; // If second entry with this name
                            } else if (typeof query_string[key] === "string") {
                                var arr = [query_string[key], value];
                                query_string[key] = arr; // If third or later entry with this name
                            } else {
                                query_string[key].push(value);
                            }
                        }

                        return query_string;
                    }
                }, {
                    key: "scaleToFill",
                    value: function scaleToFill(videoTag) {
                        var $video = $(videoTag),
                            videoRatio = videoTag.videoWidth / videoTag.videoHeight,
                            tagRatio = $video.width() / $video.height();

                        if (videoRatio < tagRatio) {
                            $video.css('-webkit-transform', 'scaleX(' + tagRatio / videoRatio + ')');
                        } else if (tagRatio < videoRatio) {
                            $video.css('-webkit-transform', 'scaleY(' + videoRatio / tagRatio + ')');
                        }
                    } // Process Task Quizz

                }, {
                    key: "changeQuizz10s",
                    value: function changeQuizz10s() {
                        this.curTimeActiveView++; // this.logMess(`Current time active view ${this.curTimeActiveView}s`);

                        if (this.curTimeActiveView == this.maxTimeActiveView) {
                            this.curTimeActiveView = 0; // this.logMess(`Timeout ${this.maxTimeActiveView}s Quizz`);

                            this.curQues = 0;
                            this.listQues = shuffleArray(this.listQues);
                            this.setupQuestion();
                        }
                    } // Setup new question

                }, {
                    key: "resetQues",
                    value: function resetQues() {
                        this.questionID.classList.remove("hide_question");
                        this.progressbarID.classList.remove("result_next_ques"); // Show unlike or like

                        this.feedBackLikeID.style.display = "none";
                        this.feedBackLikeID.classList.remove("show");
                        this.feedBackUnLikeID.style.display = "none";
                        this.feedBackUnLikeID.classList.remove("show"); // run processbar

                        var progressindicator = this.progressbarID.querySelector(".pp_progressindicator");
                        progressindicator.classList.remove("direc_leftToRight");
                    }
                }, {
                    key: "setupQuestion",
                    value: function setupQuestion() {
                        var _this = this;

                        var quesObj = this.listQues[this.curQues];

                        if (quesObj) {
                            this.resetQues(); // Ques

                            var h3Txt = this.questionID.querySelector("h3");
                            h3Txt.innerText = quesObj.ques; // Img Background

                            if (quesObj.imgBG && quesObj.imgBG != "") {
                                var quizzImg = this.imgBgID.querySelector(".pp_quizz_img");
                                if (quizzImg) quizzImg.style.backgroundImage = "url(".concat(quesObj.imgBG, ")");
                            } // Ask


                            var isQuizz = this.initConfig.contentType == this.type.Quizz;
                            var askObj = quesObj.ask;
                            var askHtml = "<ul>";

                            for (var i = 0; i < askObj.length; i++) {
                                if (isQuizz) {
                                    var askContent = {
                                        askID: this.askIDStr + askObj[i].id,
                                        txtAsk: askObj[i].val,
                                        percentBarID: this.percentBarIDStr + askObj[i].id
                                    };
                                    askHtml += handleBarsCustom(quizz1ask_default.a, askContent);
                                } else {
                                    var _askContent = {
                                        askID: this.askIDStr + askObj[i].id,
                                        txtAsk: askObj[i].val,
                                        imgAsk: askObj[i].img,
                                        percentBarID: this.percentBarIDStr + askObj[i].id
                                    };
                                    askHtml += handleBarsCustom(quizz2ask_default.a, _askContent);
                                }
                            }

                            askHtml += "</ul>";
                            this.answerID.innerHTML = askHtml; // Add Click event Ask

                            var documentTemp = this.iframeRelatedZoneWrapper.contentWindow.document;

                            for (var j = 0; j < askObj.length; j++) {
                                var askElem = documentTemp.getElementById(this.askIDStr + askObj[j].id);
                                var askFunc = this.processQuizzResult.bind(this, askElem);
                                var mouseoverFunc = this.processMouseOver.bind(this, askElem);
                                var mouseoutFunc = this.processMouseOut.bind(this, askElem);
                                this.listAskElem.push({
                                    id: askObj[j].id,
                                    elem: askElem,
                                    askFunc: askFunc,
                                    mouseoverFunc: mouseoverFunc,
                                    mouseoutFunc: mouseoutFunc
                                });
                            } // Set delay event for Ask


                            this.skipBtnID.classList.remove("hidden-true");
                            setTimeout(function () {
                                for (var k = 0; k < _this.listAskElem.length; k++) {
                                    var ask = _this.listAskElem[k];
                                    ask.elem.addEventListener("mouseover", ask.mouseoverFunc);
                                    ask.elem.addEventListener("mouseout", ask.mouseoutFunc);
                                    ask.elem.addEventListener("click", ask.askFunc);
                                }
                            }, 1800);
                        } else {
                            this.curQues = 0;
                            this.listQues = shuffleArray(this.listQues);
                            this.setupQuestion();
                        }
                    }
                }, {
                    key: "processQuizzResult",
                    value: function () {
                        var _processQuizzResult = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee(askElemChosed) {
                            var _this2 = this;

                            var ques, askchoiseID, isCorrect, askID, askchoise, isQuizzPic, _loop, j;

                            return regenerator_default.a.wrap(function _callee$(_context) {
                                while (1) {
                                    switch (_context.prev = _context.next) {
                                        case 0:
                                            if (askElemChosed) {
                                                _context.next = 2;
                                                break;
                                            }

                                            return _context.abrupt("return");

                                        case 2:
                                            // Hide skip btn
                                            this.skipBtnID.classList.add("hidden-true");
                                            ques = this.listQues[this.curQues];
                                            askchoiseID = askElemChosed.id;
                                            isCorrect = askchoiseID == this.askIDStr + ques.correct; // Count Choise Ask

                                            askID = askchoiseID.replace(this.askIDStr, "");
                                            countQuizResult(this.slotId, ques.id, askID);
                                            _context.next = 10;
                                            return this.getAskChoise(ques.correct);

                                        case 10:
                                            askchoise = _context.sent;

                                            if (!askchoise) {
                                                askchoise = [];
                                                ques.ask.forEach(function (ask) {
                                                    askchoise.push({
                                                        askId: ask.id,
                                                        value: ask.id == ques.correct ? 100 : 0
                                                    });
                                                });
                                            }

                                            isQuizzPic = this.initConfig.contentType == this.type.QuizzPic; // Remove All Event Click Ask

                                            _loop = function _loop(j) {
                                                var ask = _this2.listAskElem[j];
                                                var askElem = ask.elem;
                                                var percentagebar = askElem.querySelector("#percentBarID_" + ask.id);
                                                percentagebar.classList.add("finished-true");
                                                var askChoi = askchoise.filter(function (askChoi) {
                                                    return askChoi.askId == ask.id;
                                                })[0]; // ques.askchoise[j];

                                                var percentVal = askChoi ? askChoi.value : 0;

                                                if (isQuizzPic) {
                                                    var askEleH = askElem.offsetHeight;
                                                    askElem.classList.add("finished-true");
                                                    var barVertical = askElem.querySelector(".bar_vertical");
                                                    barVertical.style.display = "block";
                                                    var percent = percentagebar.querySelector(".percent_vertical");
                                                    percent.innerText = "".concat(percentVal, "%");
                                                    var imgWrapper = askElem.querySelector(".quizzpic_img_wrapper");
                                                    var maxHVertical = askEleH - 10 - imgWrapper.offsetHeight; // 10px padding

                                                    var foreground = percentagebar.querySelector(".foreground_vertical");
                                                    foreground.style.height = "".concat(percentVal * maxHVertical / 100, "%"); // Run animation after calulator size of bar

                                                    imgWrapper.style.transform = "scale(.7) translate(-72%,-".concat(askEleH, "%)");
                                                    imgWrapper.style.transition = "transform .5s linear .3s";
                                                } else {
                                                    var _foreground = percentagebar.querySelector(".foreground");

                                                    _foreground.style.width = "".concat(percentVal, "%");

                                                    var _percent = percentagebar.querySelector(".percent");

                                                    _percent.innerText = "".concat(percentVal, "%");
                                                }

                                                if (askElem.id == askchoiseID && isCorrect) {
                                                    percentagebar.classList.add("selected-true");
                                                    percentagebar.classList.add("correct-true");
                                                } else if (askElem.id == askchoiseID && !isCorrect) {
                                                    percentagebar.classList.add("selected-true");
                                                    percentagebar.classList.add("correct-false");
                                                } else if (askElem.id == _this2.askIDStr + ques.correct) {
                                                    percentagebar.classList.add("selected-false");
                                                    percentagebar.classList.add("correct-true");
                                                }

                                                askElem.style.cursor = "unset";
                                                askElem.removeEventListener("click", ask.askFunc);
                                                askElem.removeEventListener("mouseover", ask.mouseoverFunc);
                                                askElem.removeEventListener("onmouseout", ask.mouseoutFunc);
                                            };

                                            for (j = 0; j < this.listAskElem.length; j++) {
                                                _loop(j);
                                            }

                                            ; // Show Process for Next Question

                                            setTimeout(function () {
                                                _this2.questionID.classList.add("hide_question");

                                                _this2.progressbarID.classList.add("result_next_ques"); // Show unlike or like


                                                if (isCorrect) {
                                                    _this2.feedBackLikeID.style.display = "block";

                                                    _this2.feedBackLikeID.classList.add("show");
                                                } else {
                                                    _this2.feedBackUnLikeID.style.display = "block";

                                                    _this2.feedBackUnLikeID.classList.add("show");
                                                } // run processbar


                                                var progressindicator = _this2.progressbarID.querySelector(".pp_progressindicator");

                                                progressindicator.classList.add("direc_leftToRight");
                                                _this2.curQues++;
                                                setTimeout(function () {
                                                    _this2.listAskElem = [];

                                                    _this2.setupQuestion();
                                                }, 4500);
                                            }, 500);

                                        case 17:
                                        case "end":
                                            return _context.stop();
                                    }
                                }
                            }, _callee, this);
                        }));

                        function processQuizzResult(_x) {
                            return _processQuizzResult.apply(this, arguments);
                        }

                        return processQuizzResult;
                    }() // Quizz Mouver Event

                }, {
                    key: "processMouseOver",
                    value: function processMouseOver(askElem) {
                        if (!askElem) return;

                        if (this.initConfig.contentType == this.type.Quizz) {
                            askElem.style.background = "rgba(255, 255, 255, 0.35)";
                        } else {
                            askElem.style.transform = "scale(1.1, 1.1)";
                        }
                    }
                }, {
                    key: "processMouseOut",
                    value: function processMouseOut(askElem) {
                        if (!askElem) return;

                        if (this.initConfig.contentType == this.type.Quizz) {
                            askElem.style.background = null;
                        } else {
                            askElem.style.transform = "scale(1, 1)";
                        }
                    } // Init View + Bids Manager

                }, {
                    key: "processLayout1",
                    value: function processLayout1() {
                        try {
                            var totalAds = this.relatedZoneSetting.totalAds;
                            var adsWidth = 316; // min-width: 130px thumbnail

                            var minRelatedZoneW = 180; // min-width: 210px RelatedZone

                            var padding1SideAdsPlacement = 15 * totalAds;
                            var paddingBodyInSideIframe = 8 * totalAds;
                            var col2W = adsWidth * 2 + minRelatedZoneW + padding1SideAdsPlacement + paddingBodyInSideIframe;
                            var col1W = adsWidth + minRelatedZoneW + padding1SideAdsPlacement + paddingBodyInSideIframe;
                            var maxH = 300; // 300 iframe + padding 8 * 2

                            var colNums = 0;
                            var iframeW = this.iframeRelatedZoneWrapper.getBoundingClientRect().width;

                            if (iframeW >= col2W) {
                                colNums = 2;
                            } else if (iframeW >= col1W && iframeW < col2W) {
                                colNums = 1;
                            } else if (iframeW < col1W) {
                                colNums = 0;
                            }

                            colNums = colNums <= totalAds ? colNums : totalAds; // this.logMess(`colNum: ${colNums}`);

                            var maxW = this.iframeRelatedZoneWrapper.parentElement.offsetWidth;
                            var minW = 350;
                            if (totalAds == 1) maxW = 670;else if (totalAds == 2) maxW = 954;
                            this.ifrRelatedZoneWrapper.style.flexWrap = "";
                            this.ifrAdsPlaceholderWrapper2.classList.add("adsPlaceholder2_horizontal");
                            this.ifrAdsPlaceholderWrapper2.classList.remove("adsPlaceholder2_vertical");
                            this.ifrRelatedZone1.classList.remove("relatedzone_vertical");

                            if (colNums == 2) {
                                this.ifrAdsPlaceholderWrapper1.style.display = "block";
                                this.ifrAdsPlaceholderWrapper2.style.display = "block";
                                this.powerAds1.style.display = "block";
                                this.powerAds2.style.display = "block";
                            } else if (colNums == 1) {
                                this.ifrAdsPlaceholderWrapper1.style.display = "none";
                                this.ifrAdsPlaceholderWrapper2.style.display = "block";
                                this.powerAds1.style.display = "none";
                                this.powerAds2.style.display = "block";
                                this.ifrAdsPlaceholderWrapper2.classList.remove("max_width");
                            } else {
                                this.powerAds1.style.display = "none";
                                this.ifrAdsPlaceholderWrapper1.style.display = "none";
                                maxH += 270; // 300 => adsPlaceholder

                                this.ifrRelatedZoneWrapper.style.flexWrap = "wrap";
                                this.ifrRelatedZone1.classList.add("relatedzone_vertical");
                                this.ifrAdsPlaceholderWrapper2.classList.remove("adsPlaceholder2_horizontal");
                                this.ifrAdsPlaceholderWrapper2.classList.add("adsPlaceholder2_vertical");
                                this.ifrAdsPlaceholderWrapper2.classList.add("margin_center");
                            }

                            this.iframeRelatedZoneWrapper.style.cssText = "max-width: ".concat(maxW, "px !important;\n                                                            min-width: ").concat(minW, "px !important;\n                                                            width: 100% !important;\n                                                            height: ").concat(maxH, "px !important;\n                                                            display: block !important;\n                                                            margin: 0px auto !important;\n                                                            border: 0px !important;");
                            var PADDING_CUT_OFF = 10;
                            var topAdsPlace = this.iframeRelatedZoneWrapper.offsetTop + (this.ifrAdsPlaceholderWrapper2.offsetHeight - 250) + 13;
                            var leftAdsPlace1 = this.iframeRelatedZoneWrapper.offsetLeft + 16;
                            var leftAdsPlace2 = this.iframeRelatedZoneWrapper.offsetLeft + (this.iframeRelatedZoneWrapper.offsetWidth - adsWidth);

                            if (colNums == 0) {
                                this.ifrAdsPlaceholderWrapper2.classList.remove("margin_center");
                                topAdsPlace = this.iframeRelatedZoneWrapper.offsetTop + (this.iframeRelatedZoneWrapper.offsetHeight - 250) - 13;
                                var padding1Side = Math.floor((this.iframeRelatedZoneWrapper.offsetWidth - this.ifrAdsPlaceholder2.offsetWidth) * 0.5);
                                var minPadding = PADDING_CUT_OFF * 2 + 2;
                                padding1Side = padding1Side > 0 && padding1Side >= PADDING_CUT_OFF * 2 + 2 ? padding1Side : minPadding;
                                leftAdsPlace2 = this.iframeRelatedZoneWrapper.offsetLeft + padding1Side;
                            }

                            this.powerAds1.style.top = "".concat(topAdsPlace, "px");
                            this.powerAds1.style.left = "".concat(leftAdsPlace1, "px");
                            this.powerAds2.style.top = "".concat(topAdsPlace, "px");
                            this.powerAds2.style.left = "".concat(leftAdsPlace2, "px");
                        } catch (e) {
                            this.logMess("Err processLayout1: ".concat(e));
                        }
                    }
                }, {
                    key: "processLayout2",
                    value: function processLayout2() {
                        try {
                            var isRelated = this.initConfig.contentType == this.type.Related;
                            var totalAds = this.relatedZoneSetting.totalAds;
                            var adsWidth = 316; // min-width: 130px thumbnail

                            var minRelatedZoneW = 180; // min-width: 210px RelatedZone

                            var padding1SideAdsPlacement = 15 * totalAds;
                            var paddingBodyInSideIframe = 8 * totalAds;
                            var col1W = adsWidth + minRelatedZoneW + padding1SideAdsPlacement + paddingBodyInSideIframe;
                            var layoutType = this.initConfig.layoutType;
                            var colNums = 0;
                            var iframeW = this.iframeRelatedZoneWrapper.getBoundingClientRect().width;

                            if (iframeW >= col1W) {
                                colNums = 1;
                            } else if (iframeW < col1W) {
                                colNums = 0;
                            }

                            colNums = colNums <= totalAds ? colNums : totalAds; // this.logMess(`colNum: ${colNums}`);

                            var maxW = this.iframeRelatedZoneWrapper.parentElement.offsetWidth;
                            var minW = 350;
                            var maxH = isRelated ? 580 : 653; // 300 iframe + padding 8 * 2

                            if (totalAds == 1) maxW = 670;else if (totalAds == 2) maxW = 954;

                            if (isRelated) {
                                maxH = this.ifrRelatedZoneWrapper.offsetHeight + this.ifrAdsPlaceholderWrapper2.offsetHeight + 31;
                            } else {
                                var quizzHeight = Math.floor(this.ifrRelatedZoneWrapper.offsetWidth * 0.5625);
                                quizzHeight = quizzHeight > 350 ? quizzHeight : 350;
                                this.ifrRelatedZoneWrapper.style.height = quizzHeight + "px";
                                var adsHeight = this.ifrAdsPlaceholderWrapper2.offsetHeight;
                                maxH = quizzHeight + adsHeight + 35;
                            }

                            this.ifrRelatedZoneWrapper.style.flexWrap = "";
                            this.ifrAdsPlaceholderWrapper2.classList.add("adsPlaceholder2_horizontal");
                            this.ifrAdsPlaceholderWrapper2.classList.remove("adsPlaceholder2_vertical");
                            if (this.ifrRelatedZone1) this.ifrRelatedZone1.classList.remove("relatedzone_vertical");
                            this.ifrAdsPlaceholderWrapper1.style.display = "block";
                            this.ifrAdsPlaceholderWrapper2.style.display = "block";
                            this.powerAds1.style.display = "block";
                            this.powerAds2.style.display = "block";
                            if (this.ifrRelatedZone2) this.ifrRelatedZone2.style.display = "block";
                            if (layoutType == 2 && this.ifrRelatedFooter1) this.ifrRelatedFooter1.classList.add("hide_class");
                            this.iframeRelatedZoneWrapper.style.cssText = "max-width: ".concat(maxW, "px !important;\n                                                            min-width: ").concat(minW, "px !important;\n                                                            width: 100% !important;\n                                                            height: ").concat(maxH, "px !important;\n                                                            display: block !important;\n                                                            margin: 0px auto !important;\n                                                            border: 0px !important;");
                            this.ifrAdsPlaceholderWrapperAll.style.width = this.ifrRelatedZoneWrapper.offsetWidth + "px";
                            var padding1Side = Math.floor((this.ifrAdsPlaceholderWrapper1.offsetWidth - this.ifrAdsPlaceholder1.offsetWidth) * 0.5); // Hide 1 adsPlaceholder

                            var PADDING_CUT_OFF = 10;

                            if (padding1Side <= PADDING_CUT_OFF * 0.5) {
                                this.powerAds1.style.display = "none";
                                this.ifrAdsPlaceholderWrapper1.style.display = "none";
                                maxH += 300; // 300 => adsPlaceholder

                                this.ifrRelatedZoneWrapper.style.flexWrap = "wrap";
                                if (this.ifrRelatedZone1) this.ifrRelatedZone1.classList.add("relatedzone_vertical");
                                this.ifrAdsPlaceholderWrapper2.classList.remove("adsPlaceholder2_horizontal");
                                this.ifrAdsPlaceholderWrapper2.classList.add("adsPlaceholder2_vertical");
                                if (this.ifrRelatedZone2) this.ifrRelatedZone2.style.display = "none";
                                if (layoutType == 2 && this.ifrRelatedFooter1) this.ifrRelatedFooter1.classList.remove("hide_class");
                                colNums = 0;
                            }

                            var hTitleFeatured = this.ifrAdsPlaceholderWrapper2.getElementsByTagName("span")[0].offsetHeight;
                            var topAdsPlace = this.iframeRelatedZoneWrapper.offsetTop + this.ifrAdsPlaceholderWrapper2.offsetHeight + 16 + 10 + hTitleFeatured;
                            var leftAdsPlace1 = this.iframeRelatedZoneWrapper.offsetLeft + padding1Side + 0.5;
                            var leftAdsPlace2 = this.iframeRelatedZoneWrapper.offsetLeft + (this.iframeRelatedZoneWrapper.offsetWidth - adsWidth) + 15 - padding1Side + 0.5;

                            if (!isRelated) {
                                topAdsPlace = 8 + this.iframeRelatedZoneWrapper.offsetTop + this.ifrRelatedZoneWrapper.offsetHeight + 16 + hTitleFeatured + 1;
                            }

                            if (colNums == 0) {
                                topAdsPlace += isRelated ? 5 : 15;

                                var _padding1Side = Math.floor((this.iframeRelatedZoneWrapper.offsetWidth - this.ifrAdsPlaceholder2.offsetWidth) * 0.5);

                                var minPadding = PADDING_CUT_OFF * 2 + 2;
                                _padding1Side = _padding1Side > 0 && _padding1Side >= PADDING_CUT_OFF * 2 + 2 ? _padding1Side : minPadding;
                                leftAdsPlace2 = this.iframeRelatedZoneWrapper.offsetLeft + _padding1Side + 0.5;
                            }

                            this.powerAds1.style.top = "".concat(topAdsPlace, "px");
                            this.powerAds1.style.left = "".concat(leftAdsPlace1, "px");
                            this.powerAds2.style.top = "".concat(topAdsPlace, "px");
                            this.powerAds2.style.left = "".concat(leftAdsPlace2, "px");
                        } catch (e) {
                            this.logMess("Err processLayout2: ".concat(e));
                        }
                    }
                }, {
                    key: "processLayout3",
                    value: function processLayout3() {
                        try {
                            var totalAds = this.relatedZoneSetting.totalAds;
                            var col1W = 615;
                            var maxH = 545;
                            var colNums = 0;
                            var iframeW = this.iframeRelatedZoneWrapper.getBoundingClientRect().width;

                            if (iframeW > col1W) {
                                colNums = 1;
                            } else {
                                colNums = 0;
                            }

                            colNums = colNums <= totalAds ? colNums : totalAds; // this.logMess(`colNum: ${colNums}`);

                            var minW = 350;
                            var maxW = this.iframeRelatedZoneWrapper.parentElement.offsetWidth;
                            if (totalAds == 1) maxW = 670;else if (totalAds == 2) maxW = 954;
                            this.ifrRelatedZoneWrapper.style.flexWrap = "";
                            this.ifrRelatedZoneWrapper.style.height = "540px";
                            this.ifrAdsPlaceholderWrapper2.classList.add("adsPlaceholder2_horizontal_noborder");
                            this.ifrAdsPlaceholderWrapper2.classList.remove("adsPlaceholder2_vertical");
                            this.ifrRelatedZone1.classList.remove("relatedzone_vertical");
                            var documentTemp = this.iframeRelatedZoneWrapper.contentWindow.document;
                            var wrapperAll = documentTemp.querySelector(".wrapper_all");
                            wrapperAll.style.flexWrap = "wrap";

                            if (colNums == 1) {
                                wrapperAll.style.flexDirection = "row";
                                this.ifrAdsPlaceholderWrapper1.style.display = "block";
                                this.ifrAdsPlaceholderWrapper2.style.display = "block";
                                this.powerAds1.style.display = "block";
                                this.powerAds2.style.display = "block";
                                this.ifrAdsPlaceholderWrapper2.classList.add("adsTitle_temp3_top");
                                this.ifrRelatedZoneWrapper.style.width = "unset";
                                this.ifrRelatedZoneWrapper.style.margin = "unset";
                            } else {
                                wrapperAll.style.flexDirection = "column";
                                this.powerAds1.style.display = "none";
                                this.ifrAdsPlaceholderWrapper1.style.display = "none";
                                maxH += 290; // 300 => adsPlaceholder

                                this.ifrRelatedZoneWrapper.style.flexWrap = "wrap";
                                this.ifrRelatedZone1.classList.add("relatedzone_vertical");
                                this.ifrAdsPlaceholderWrapper2.classList.add("margin_center");
                                this.ifrAdsPlaceholderWrapper2.classList.remove("adsTitle_temp3_top");
                                this.ifrRelatedZoneWrapper.style.width = "300px";
                                this.ifrRelatedZoneWrapper.style.margin = "0 auto";
                            }

                            this.iframeRelatedZoneWrapper.style.cssText = "max-width: ".concat(maxW, "px !important;\n                                                        min-width: ").concat(minW, "px !important;\n                                                        width: 100% !important;\n                                                        height: ").concat(maxH, "px !important;\n                                                        display: block !important;\n                                                        margin: 0px auto !important;\n                                                        border: 0px !important;");
                            var PADDING_CUT_OFF = 10;
                            var topAdsPlace1 = this.iframeRelatedZoneWrapper.offsetTop;
                            var topAdsPlace2 = this.iframeRelatedZoneWrapper.offsetTop + this.iframeRelatedZoneWrapper.offsetHeight - this.ifrAdsPlaceholderWrapper2.offsetHeight - 1;
                            var leftAdsPlace1 = this.iframeRelatedZoneWrapper.offsetLeft + (this.iframeRelatedZoneWrapper.offsetWidth - this.ifrRelatedZoneWrapper.offsetWidth - this.ifrAdsPlaceholderWrapperAll.offsetWidth) * 0.5 + this.ifrRelatedZoneWrapper.offsetWidth + 16;
                            var leftAdsPlace2 = leftAdsPlace1;

                            if (colNums == 0) {
                                var titleH = this.ifrAdsPlaceholderWrapperAll.querySelector(".adsTitle_temp3_bot").offsetHeight;
                                topAdsPlace2 = this.iframeRelatedZoneWrapper.offsetTop + this.ifrRelatedZoneWrapper.offsetHeight + titleH + 30; // let padding1Side = Math.floor((this.iframeRelatedZoneWrapper.offsetWidth - this.ifrAdsPlaceholder2.offsetWidth) * 0.5);
                                // let minPadding = PADDING_CUT_OFF * 2 + 2;
                                // padding1Side = padding1Side > 0 && padding1Side >= (PADDING_CUT_OFF * 2 + 2) ? padding1Side : minPadding;

                                leftAdsPlace2 = this.iframeRelatedZoneWrapper.offsetLeft + (this.iframeRelatedZoneWrapper.offsetWidth - 300) * 0.5;
                                this.ifrAdsPlaceholderWrapper2.classList.remove("adsPlaceholder2_horizontal_noborder");
                            }

                            this.powerAds1.style.top = "".concat(topAdsPlace1, "px");
                            this.powerAds1.style.left = "".concat(leftAdsPlace1, "px");
                            this.powerAds2.style.top = "".concat(topAdsPlace2, "px");
                            this.powerAds2.style.left = "".concat(leftAdsPlace2, "px");
                        } catch (e) {
                            this.logMess("Err processLayout3: ".concat(e));
                        }
                    }
                }, {
                    key: "windowSizeChange",
                    value: function windowSizeChange() {
                        if (!this.iframeRelatedZoneWrapper) return;

                        try {
                            var layoutType = this.initConfig.layoutType;

                            if (layoutType == 1) {
                                this.processLayout1();
                            } else if (layoutType == 2) {
                                this.processLayout2();
                            } else if (layoutType == 3) {
                                this.processLayout3();
                            }
                        } catch (e) {
                            this.logMess("Err windowSizeChange: ".concat(e));
                        }
                    }
                }, {
                    key: "init",
                    value: function init() {
                        var _this3 = this;

                        try {
                            if (!this.initConfig.adunit) return;
                            if (this.initConfig.isInit) return;
                            this.initConfig.isInit = true; // Placement Adslot

                            this.placementAdsSlot = this.getPlacementByAdSlot(this.slotId); // include all content (Video + Ads)

                            if (!this.placementAdsSlot) {
                                this.logMess('Placement current dont available');
                                return;
                            } // Insert Render to body


                            if (RelatedZone_adSlots[this.slotId]) {
                                RelatedZone_adSlots[this.slotId] += 1;
                            } else {
                                RelatedZone_adSlots[this.slotId] = 1;
                            }

                            var powerTag = document.createElement(Configs.tagElement);
                            powerTag.id = "powerVideoContainerWrap_".concat(this.adSlot, "_relatedzone_").concat(RelatedZone_adSlots[this.slotId]);
                            powerTag.style.display = "block";
                            this.placementAdsSlot.appendChild(powerTag); // Ads Placeholder 1

                            this.powerAds1 = document.createElement(Configs.tagElement);
                            this.powerAds1.id = "adsPlaceholder1_".concat(this.adSlot, "_").concat(RelatedZone_adSlots[this.slotId]);
                            this.powerAds1.style = "display: block; position: absolute; width: 300px; height: 250px;";
                            powerTag.appendChild(this.powerAds1); // Convert relatedzone detail:

                            var isRelated = this.initConfig.contentType == this.type.Related;
                            var isQuizz = this.initConfig.contentType == this.type.Quizz;

                            var _isQuizzPic = this.initConfig.contentType == this.type.QuizzPic;

                            var contents = this.initConfig.detail.contents;
                            var relatedZoneDetail = "";
                            var relatedZoneDetail2 = "";

                            if (isRelated) {
                                if (contents && contents.length > 0) {
                                    for (var i = 0; i < contents.length; i++) {
                                        var item = contents[i];
                                        var contentDetail = {
                                            link: item.link,
                                            image: item.image,
                                            title: item.title
                                        };

                                        if (this.initConfig.layoutType == 2) {
                                            if (i <= 2) {
                                                relatedZoneDetail += handleBarsCustom(detail_default.a, contentDetail);
                                            } else {
                                                relatedZoneDetail2 += handleBarsCustom(detail_default.a, contentDetail);
                                            }
                                        } else {
                                            relatedZoneDetail += handleBarsCustom(detail_default.a, contentDetail);
                                        }
                                    }
                                }
                            } else {
                                this.listQues = shuffleArray(this.initConfig.detail.contents);
                            }

                            var template = this.initConfig.detail.template;
                            this.relatedZoneSetting = {
                                adunit: this.initConfig.adunit,
                                adSlot: this.adSlot,
                                relatedzoneWrapperID: "".concat(this.adSlot, "_relatedzone_wrapper"),
                                relatedZone1ID: "relatedZone1ID",
                                relatedZone2ID: "relatedZone2ID",
                                adsPlaceholderWrapperAllID: "adsPlaceholderWrapperAllID",
                                adsPlaceholderWrapper1: "adsPlaceholderWrapper1",
                                adsPlaceholderWrapper2: "adsPlaceholderWrapper2",
                                adsPlaceholderID1: "adsPlaceholder1",
                                adsPlaceholderID2: "adsPlaceholder2",
                                classWrapperAd: Configs.adClass,
                                mainTitle: template.mainTitle,
                                totalAds: template.totalAds,
                                logoBrand: template.logo,
                                poweredByURL: Configs.runWithPP ? "https://pubpower.io/" : "https://valueimpression.com/",
                                poweredByLogo: Configs.runWithPP ? "<span class=\"logoimage\" style=\"background-image: url(https://ms.pubpowerplatform.io/assets/pubpower-white-100x18.png);\"></span>" : "<span class=\"logoimageVli\">Valueimpression</span>",
                                backgroundStyle: isRelated || _isQuizzPic ? "style='background-color: ".concat(template.color.background, ";'") : "",
                                titleStyle: "style='color: ".concat(template.color.title, ";'"),
                                brandHomepage: "//".concat(Configs.brandHomepage, "/?ref=").concat(window.location.hostname),
                                brandName: Configs.runWithPP ? "PubPower" : "Valueimpression",
                                relatedZoneDetail: relatedZoneDetail,
                                relatedZoneDetail2: relatedZoneDetail2,
                                footerRelated1ID: "footerRelated1ID",
                                footerRelated2ID: "footerRelated2ID"
                            };
                            var relatedIframe = document.createElement('iframe');
                            relatedIframe.id = "powerRelatedZoneIframe_" + this.adSlot;
                            relatedIframe.setAttribute("frameborder", 0);
                            relatedIframe.scrolling = "no";
                            powerTag.appendChild(relatedIframe);
                            this.iframeRelatedZoneWrapper = relatedIframe;
                            this.logMess("layoutType: ".concat(this.initConfig.layoutType, " | isRelated: ").concat(isRelated, " | isQuizz: ").concat(isQuizz, " | isQuizzPic: ").concat(_isQuizzPic));
                            var reletedZoneHTML = relatedzone_template_default.a;

                            if (this.initConfig.layoutType == 1 && isRelated) {
                                reletedZoneHTML = relatedzone_template_default.a;
                            } else if (this.initConfig.layoutType == 2 && isRelated) {
                                reletedZoneHTML = template2_default.a;
                            } else if (this.initConfig.layoutType == 3 && isRelated) {
                                reletedZoneHTML = template3_default.a;
                            } else if (this.initConfig.layoutType == 2 && isQuizz || _isQuizzPic) {
                                reletedZoneHTML = quizz1_default.a;
                            }

                            var windowTemp = relatedIframe.contentWindow;
                            var documentTemp = windowTemp.document;
                            documentTemp.open();
                            documentTemp.write(handleBarsCustom(reletedZoneHTML, this.relatedZoneSetting));
                            documentTemp.close();
                            documentTemp.head.append(this.createLinkCss(documentTemp, relatedzone_default.a)); // Ads Placeholder 2

                            this.powerAds2 = document.createElement(Configs.tagElement);
                            this.powerAds2.id = "adsPlaceholder2_".concat(this.adSlot, "_").concat(RelatedZone_adSlots[this.slotId]);
                            this.powerAds2.style = "display: block; position: absolute; width: 300px; height: 250px;";
                            powerTag.appendChild(this.powerAds2); // Ads Placeholder:

                            this.ifrRelatedZoneWrapper = documentTemp.getElementById(this.relatedZoneSetting.relatedzoneWrapperID);
                            this.ifrRelatedZone1 = documentTemp.getElementById(this.relatedZoneSetting.relatedZone1ID);
                            this.ifrRelatedZone2 = documentTemp.getElementById(this.relatedZoneSetting.relatedZone2ID);
                            this.ifrRelatedFooter1 = documentTemp.getElementById(this.relatedZoneSetting.footerRelated1ID);
                            this.ifrRelatedFooter2 = documentTemp.getElementById(this.relatedZoneSetting.footerRelated2ID);
                            this.ifrAdsPlaceholderWrapperAll = documentTemp.getElementById(this.relatedZoneSetting.adsPlaceholderWrapperAllID);
                            this.ifrAdsPlaceholderWrapper1 = documentTemp.getElementById(this.relatedZoneSetting.adsPlaceholderWrapper1);
                            this.ifrAdsPlaceholderWrapper2 = documentTemp.getElementById(this.relatedZoneSetting.adsPlaceholderWrapper2);
                            this.ifrAdsPlaceholder1 = documentTemp.getElementById(this.relatedZoneSetting.adsPlaceholderID1);
                            this.ifrAdsPlaceholder2 = documentTemp.getElementById(this.relatedZoneSetting.adsPlaceholderID2); // Quizz Element

                            if (isQuizz || _isQuizzPic) {
                                this.progressbarID = documentTemp.getElementById("progressbarID");
                                this.feedBackUnLikeID = documentTemp.getElementById("feedBackUnLikeID");
                                this.feedBackLikeID = documentTemp.getElementById("feedBackLikeID");
                                this.questionID = documentTemp.getElementById("questionID");
                                this.answerID = documentTemp.getElementById("answerID");

                                if (_isQuizzPic) {
                                    this.answerID.classList.remove("pp_answer");
                                    this.answerID.classList.add("pp_quizpic_ask");
                                }

                                this.skipBtnID = documentTemp.getElementById("skipBtnID");
                                this.skipBtnID.addEventListener("click", function (e) {
                                    _this3.curQues++;

                                    for (var j = 0; j < _this3.listAskElem.length; j++) {
                                        var ask = _this3.listAskElem[j];
                                        ask.elem.removeEventListener("click", ask.askFunc);
                                        ask.elem.removeEventListener("mouseover", ask.mouseoverFunc);
                                        ask.elem.removeEventListener("onmouseout", ask.mouseoutFunc);
                                    }

                                    ;
                                    _this3.listAskElem = [];

                                    _this3.setupQuestion();
                                });
                                this.imgBgID = documentTemp.getElementById("imgBgID");
                                this.setupQuestion();
                            } // Window Resize


                            window.addEventListener('resize', this.windowSizeChange.bind(this));
                            this.windowSizeChange();
                            this.windowSizeChange();
                            this.initBanner();
                        } catch (e) {
                            this.logMess("init Err: " + e);
                        }
                    }
                }, {
                    key: "initBanner",
                    value: function initBanner() {
                        var _this4 = this;

                        var totalAds = this.relatedZoneSetting.totalAds; // Create div banner tag

                        var divBanner = document.createElement(Configs.tagElement);
                        divBanner.className = Configs.adClass;
                        divBanner.dataset.adSlot = this.relatedZoneSetting.adSlot;
                        this.powerAds2.appendChild(divBanner);
                        var adElements = [divBanner]; // include all content (Video + Ads)

                        if (totalAds == 2) {
                            var _divBanner = document.createElement(Configs.tagElement);

                            _divBanner.className = Configs.adClass;
                            _divBanner.dataset.adSlot = this.relatedZoneSetting.adSlot;
                            this.powerAds1.appendChild(_divBanner);
                            adElements.push(_divBanner);
                        }

                        this.displayBannerNew(adElements); // Add active view event for quiz

                        if (!(this.initConfig.contentType == this.type.Related)) {
                            this.placementViewPort = newViewPortDetect(this.ifrRelatedZoneWrapper, {
                                threshold: [70]
                            }, false);
                            this.placementViewPort.inViewPort(function () {
                                _this4.logMess("placementViewPort ".concat(_this4.adSlot, " - inViewPort."));

                                _this4.timeInterval = setInterval(function () {
                                    _this4.changeQuizz10s();
                                }, 1000);
                            });
                            this.placementViewPort.outViewPort(function () {
                                _this4.logMess("placementViewPort ".concat(_this4.adSlot, " - outViewPort."));

                                clearInterval(_this4.timeInterval);
                                _this4.timeInterval = null;
                            });
                        }
                    }
                }, {
                    key: "displayBannerNew",
                    value: function displayBannerNew(adElements) {
                        var _this5 = this;

                        try {
                            var adSlot = this.adSlot;
                            this.logMess("[New Display] Start display adSlot: " + adSlot);
                            var stt = 0;
                            var adWidth = 300;
                            var adHeight = 250;

                            var _loop2 = function _loop2() {
                                var _adunitList = [];
                                var adWrapper = adElements[i];

                                if (adWrapper.dataset.adSlot != adSlot) {
                                    return "continue";
                                }

                                stt++;

                                if (adWrapper.dataset.id) {
                                    return "continue";
                                }

                                var adSlotID = "".concat(adSlot, "_").concat(stt);
                                var adSlotContainerID = "container_".concat(adSlotID);
                                var adContainerHtml = "<".concat(Configs.tagElement, " id=\"").concat(adSlotContainerID, "\" style=\"display:block!important;position:relative!important;margin:0 auto!important;visibility: visible;\"><").concat(Configs.tagElement, " style=\"display:block;visibility: visible;\" id=\"").concat(adSlotID, "\"></").concat(Configs.tagElement, "></").concat(Configs.tagElement, ">");

                                if (!isCheckElementVisible(adWrapper)) {
                                    _this5.logMess("[RelatedZone] ".concat(adSlotID, " not visible"));

                                    return "continue";
                                }

                                adWrapper.dataset.id = adSlotID;
                                adWrapper.innerHTML = adContainerHtml;
                                adWrapper.style.setProperty("display", "block", "important");
                                adWrapper.style.setProperty("visibility", "visible", "important");
                                adWrapper.style.setProperty("opacity", "1", "important");
                                adWrapper.style.setProperty("margin", "0 auto", "important"); // Center Ads

                                adWrapper.style.setProperty("display", "flex", "important");
                                adWrapper.style.setProperty("justify-content", "center", "important");
                                adWrapper.style.setProperty("align-items", "center", "important");

                                if (utlis_mobileDetect()) {
                                    adWrapper.style.setProperty("width", "initial", "important");
                                    adWrapper.style.setProperty("height", "initial", "important");
                                    adWrapper.style.setProperty("min-width", adWidth + "px", "important");
                                    adWrapper.style.setProperty("min-height", adHeight + "px", "important");
                                } else {
                                    adWrapper.style.setProperty("width", adWidth + "px", "important");
                                    adWrapper.style.setProperty("height", "initial", "important");
                                    adWrapper.style.setProperty("min-height", adHeight + "px", "important");
                                }

                                createInfoDebugOverlay(adSlotID);
                                var displaySlot = _this5.initConfig; // add adunit

                                var adunit = JSON.parse(JSON.stringify(displaySlot.adunit));
                                adunit.code = adSlotID;

                                _adunitList.push(adunit);

                                var viewPortDetect = newViewPortDetect(adWrapper, {
                                    threshold: [51]
                                });
                                var floorPrice = isNaN(parseFloat(displaySlot.floorPrice)) ? 0 : parseFloat(displaySlot.floorPrice);

                                var _getFloorTest = getFloorTest(displaySlot.floorTest, adunit.code),
                                    _getFloorTest2 = slicedToArray_default()(_getFloorTest, 2),
                                    floorTest = _getFloorTest2[0],
                                    testCaseId = _getFloorTest2[1];

                                var biddingManager = new helper_BidManager({
                                    slotId: adSlotID,
                                    tagId: displaySlot.zid,
                                    floorPrice: floorPrice,
                                    dynamicFloor: getDynamicFloor(displaySlot.dynamicFloor, adunit.code),
                                    abTestFloorId: typeof displaySlot.abTestId === "number" ? displaySlot.abTestId : 0,
                                    floorTest: floorTest,
                                    testCaseId: testCaseId,
                                    adUnits: _adunitList,
                                    adWidth: adWidth,
                                    adHeight: adHeight,
                                    viewPortDetect: viewPortDetect,
                                    tagWidth: displaySlot.w,
                                    tagHeight: displaySlot.h,
                                    buildBannerFromNative: function buildBannerFromNative(bidWon) {
                                        return getNativeAd({
                                            width: adWidth,
                                            height: adHeight,
                                            adId: bidWon.adId,
                                            pubUrl: window.location.href
                                        });
                                    }
                                });
                                var newBannerAdSlot = {
                                    bidManager: biddingManager,
                                    targetGoogleAccount: typeof displaySlot.targetGoogleAccount === "string" ? displaySlot.targetGoogleAccount : "",
                                    googleBidAdjustment: displaySlot.googleBidAdjustment ? displaySlot.googleBidAdjustment : null,
                                    targetLineId: displaySlot.targetLineId ? displaySlot.targetLineId : "",
                                    targetAdSlot: displaySlot.targetAdSlot ? displaySlot.targetAdSlot : "",
                                    adSlotId: adSlotID,
                                    tagId: displaySlot.zid,
                                    adWidth: adWidth,
                                    adHeight: adHeight,
                                    requestSizes: adunit.mediaTypes.banner.sizes,
                                    adRefreshTime: Configs.reloadMode === "signal" ? 0 : Configs.bannerRefreshTime,
                                    nextAdAfterViewPortTime: Configs.bannerRefreshTimeInViewPort,
                                    adWrapper: adWrapper,
                                    reloadMode: Configs.reloadMode,
                                    adloadType: Configs.adloadType,
                                    safeFrame: Configs.safeFrame,
                                    viewPortDetect: viewPortDetect,
                                    dfpAdUnit: typeof displaySlot.dfpAdUnit === "string" ? displaySlot.dfpAdUnit : "",
                                    renderAd: function renderAd(bidWon) {
                                        _renderAd(bidWon, this.getAdElement(), adSlotID, adWidth, adHeight);

                                        RelatedZone_onShowPowerIcon.run(adSlotID, bidWon.width, bidWon.height);
                                    },
                                    passBack: function passBack() {
                                        try {
                                            RelatedZone_onHiddenPowerIcon.run(adSlotID);
                                            var passBack = typeof displaySlot.pass_back === "string" && displaySlot.pass_back != "" ? displaySlot.pass_back : null;

                                            if (passBack) {
                                                if (Configs.pbRender === "iframe") {
                                                    display_renderPassbackInIframe(this.getAdElement(), adSlotID, adWidth, adHeight, passBack);
                                                } else {
                                                    renderPassbackInRoot(this.getAdElement(), passBack);
                                                }
                                            }
                                        } catch (e) {}

                                        if (adWidth > 1 && adHeight > 1) {
                                            var adContainer = adWrapper.querySelector("#" + adSlotContainerID);
                                            adContainer.style.setProperty("width", "".concat(adWidth, "px"), "important");
                                            adContainer.style.setProperty("min-height", "".concat(adHeight, "px"), "important"); // Center Passback

                                            adContainer.style.setProperty("display", "flex", "important");
                                            adContainer.style.setProperty("justify-content", "center", "important");
                                            adContainer.style.setProperty("align-items", "center", "important");
                                        }
                                    },
                                    onStartDFPRequest: function onStartDFPRequest() {
                                        RelatedZone_onHiddenPowerIcon.run(adSlotID);
                                    },
                                    onBackSizeOriginal: function onBackSizeOriginal() {
                                        try {
                                            if (adWidth > 1 && adHeight > 1) {
                                                var adContainer = adWrapper.querySelector("#" + adSlotContainerID);

                                                if (adContainer) {
                                                    adContainer.style.setProperty("width", "".concat(adWidth, "px"), "important");
                                                    adContainer.style.setProperty("min-height", "".concat(adHeight, "px"), "important");
                                                    adContainer.style.setProperty("display", "flex", "important");
                                                    adContainer.style.setProperty("justify-content", "center", "important");
                                                    adContainer.style.setProperty("align-items", "center", "important");
                                                }
                                            }
                                        } catch (error) {}
                                    },
                                    getAdElement: function getAdElement() {
                                        var adEl = adWrapper.querySelector("#" + adSlotID);

                                        if (adEl != null) {
                                            return adEl;
                                        } // xử lý trường hợp khi render pasback thì pub replace content trong div adWrapper nên khi tạo lại ad element cần remove hết html mà pub đã in vào adWrapper (ví dụ: integral-calculator.com)


                                        adWrapper.innerHTML = adContainerHtml;
                                        return adWrapper.querySelector("#" + adSlotID);
                                    },
                                    getAdPowerIcon: function getAdPowerIcon() {
                                        try {
                                            var iconEl = adWrapper.querySelector("#__icon_" + adSlotID);

                                            if (iconEl != null) {
                                                return iconEl;
                                            }

                                            var el = renderViIcon(adSlotID);

                                            if (el) {
                                                el.style.setProperty("display", "none", "important");
                                            }

                                            if (adWrapper && adWrapper.querySelector("#" + adSlotContainerID) && el) {
                                                adWrapper.querySelector("#" + adSlotContainerID).appendChild(el);
                                            }

                                            return el;
                                        } catch (e) {
                                            return null;
                                        }
                                    },
                                    issetAdElement: function issetAdElement() {
                                        var adEl = adWrapper.querySelector("#" + adSlotID);

                                        if (adEl == null) {
                                            return false;
                                        }

                                        return true;
                                    }
                                };
                                RelatedZone_onShowPowerIcon.add(adSlotID, function (_adWidth, _adHeight) {
                                    try {
                                        if (_adWidth > 1 && _adHeight > 1 && Configs.dataBidWin[adSlotID] && Configs.dataBidWin[adSlotID].mediaType != "video") {
                                            var adContainer = adWrapper.querySelector("#" + adSlotContainerID);
                                            adContainer.style.setProperty("width", "".concat(_adWidth, "px"), "important");
                                            adContainer.style.setProperty("height", "".concat(_adHeight, "px"), "important");
                                        }

                                        var _powerIcon = newBannerAdSlot.getAdPowerIcon();

                                        if (_powerIcon === null) {
                                            return;
                                        }

                                        _powerIcon.style.cssText = "position: absolute!important; bottom: 0px!important; left: 0px!important; display: inline-block !important;";
                                    } catch (e) {
                                        captureException(e, "[Display - onShowPowerIcon]");
                                    }
                                });
                                RelatedZone_onHiddenPowerIcon.add(adSlotID, function () {
                                    var _powerIcon = newBannerAdSlot.getAdPowerIcon();

                                    if (_powerIcon === null) {
                                        return;
                                    }

                                    _powerIcon.style.setProperty("display", "none", "important");
                                });

                                var _addToBannerManager = function addToBannerManager() {
                                    _addToBannerManager = function addToBannerManager() {};

                                    plugins_BannerManager.addAdSlot(newBannerAdSlot);
                                };

                                if (Configs.adloadType == "lazy_load") {
                                    var clearViewportDetect = function clearViewportDetect() {};

                                    clearViewportDetect = isInViewPort(adWrapper, function () {
                                        _addToBannerManager();

                                        clearViewportDetect();
                                    }, function () {}, {
                                        threshold: [10]
                                    });

                                    try {
                                        // ước lượng thời gian bid trước khi scroll đến vị trí của adslot dựa trên khoảng cách của adslot đến view port để thực hiện bid trước khi kéo đến -> ads hiển thị nhanh nhất có thể khi in view port
                                        var adToViewPortSpace = 0;

                                        if (adWrapper.getBoundingClientRect().top > 0) {
                                            adToViewPortSpace = adWrapper.getBoundingClientRect().top - window.innerHeight;
                                        } else {
                                            adToViewPortSpace = Math.abs(adWrapper.getBoundingClientRect().bottom);
                                        }

                                        if (adToViewPortSpace > 0) {
                                            var timeOutToRequestBid = Math.round(adToViewPortSpace / 1600);
                                            setTimeout(_addToBannerManager, timeOutToRequestBid * 1000);

                                            _this5.logMess("TimeOutToRequestBid: ".concat(timeOutToRequestBid));
                                        }
                                    } catch (e) {
                                        _addToBannerManager();

                                        captureException(e, "[Display - addToBannerManager]");
                                    }
                                } else {
                                    _addToBannerManager();
                                }
                            };

                            for (var i = 0; i < adElements.length; i++) {
                                var _ret = _loop2();

                                if (_ret === "continue") continue;
                            }
                        } catch (e) {
                            this.logMess("Error: displayBannerNew - ".concat(e));
                        }
                    }
                }, {
                    key: "getAskChoise",
                    value: function getAskChoise(quesID) {
                        var _this6 = this;

                        return new Promise(function (resolve) {
                            try {
                                var xhr = new XMLHttpRequest();

                                xhr.onreadystatechange = function () {
                                    if (xhr.readyState === 4) {
                                        if (xhr.status === 200) {
                                            if (xhr.response) {
                                                resolve(JSON.parse(xhr.response));
                                            } else {
                                                resolve(null);
                                            }
                                        } else {
                                            resolve(null);
                                        }
                                    }
                                };

                                xhr.open("GET", "https://pix.pubpowerplatform.io/qzr?qid=".concat(quesID, "&a=").concat(window.location.hostname), true);
                                xhr.timeout = 5000;

                                xhr.ontimeout = function () {
                                    resolve(null);
                                };

                                xhr.send();
                            } catch (e) {
                                resolve(null);

                                _this6.logMess("getAskChoise Err: " + e);
                            }
                        });
                    }
                }, {
                    key: "buildPlayerContentsFromJSON",
                    value: function buildPlayerContentsFromJSON(items) {
                        try {
                            var playerContents = [];

                            if (!items || items.length <= 0) {
                                this.getContentData();
                                return;
                            }

                            for (var i = 0; i < items.length; i++) {
                                if (!items[i].title) continue;
                                if (!items[i].image) continue;
                                if (!items[i].link) continue;
                                var pContent = {
                                    title: items[i].title,
                                    image: items[i].image,
                                    link: items[i].link
                                };
                                playerContents.push(pContent);
                            }

                            if (playerContents.length <= 0) {
                                this.getContentData();
                                return;
                            }

                            this.initConfig.detail.contents = playerContents || {}; // Fix ques

                            if (this.initConfig.contentType == this.type.Quizz) {
                                // List Question
                                this.initConfig.detail.contents = [{
                                    "id": "1",
                                    "ques": "Since Russia's invasion began on February 24, how much money has the U.S. committed in assistance to Ukraine?",
                                    "ask": [{
                                        "id": 1,
                                        "val": "$3.3 million"
                                    }, {
                                        "id": 2,
                                        "val": "$3.4 million"
                                    }, {
                                        "id": 3,
                                        "val": "$4.4 million"
                                    }, {
                                        "id": 4,
                                        "val": "$5.4 million"
                                    }],
                                    "correct": 2,
                                    // id
                                    "askchoise": [20, 50, 10, 30],
                                    "imgBG": "https://static.instiengage.com/content_images/unsplash/_sDlQf6f7gc"
                                }, {
                                    "id": "2",
                                    "ques": 'How many times is the F-word used throughout the movie "The Big Lebowski"?',
                                    "ask": [{
                                        "id": 1,
                                        "val": "147"
                                    }, {
                                        "id": 2,
                                        "val": "220"
                                    }, {
                                        "id": 3,
                                        "val": "292"
                                    }, {
                                        "id": 4,
                                        "val": "417"
                                    }],
                                    "correct": 3,
                                    "askchoise": [12, 23, 41, 24],
                                    "imgBG": "https://static.instiengage.com/content_images/unsplash/8CqDvPuo_kI"
                                }, {
                                    "id": "3",
                                    "ques": "The Florida Reef is the only living coral barrier reef in the U.S.",
                                    "ask": [{
                                        "id": 1,
                                        "val": "True"
                                    }, {
                                        "id": 2,
                                        "val": "False"
                                    }],
                                    "correct": 1,
                                    "askchoise": [55, 45],
                                    "imgBG": "https://static.instiengage.com/content_images/unsplash/tV80374iytg"
                                }, {
                                    "id": "4",
                                    "ques": "Which social media platform permanently banned President Trump's account due to his posts promoting violence?",
                                    "ask": [{
                                        "id": 1,
                                        "val": "Instagram"
                                    }, {
                                        "id": 2,
                                        "val": "Twitter"
                                    }, {
                                        "id": 3,
                                        "val": "Facebook"
                                    }, {
                                        "id": 4,
                                        "val": "YouTube"
                                    }],
                                    "correct": 2,
                                    "askchoise": [5, 85, 8, 2],
                                    "imgBG": "https://static.instiengage.com/content_images/unsplash/IPubTLY7Ji0"
                                }];
                            } else if (this.initConfig.contentType == this.type.QuizzPic) {
                                // List Question
                                this.initConfig.detail.contents = [{
                                    "id": "5",
                                    "ques": "It was _____ one-time problem.",
                                    "ask": [{
                                        "id": 1,
                                        "val": "an",
                                        "img": "https://d3s8vhyulk4851.cloudfront.net/content_images/unsplash/jzTQVxCyKYs"
                                    }, {
                                        "id": 2,
                                        "val": "a",
                                        "img": "https://d3s8vhyulk4851.cloudfront.net/content_images/unsplash/oMpknr7yi7g"
                                    }],
                                    "correct": 2,
                                    // start 0
                                    "askchoise": [8, 92]
                                }, {
                                    "id": "6",
                                    "ques": "I saw ____ unicorn.",
                                    "ask": [{
                                        "id": 1,
                                        "val": "a",
                                        "img": "https://d3s8vhyulk4851.cloudfront.net/content_images/unsplash/qSf_4bNsoWc"
                                    }, {
                                        "id": 2,
                                        "val": "an",
                                        "img": "https://d3s8vhyulk4851.cloudfront.net/content_images/unsplash/KTYjVDmN4A4"
                                    }],
                                    "correct": 1,
                                    "askchoise": [80, 20]
                                }, {
                                    "id": "7",
                                    "ques": "Laura has _____ MBA.",
                                    "ask": [{
                                        "id": 1,
                                        "val": "a",
                                        "img": "https://d3s8vhyulk4851.cloudfront.net/content_images/unsplash/nomivMNW07o"
                                    }, {
                                        "id": 2,
                                        "val": "an",
                                        "img": "https://d3s8vhyulk4851.cloudfront.net/content_images/unsplash/Hf8n0RUk7g0"
                                    }],
                                    "correct": 2,
                                    "askchoise": [26, 74]
                                }, {
                                    "id": "8",
                                    "ques": "Happiness is _____ universal emotion.",
                                    "ask": [{
                                        "id": 1,
                                        "val": "an",
                                        "img": "https://d3s8vhyulk4851.cloudfront.net/content_images/unsplash/AndE50aaHn4"
                                    }, {
                                        "id": 2,
                                        "val": "a",
                                        "img": "https://d3s8vhyulk4851.cloudfront.net/content_images/unsplash/dnL6ZIpht2s"
                                    }],
                                    "correct": 2,
                                    "askchoise": [16, 84]
                                }];
                            } // Init TopArticles Template


                            this.init();
                        } catch (e) {
                            this.logMess("Json Err: " + e);
                        }
                    }
                }, {
                    key: "buildPlayerContentsFromXMLDom",
                    value: function buildPlayerContentsFromXMLDom(XMLDom) {
                        try {
                            var playerContents = [];
                            var items = XMLDom.getElementsByTagName("item");

                            if (items.length <= 0) {
                                this.getContentData();
                                return;
                            }

                            for (var i = 0; i < items.length; i++) {
                                if (!items[i].getElementsByTagName("title")[0]) continue;
                                if (!items[i].getElementsByTagName("image")[0]) continue;
                                if (!items[i].getElementsByTagName("link")[0]) continue;
                                var title = items[i].getElementsByTagName("title")[0].childNodes[0].nodeValue;
                                var image = items[i].getElementsByTagName("image")[0].childNodes[0].nodeValue;
                                var link = items[i].getElementsByTagName("link")[0].childNodes[0].nodeValue;
                                var pContent = {
                                    title: title,
                                    image: image,
                                    link: link
                                };
                                playerContents.push(pContent);
                            }

                            if (playerContents.length <= 0) {
                                this.getContentData();
                                return;
                            }

                            this.initConfig.vid.topArticle = this.initConfig.vid.topArticle || {};
                            this.initConfig.vid.topArticle = playerContents; // Init TopArticles Template

                            this.init();
                        } catch (e) {
                            this.logMess("XML Err: " + e);
                        }
                    }
                }, {
                    key: "getContentData",
                    value: function getContentData() {
                        var _this7 = this;

                        if (this.curRequest >= 10) {
                            this.curTime++;
                            this.curRequest = 0;
                            setTimeout(function () {
                                return _this7.getContentData();
                            }, this.delay);
                            return;
                        }

                        if (this.curTime >= this.maxTime) {
                            this.logMess("[Configs - getContentData] max time request.");
                            return;
                        }

                        this.curRequest++;

                        try {
                            var curDomain = window.location.hostname;
                            var title = document.title;
                            var count = this.initConfig.layoutType == 2 || this.initConfig.layoutType == 3 ? 6 : 3;

                            if (curDomain == "jstag.local") {
                                curDomain = "freegames66.com";
                                title = "Gun";
                            }

                            curDomain = curDomain.replace(/^https?:\/\//, "");
                            curDomain = curDomain.replace(/^www\./, "");
                            this.initConfig.feed_url = "https://els.pubpowerplatform.io/els.php?key='".concat(title, "'&domain=").concat(curDomain, "&size=").concat(count);
                            var xhr = new XMLHttpRequest();

                            xhr.onreadystatechange = function () {
                                if (xhr.readyState === 4) {
                                    if (xhr.status === 200) {
                                        if (xhr.response || xhr.responseXML) {
                                            if (xhr.responseXML) {
                                                _this7.buildPlayerContentsFromXMLDom(xhr.responseXML);
                                            } else {
                                                _this7.buildPlayerContentsFromJSON(JSON.parse(xhr.response));
                                            }
                                        } else {
                                            _this7.getContentData();
                                        }
                                    } else {
                                        _this7.getContentData();
                                    }
                                }
                            };

                            xhr.open("GET", this.initConfig.feed_url, true);
                            xhr.timeout = 5000;

                            xhr.ontimeout = function () {
                                _this7.getContentData();
                            };

                            xhr.send();
                        } catch (e) {
                            this.getContentData();
                            this.logMess("getContentData Err: " + e);
                        }
                    }
                }, {
                    key: "createLinkCss",
                    value: function createLinkCss(innerDocument, name) {
                        var styleSheet = innerDocument.createElement("style");
                        styleSheet.id = "power_css_videocontainer";
                        styleSheet.type = "text/css";
                        styleSheet.innerText = name;
                        return styleSheet;
                    }
                }, {
                    key: "getPlacementByAdSlot",
                    value: function getPlacementByAdSlot(adSlot) {
                        if (!adSlot) return;
                        var placement = null;
                        var availableSlots = document.getElementsByClassName(Configs.adClass);
                        if (availableSlots.length === 0) return;

                        for (var i = 0; i < availableSlots.length; i++) {
                            var slotElem = availableSlots[i];
                            if (slotElem.dataset.adSlot !== adSlot) continue;
                            if (slotElem.hasChildNodes()) continue;
                            placement = slotElem; // if (placement.id === "") placement.id = adSlot;

                            break;
                        }

                        return placement;
                    }
                }, {
                    key: "logMess",
                    value: function logMess(mess) {
                        if (typeof_default()(mess) === "object") {
                            vilog("".concat(JSON.stringify(mess)), "RelatedZone");
                        } else {
                            vilog("".concat(mess), "RelatedZone");
                        }
                    }
                }]);

                return RelatedZone;
            }();


// CONCATENATED MODULE: ./src/plugins/helper/init-functions.js




            window[Configs.tagName] = window[Configs.tagName] || {};
            window[Configs.tagName].Init = window[Configs.tagName].Init || [];
            window[Configs.tagName].videoInit = window[Configs.tagName].videoInit || [];
            window[Configs.tagName].displayInit = window[Configs.tagName].displayInit || [];
            window[Configs.tagName].videoConfig = window[Configs.tagName].videoConfig || {};
            window[Configs.tagName].enableGeoLocation = window[Configs.tagName].enableGeoLocation === true ? true : false;
            var typeInit = null;
            function prebidConfig() {
                var apdpbjsConfig = {
                    s2sConfig: {
                        accountId: "e8df28e7-78ff-452d-b3af-ff4df83df832",
                        enabled: true,
                        bidders: Configs.s2sBidders,
                        timeout: Configs.timeoutS2SConfig,
                        adapter: 'prebidServer',
                        endpoint: 'https://ss-pbs.quantumdex.io/openrtb2/auction',
                        syncEndpoint: 'https://ss-pbs.quantumdex.io/cookie_sync',
                        extPrebid: {
                            aliases: {
                                "pp_colossusssp_s2s": "colossus"
                            },
                            channel: {
                                name: 'apdpbjs',
                                version: apdpbjs.version
                            },
                            targeting: {
                                mediatypepricegranularity: {
                                    banner: {
                                        "precision": 2,
                                        "ranges": [{
                                            "min": 0,
                                            "max": 22.50,
                                            "increment": 0.01
                                        }]
                                    },
                                    video: {
                                        "precision": 2,
                                        "ranges": [{
                                            "min": 0,
                                            "max": 0.1,
                                            "increment": 0.01
                                        }, {
                                            "min": 0.1,
                                            "max": 10,
                                            "increment": 0.05
                                        }, {
                                            "min": 10,
                                            "max": 15,
                                            "increment": 0.25
                                        }, {
                                            "min": 15,
                                            "max": 30,
                                            "increment": 0.5
                                        }, {
                                            "min": 30,
                                            "max": 40,
                                            "increment": 1
                                        }, {
                                            "min": 40,
                                            "max": 110,
                                            "increment": 5
                                        }]
                                    }
                                }
                            }
                        }
                    },
                    rubicon: {
                        singleRequest: true
                    },
                    cache: {
                        url: 'https://pbc.pubpowerplatform.io/cache',
                        ignoreBidderCacheKey: true
                    },
                    pubcid: {
                        expInterval: 525600
                    },
                    userSync: Configs.userSyncConfig,
                    //debug: true,
                    mediaTypePriceGranularity: {
                        video: Configs.videoPriceGranularity,
                        banner: Configs.bannerPriceGranularity
                    },
                    currency: {
                        "adServerCurrency": "USD",
                        "granularityMultiplier": 1
                    },
                    ortb2: Configs.ortb2
                };

                if (Configs.VIGeo) {
                    if (Configs.enableGDPR) {
                        apdpbjsConfig.consentManagement = {
                            gdpr: {
                                cmpApi: 'iab',
                                defaultGdprScope: true,
                                timeout: Configs.CMP.GDPR.timeout ? Configs.CMP.GDPR.timeout : 8000
                            }
                        };
                    } else if (Configs.enableCCPA) {
                        apdpbjsConfig.consentManagement = {
                            usp: {
                                cmpApi: 'iab',
                                timeout: Configs.CMP.CCPA.timeout ? Configs.CMP.CCPA.timeout : 3000
                            }
                        };
                    }
                }

                if (typeInit == "vpaid") {
                    apdpbjsConfig.publisherDomain = Configs.domainName;
                    apdpbjsConfig.pageUrl = window.location.origin;
                }

                var bidderSettings = {
                    standard: {
                        adserverTargeting: [{
                            key: "hb_bidder",
                            val: function val(bidResponse) {
                                return bidResponse.bidderCode;
                            }
                        }, {
                            key: "hb_adid",
                            val: function val(bidResponse) {
                                return bidResponse.adId;
                            }
                        }, {
                            key: 'hb_size',
                            val: function val(bidResponse) {
                                return getSizeCustomHBSize(bidResponse);
                            }
                        }, {
                            key: 'hb_source',
                            val: function val(bidResponse) {
                                return bidResponse.source;
                            }
                        }, {
                            key: 'hb_format',
                            val: function val(bidResponse) {
                                return bidResponse.mediaType;
                            }
                        }, {
                            key: 'hb_domain',
                            val: function val() {
                                return Configs.domainName;
                            }
                        }]
                    }
                };

                if (Configs.bidAdjustment) {
                    var _loop = function _loop(bidderCode) {
                        var ajm = parseFloat(Configs.bidAdjustment[bidderCode]);
                        var bidAdjustment = !isNaN(ajm) && ajm > 0 && ajm <= 1 ? ajm : 1;
                        bidderSettings[bidderCode] = {
                            bidCpmAdjustment: function bidCpmAdjustment(bidCpm, bid) {
                                return bidCpm * bidAdjustment;
                            }
                        };
                    };

                    for (var bidderCode in Configs.bidAdjustment) {
                        _loop(bidderCode);
                    }
                }

                apdpbjs.que.push(function () {
                    for (var key in Configs.aliasBidders) {
                        if (Object.hasOwnProperty.call(Configs.aliasBidders, key)) {
                            if (Configs.aliasBidders[key] === "amazon") {
                                Configs.listAmazonBidder.push(key);
                            } else {
                                apdpbjs.aliasBidder(Configs.aliasBidders[key], key);
                            }
                        }
                    }

                    apdpbjs.setConfig(apdpbjsConfig);

                    if (Configs.uId && !isObjEmpty(Configs.schainConfig)) {
                        for (var domainSeller in Configs.schainConfig) {
                            if (Object.hasOwnProperty.call(Configs.schainConfig, domainSeller)) {
                                apdpbjs.setBidderConfig({
                                    "bidders": Configs.schainConfig[domainSeller],
                                    "config": {
                                        "schain": {
                                            "validation": "strict",
                                            "config": {
                                                "ver": "1.0",
                                                "complete": 1,
                                                "nodes": [{
                                                    "asi": domainSeller.toString(),
                                                    "sid": Configs.uId.toString(),
                                                    "hp": 1
                                                }]
                                            }
                                        }
                                    }
                                });
                            }
                        }
                    }

                    apdpbjs.bidderSettings = bidderSettings;
                });
            }
            function initApsTag() {
                if (Configs.UAMPubId && Configs.UAMPubId != "") {
                    var UAMConfig = {
                        pubID: Configs.UAMPubId,
                        adServer: 'googletag',
                        videoAdServer: 'DFP',
                        bidTimeout: Configs.prebidTimeout
                    };

                    if (Configs.uId && Configs.adminAmazon) {
                        UAMConfig.schain = {
                            complete: 1,
                            ver: '1.0',
                            nodes: [{
                                asi: "interdogmedia.com",
                                sid: Configs.uId.toString(),
                                hp: 1
                            }]
                        };
                    }

                    apstag.init(UAMConfig);
                }
            }
            function loadLibrary(type) {
                // type vpaid || js
                vilog("[Init Functions] loadLibrary for ".concat(type));
                typeInit = type;
                viewportDetectInit();
                helpers();
                clientTracking();
                loadScript('//' + Configs.pbjsDomain + Configs.prebidJs, 'prebid', loaded, function () {});
                Configs.totalLoad += 1;
                loadScript("//www.googletagservices.com/tag/js/gpt.js", 'googletag', loaded, function () {});

                if (type == "js") {
                    loadScript('//' + Configs.staticDomain + '/assets/plugins/hls.js/hls.min.js?v=1.01', "hls", loaded, function () {});
                    Configs.totalLoad += 1;

                    if (Configs.safeFrame === 'on' && !(window['$sf'] !== undefined && window['$sf'] != null && window['$sf']['host'] != null)) {
                        Configs.totalLoad += 1;
                        loadScript('//' + Configs.staticDomain + '/assets/plugins/safeframe/src/js/sf_host.min.js?v=1.03', false, loaded, function () {});
                    }
                }

                if (Configs.adsTags && (Configs.adsTags.instreamSlot || Configs.adsTags.outstreamSlot || Configs.adsTags.topArticle || Configs.adsTags.pinZoneSlot)) {
                    Configs.totalLoad += 1;
                    loadScript("//imasdk.googleapis.com/js/sdkloader/ima3.js", false, function () {
                        loaded();
                        setImaLanguage();
                    }, function () {});
                }

                if (Configs.UAMPubId && Configs.UAMPubId != "") {
                    Configs.totalLoad += 1;
                    loadScript("//c.amazon-adsystem.com/aax2/apstag.js", 'apstag', loaded, function () {});
                }

                vilog("_______ " + Configs.totalLoad);
                return true;
            }

            function setImaLanguage() {
                if (window[Configs.tagName].imaLanguage) google.ima.settings.setLocale(window[Configs.tagName].imaLanguage);
            }

            function loaded() {
                Configs.inLoading++;

                if (Configs.inLoading == Configs.totalLoad) {
                    totalLoaded();
                }
            }

            function totalLoaded() {
                createPixelEl();
                initGoogleTag();
                initApsTag();

                if (typeInit == "js") {
                    addGlobalEvents();
                    initSafeFrameRender(function () {});
                }

                prebidConfig();
                pixelInit();

                _eventFire("INIT_SCRIPT");

                initAdTag();
            }

            function initAdTag() {
                var adInit = window[Configs.tagName].Init;

                adInit.push = function (a) {
                    Array.prototype.push.apply(this, arguments);
                    executeAdCmd(adInit);
                };

                executeAdCmd(adInit);
            }

            function executeAdCmd(adInit) {
                for (var k = 0; k < adInit.length; k++) {
                    adInit[k]();
                }

                ;
                adInit.length = 0;
            }

            function initGoogleTag() {
                googletag.cmd = googletag.cmd || [];
                googletag.cmd.push(function () {
                    if (typeInit == "js") {
                        if (Configs.adloadType == "lazy_load") {
                            googletag.pubads().addEventListener('slotOnload', function (event) {
                                var slot = event.slot;
                                vilog('Creative iframe for slot ' + slot.getSlotElementId() + ' has LOADED.', "[Event GoogleTag]");
                            });
                            googletag.pubads().addEventListener('slotRequested', function (event) {
                                var slot = event.slot;
                                vilog('Slot ' + slot.getSlotElementId() + ' has been REQUEST.', "[Event GoogleTag]");
                            });
                            googletag.pubads().enableLazyLoad({
                                fetchMarginPercent: Configs.LAZYLOAD_CONFIG.fetchMarginPercent,
                                renderMarginPercent: Configs.LAZYLOAD_CONFIG.renderMarginPercent,
                                mobileScaling: Configs.LAZYLOAD_CONFIG.mobileScaling
                            });
                        }
                    } else {
                        googletag.pubads().disableInitialLoad();
                        googletag.pubads().set("page_url", window.location.origin);
                        googletag.pubads().setTargeting("req_url", window.location.origin);
                        googletag.pubads().setTargeting("req_type", "vpaid");
                    }

                    googletag.pubads().setTargeting("hb_domain", Configs.domainName);

                    if (setTargetingPPUrl()) {
                        googletag.pubads().setTargeting("pp_url", "playa-bowls-belmar-beach-cam");
                    } // Check Pub Custom Targeting (Work with Banner)


                    if (Configs.tagName && window[Configs.tagName] && window[Configs.tagName].customTargetGAM) {
                        for (var key in window[Configs.tagName].customTargetGAM) {
                            if (Object.hasOwnProperty.call(window[Configs.tagName].customTargetGAM, key)) {
                                var value = window[Configs.tagName].customTargetGAM[key];
                                console.log("[Custom Key] ".concat(key, " : ").concat(value));
                                googletag.pubads().setTargeting(key, value.toString());
                            }
                        }
                    }

                    googletag.pubads().enableSingleRequest();
                    googletag.enableServices();
                });
            }

            function addGlobalEvents() {
                // Listen event of Window => intervention, HeavyAdIntervention
                if (window.addEventListener) {
                    window.addEventListener("message", function (event) {
                        event.isObserver = true;
                        handlerReport(event);
                    }, false);
                } else {
                    window.attachEvent("onmessage", function (event) {
                        event.isObserver = true;
                        handlerReport(event);
                    });
                }

                _addEventListener("INCREASE_BOTTOM_VIDEO_FLOATING", function (data) {
                    try {
                        increaseBottomVideoFloating(data);
                    } catch (error) {
                        vilog(error);
                    }
                });

                _addEventListener("REDUCTION_BOTTOM_VIDEO_FLOATING", function () {
                    try {
                        reductionBottomVideoFloating();
                    } catch (error) {
                        vilog(error);
                    }
                });
            }

            function clientTracking() {
                try {
                    var DOC_HIDDEN, VISIBILITY_CHANGE_EVENT;

                    if (document.hidden !== undefined) {
                        DOC_HIDDEN = 'hidden';
                        VISIBILITY_CHANGE_EVENT = 'visibilitychange';
                    } else if (document.mozHidden !== undefined) {
                        DOC_HIDDEN = 'mozHidden';
                        VISIBILITY_CHANGE_EVENT = 'mozvisibilitychange';
                    } else if (document.msHidden !== undefined) {
                        DOC_HIDDEN = 'msHidden';
                        VISIBILITY_CHANGE_EVENT = 'msvisibilitychange';
                    } else if (document.webkitHidden !== undefined) {
                        DOC_HIDDEN = 'webkitHidden';
                        VISIBILITY_CHANGE_EVENT = 'webkitvisibilitychange';
                    }

                    Configs.clientTracking.focusPage = document.hasFocus();
                    Configs.clientTracking.isVisible = document[DOC_HIDDEN] ? false : true;

                    if (typeof document.addEventListener !== "undefined" && DOC_HIDDEN !== undefined) {
                        document.addEventListener(VISIBILITY_CHANGE_EVENT, function () {
                            if (document[DOC_HIDDEN]) {
                                Configs.clientTracking.isVisible = false;

                                _eventFire("IS_NOT_VISIBLE");
                            } else {
                                Configs.clientTracking.isVisible = true;

                                _eventFire("IS_VISIBLE");
                            }
                        }, false);
                    }

                    window.addEventListener('blur', function () {
                        if (document.hasFocus() || !Configs.clientTracking.focusPage) {
                            return;
                        }

                        Configs.clientTracking.focusPage = false;

                        _eventFire("WINDOW_IS_BLUR");
                    });
                    window.addEventListener('focus', function () {
                        if (Configs.clientTracking.focusPage) {
                            return;
                        }

                        Configs.clientTracking.focusPage = true;

                        _eventFire("WINDOW_IS_FOCUS");
                    });
                } catch (e) {
                    vilog(e);
                }
            }

            function helpers() {
                Number.isInteger = Number.isInteger || function (value) {
                    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
                };

                if (!Array.prototype.indexOf) Array.prototype.indexOf = function (Object, max, min) {
                    "use strict";

                    return function indexOf(member, fromIndex) {
                        if (this === null || this === undefined) throw TypeError("Array.prototype.indexOf called on null or undefined");
                        var that = Object(this),
                            Len = that.length >>> 0,
                            i = min(fromIndex | 0, Len);
                        if (i < 0) i = max(0, Len + i);else if (i >= Len) return -1;

                        if (member === void 0) {
                            for (; i !== Len; ++i) {
                                if (that[i] === void 0 && i in that) return i;
                            } // undefined

                        } else if (member !== member) {
                            for (; i !== Len; ++i) {
                                if (that[i] !== that[i]) return i;
                            } // NaN

                        } else for (; i !== Len; ++i) {
                            if (that[i] === member) return i;
                        } // all else


                        return -1; // if the value was not found, then return -1
                    };
                }(Object, Math.max, Math.min);

                if (!String.powerformat) {
                    String.powerformat = function (format) {
                        var args = Array.prototype.slice.call(arguments, 1);
                        return format.replace(/{(\d+)}/g, function (match, number) {
                            return typeof args[number] != 'undefined' ? args[number] : match;
                        });
                    };
                }
            }

            ;
// CONCATENATED MODULE: ./src/main.js


















            window[Configs.tagName] = window[Configs.tagName] || {};
            window[Configs.tagName].Init = window[Configs.tagName].Init || [];
            window[Configs.tagName].videoInit = window[Configs.tagName].videoInit || [];
            window[Configs.tagName].displayInit = window[Configs.tagName].displayInit || [];
            window[Configs.tagName].videoConfig = window[Configs.tagName].videoConfig || {};
            window[Configs.tagName].gdprShowConsentTool = window[Configs.tagName].gdprShowConsentTool === false ? false : true;
            window[Configs.tagName].gdprShowConsentToolButton = window[Configs.tagName].gdprShowConsentToolButton === true ? true : false;
            window[Configs.tagName].imaLanguage = window[Configs.tagName].imaLanguage || null;
            window[Configs.tagName].enableGeoLocation = window[Configs.tagName].enableGeoLocation === true ? true : false;
            var tagApi = Configs.tagApi; //public bien "tagApi" de su dung o plugin videoplayer

            window.tagApi = tagApi;

            _addEventListener("INIT_SCRIPT", function () {
                // if (CONFIGS.adsTags.interstitial) {
                //     new Interstitial();
                // }
                if (undefined && undefined == "dev") {// new AnchorAd();
                }
            });

            var main_jsTag = function jsTag() {
                var userValidate = new validate_user();

                var _init = function init() {
                        console.log("Version: ".concat("1.0.6", " - Time: ").concat("7/4/2022, 3:27:42 PM"), "API");

                        if (userValidate.validate() !== validate_user.isOk()) {
                            vilog("User did not pass the test.");
                            return;
                        }

                        if (getUrlParam("__powerddf") == '' && window.location.hostname.search(Configs.domainName) === -1 && [4, 6, 11425].indexOf(Configs.domainID) === -1) {
                            vilog("Domain name not matched!");
                            return;
                        }

                        userLocation();
                        userTracking();

                        if (getUrlParam("__powerdemo") !== '') {
                            Configs.demandTest = true;
                        }

                        if (Configs.caPub) {
                            var scri = document.createElement("script");
                            scri.setAttribute("data-ad-client", Configs.caPub);
                            scri.setAttribute("async", "true");
                            scri.src = "https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js";
                            document.head.appendChild(scri);
                        }

                        initCMP();
                        loadLibrary("js");
                    },
                    initCMP = function initCMP() {
                        if (isInIframe()) return;
                        if (!window[Configs.tagName].gdprShowConsentTool || !window.navigator.cookieEnabled) return;

                        if (Configs.enableCCPA) {
                            if (window.__uspapi && typeof window.__uspapi === "function") return;
                            vilog("CCPA Consent required for CA-" + Configs.VIGeo);
                            loadCMP();
                        }

                        if (Configs.enableGDPR) {
                            if (window.__tcfapi && typeof window.__tcfapi === "function") return;
                            vilog("GDPR Consent required for geo: " + Configs.VIGeo);
                            loadCMP();
                        }
                    },
                    loadCMP = function loadCMP() {
                        vilog("Loading CMP");
                        /* Load Stub CMP */

                        (function () {
                            function makeStub() {
                                var TCF_LOCATOR_NAME = '__tcfapiLocator';
                                var queue = [];
                                var win = window;
                                var cmpFrame;

                                function addFrame() {
                                    var doc = win.document;
                                    var otherCMP = !!win.frames[TCF_LOCATOR_NAME];

                                    if (!otherCMP) {
                                        if (doc.body) {
                                            var iframe = doc.createElement('iframe');
                                            iframe.style.cssText = 'display:none';
                                            iframe.name = TCF_LOCATOR_NAME;
                                            doc.body.appendChild(iframe);
                                        } else {
                                            setTimeout(addFrame, 5);
                                        }
                                    }

                                    return !otherCMP;
                                }

                                function tcfAPIHandler() {
                                    var gdprApplies;
                                    var args = arguments;

                                    if (!args.length) {
                                        return queue;
                                    } else if (args[0] === 'setGdprApplies') {
                                        if (args.length > 3 && args[2] === 2 && typeof args[3] === 'boolean') {
                                            gdprApplies = args[3];

                                            if (typeof args[2] === 'function') {
                                                args[2]('set', true);
                                            }
                                        }
                                    } else if (args[0] === 'ping') {
                                        var retr = {
                                            gdprApplies: gdprApplies,
                                            cmpLoaded: false,
                                            cmpStatus: 'stub'
                                        };

                                        if (typeof args[2] === 'function') {
                                            args[2](retr);
                                        }
                                    } else {
                                        queue.push(args);
                                    }
                                }

                                function postMessageEventHandler(event) {
                                    var msgIsString = typeof event.data === 'string';
                                    var json = {};

                                    try {
                                        if (msgIsString) {
                                            json = JSON.parse(event.data);
                                        } else {
                                            json = event.data;
                                        }
                                    } catch (ignore) {}

                                    var payload = json.__tcfapiCall;

                                    if (payload) {
                                        window.__tcfapi(payload.command, payload.version, function (retValue, success) {
                                            var returnMsg = {
                                                __tcfapiReturn: {
                                                    returnValue: retValue,
                                                    success: success,
                                                    callId: payload.callId
                                                }
                                            };

                                            if (msgIsString) {
                                                returnMsg = JSON.stringify(returnMsg);
                                            }

                                            event.source.postMessage(returnMsg, '*');
                                        }, payload.parameter);
                                    }
                                }

                                while (win) {
                                    try {
                                        if (win.frames[TCF_LOCATOR_NAME]) {
                                            cmpFrame = win;
                                            break;
                                        }
                                    } catch (ignore) {}

                                    if (win === window.top) {
                                        break;
                                    }

                                    win = win.parent;
                                }

                                if (!cmpFrame) {
                                    addFrame();
                                    win.__tcfapi = tcfAPIHandler;
                                    win.addEventListener('message', postMessageEventHandler, false);
                                }
                            }

                            ;
                            makeStub();
                            var uspTries = 0;
                            var uspTriesLimit = 3;

                            var uspStubFunction = function uspStubFunction() {
                                var arg = arguments;

                                if (typeof_default()(window.__uspapi) !== uspStubFunction) {
                                    setTimeout(function () {
                                        if (typeof window.__uspapi !== 'undefined') {
                                            window.__uspapi.apply(window.__uspapi, arg);
                                        }
                                    }, 500);
                                }
                            };

                            var checkIfUspIsReady = function checkIfUspIsReady() {
                                uspTries++;

                                if (window.__uspapi === uspStubFunction && uspTries < uspTriesLimit) {
                                    vilog('USP is not accessible');
                                } else {
                                    clearInterval(uspInterval);
                                }
                            };

                            if (typeof window.__uspapi === 'undefined') {
                                window.__uspapi = uspStubFunction;
                                var uspInterval = setInterval(checkIfUspIsReady, 6000);
                            }
                        })();

                        if (typeof window.__uspapi === 'function') {
                            var showDoNotSellBtn = function showDoNotSellBtn() {
                                if (window[Configs.tagName].gdprShowConsentToolButton !== true) return;
                                var div = document.createElement("div");
                                div.style.cssText = "z-index: 2147483646;cursor:pointer;font-family: Arial, Helvetica, sans-serif; position: fixed; bottom: 10px; left: 10px; font-size: 14px; background-color: rgb(54, 139, 214); padding: 4px 6px; border-radius: 5px;box-sizing: content-box;";
                                div.innerHTML = '<span style="white-space: nowrap; color: #fff;text-decoration: none;">Do Not Sell My Data</span>';

                                div.onclick = function () {
                                    window.__uspapi('displayUspUi');
                                };

                                document.body.appendChild(div);
                            };

                            window.__uspapi('uspPing', 1, function (obj, status) {
                                if (status && obj.mode.includes('USP') && obj.jurisdiction.includes(obj.location.toUpperCase())) {
                                    window.__uspapi("getUSPData", 1, function (uspData, success) {
                                        if (success) {
                                            showDoNotSellBtn();
                                        } else {
                                            var div = document.createElement("div");
                                            div.style.cssText = "z-index:2147483646;font-family: Arial, Helvetica, sans-serif;position: fixed; bottom: 0px; left: 0px; background-color: #414042; color: #fff; width: calc(100% - 40px); padding: 20px 20px 20px 20px; text-align: center; font-size: 14px;-webkit-transition: bottom .5s ease-in-out;-moz-transition: bottom .5s ease-in-out;-ms-transition: bottom .5s ease-in-out;-o-transition: bottom .5s ease-in-out;transition: bottom .5s ease-in-out;box-sizing: content-box;";
                                            var div1 = document.createElement("div");
                                            div1.innerHTML = 'We use cookies and other data collection technologies to provide the best experience for our customers. You may request that your data not be shared with third parties here: ' + "<a style=\"white-space: nowrap; color: #fff; font-weight: 600;text-decoration: none;\" href=\"#\" onclick=\"window.__uspapi('displayUspUi');\">Do Not Sell My Data</a>.";
                                            var div2 = document.createElement("div");
                                            div2.style.cssText = "line-height:1;width: 12px; height: 12px; position: absolute; right: 8px; top: 8px; border-radius: 1px; padding: 4px; cursor: pointer; box-shadow: rgba(0, 0, 0, 0.75) 0px 0px 1px 0px; background-color: rgb(104, 182, 49); border-color: rgb(104, 182, 49);box-sizing: content-box;";
                                            div2.innerHTML = '<svg style="vertical-align:unset!important" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 329.26933 329"><g><script class="active-path"/><path d="m194.800781 164.769531 128.210938-128.214843c8.34375-8.339844 8.34375-21.824219.0-30.164063-8.339844-8.339844-21.824219-8.339844-30.164063.0l-128.214844 128.214844-128.210937-128.214844c-8.34375-8.339844-21.824219-8.339844-30.164063.0-8.34375 8.339844-8.34375 21.824219.0 30.164063l128.210938 128.214843-128.210938 128.214844c-8.34375 8.339844-8.34375 21.824219.0 30.164063 4.15625 4.160156 9.621094 6.25 15.082032 6.25 5.460937.0 10.921875-2.089844 15.082031-6.25l128.210937-128.214844 128.214844 128.214844c4.160156 4.160156 9.621094 6.25 15.082032 6.25 5.460937.0 10.921874-2.089844 15.082031-6.25 8.34375-8.339844 8.34375-21.824219.0-30.164063zm0 0" data-original="#000000" class="active-path" fill="#fff"/></g></svg>';

                                            div2.onclick = function () {
                                                div.style.bottom = "-" + div.clientHeight + "px";
                                                setTimeout(function () {
                                                    div.parentNode.removeChild(div);
                                                    showDoNotSellBtn();
                                                }, 500);
                                            };

                                            div.appendChild(div1);
                                            div.appendChild(div2);
                                            document.body.appendChild(div);

                                            window.__uspapi('setUspDftData', 1, function (obj, status) {
                                                if (!status) {
                                                    vilog("Error: USP string not updated!");
                                                }
                                            });
                                        }
                                    });
                                }
                            });
                        }
                        /* Init CMP */


                        window._isUserInEU = Configs.isUserInEU;
                        window._isUserInUS = Configs.isUserInUSCA;

                        (function () {
                            (function () {
                                var cmpScriptElement = document.createElement('script');
                                var firstScript = document.getElementsByTagName('script')[0];
                                cmpScriptElement.async = true;
                                cmpScriptElement.type = 'text/javascript';
                                var cmpVersion = 'https://' + Configs.staticDomain + '/assets/plugins/cmptcf2/cmp-v2.0.1.js?v=1.01';
                                cmpScriptElement.src = cmpVersion;
                                firstScript.parentNode.insertBefore(cmpScriptElement, firstScript);
                            })();

                            (function () {
                                var css = "" + ".qc-cmp-button.qc-cmp-secondary-button:hover {" + "   background-color: #368bd6 !important; " + "   border-color: transparent !important; " + "}" + ".qc-cmp-button.qc-cmp-secondary-button:hover { " + "   color: #ffffff !important; " + "}" + " .qc-cmp-button.qc-cmp-secondary-button { " + "   color: #368bd6 !important; " + "}" + ".qc-cmp-button.qc-cmp-secondary-button { " + "   background-color: #eee !important; " + "   border-color: transparent !important; " + "}" + ".qc-cmp2-persistent-link{bottom: 10px!important; left: 10px!important; border-radius: 3px!important; padding: 5px 8px!important;}";

                                if (screen.width >= 768 && screen.height <= 400) {
                                    css = css + "#qc-cmp2-ui{height: 95%;grid-template-rows:none;}.qc-cmp2-consent-info p{max-height:20vh!important;}";
                                }

                                var stylesElement = document.createElement('style');
                                var re = new RegExp('&quote;', 'g');
                                css = css.replace(re, '"');

                                if (stylesElement.styleSheet) {
                                    stylesElement.styleSheet.cssText = css;
                                } else {
                                    stylesElement.appendChild(document.createTextNode(css));
                                }

                                var head = document.head || document.getElementsByTagName('head')[0];
                                head.appendChild(stylesElement);
                            })();

                            var autoDetectedLanguage = 'en';

                            function splitLang(lang) {
                                return lang.length > 2 ? lang.split('-')[0] : lang;
                            }

                            ;

                            function isSupported(lang) {
                                var langs = ['en', 'fr', 'de', 'it', 'es', 'da', 'nl', 'el', 'hu', 'pt', 'ro', 'fi', 'pl', 'sk', 'sv', 'no', 'ru', 'bg', 'ca', 'cs', 'et', 'hr', 'lt', 'lv', 'mt', 'sl', 'tr', 'zh'];
                                return langs.indexOf(lang) === -1 ? false : true;
                            }

                            ;

                            if (isSupported(splitLang(document.documentElement.lang))) {
                                // Language of CMP box
                                autoDetectedLanguage = splitLang(document.documentElement.lang);
                            } else if (isSupported(splitLang(navigator.language))) {
                                autoDetectedLanguage = splitLang(navigator.language);
                            }

                            ;

                            window.__tcfapi('init', 2, function () {}, {
                                'premiumProperties': {},
                                'coreUiLabels': {
                                    'initScreenTitle': Configs.CMP && Configs.CMP.brandCustom && Configs.CMP.brandCustom.title ? Configs.CMP.brandCustom.title : "We value your privacy"
                                },
                                'premiumUiLabels': {
                                    'uspDnsTitle': 'Do Not Sell My Data',
                                    'uspDnsText': ["<p>We, and our partners, use technologies to process personal information, including IP addresses,pseudonymous identifiers associated with cookies, and in some cases mobile ad IDs.This information is processed to personalize content based on your interests, run and optimize marketing campaigns, measure the performance of ads and content, and derive insights about the audiences who engage with ads and content. This data is an integral part of how we operate our site, make revenue to support our staff, and generate relevant content for our audience. You can learn more about our data collection and use practices in our Privacy Policy.</p>"],
                                    'uspPrivacyPolicyLinkText': 'Privacy Policy',
                                    'uspDeleteDataLinkText': 'Data Deletion',
                                    'uspAccessDataLinkText': 'Data Access'
                                },
                                'theme': {},
                                'coreConfig': {
                                    'initScreenBodyTextOption': 1,
                                    'consentScope': 'service',
                                    'lang_': autoDetectedLanguage,
                                    'defaultToggleValue': 'off',
                                    'displayUi': 'inEU',
                                    'displayPersistentConsentLink': window[Configs.tagName].gdprShowConsentToolButton === true ? true : false,
                                    'initScreenRejectButtonShowing': false,
                                    "publisherLogo": Configs.CMP && Configs.CMP.brandCustom && Configs.CMP.brandCustom.logo ? Configs.CMP.brandCustom.logo : "",
                                    'publisherPurposeIds': [],
                                    'publisherPurposeLegitimateInterestIds': [],
                                    'publisherSpecialPurposesIds': [1, 2],
                                    'publisherFeaturesIds': [1, 2, 3],
                                    'publisherSpecialFeaturesIds': [],
                                    'stacks': [],
                                    'softOptInEnabled': false,
                                    'uiLayout': 'popup',
                                    'vendorListUpdateFreq': 30,
                                    'thirdPartyStorageType': 'iframe',
                                    'showSummaryView': true,
                                    'persistentConsentLinkLocation': 4,
                                    // 'cmpAccountId': 'rfM1MHMq1JnPf',
                                    'privacyMode': ["GDPR", "USP"],
                                    // 'hashCode': 'TiT/Ov7crl24gXx9waQTjw',
                                    'publisherCountryCode': 'GB',
                                    'publisherName': '',
                                    'vendorPurposeIds': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                                    'vendorFeaturesIds': [1, 2, 3],
                                    'vendorPurposeLegitimateInterestIds': [2, 3, 4, 5, 6, 7, 8, 9, 10],
                                    'vendorSpecialFeaturesIds': [1, 2],
                                    'vendorSpecialPurposesIds': [1, 2],
                                    'googleEnabled': false,
                                    'uspVersion': 1,
                                    'uspJurisdiction': ["US"],
                                    'uspLspact': 'N',
                                    'uspPrivacyPolicyLink': '/ccpa/privacy.html',
                                    'uspDeleteDataLink': '/ccpa/delete-data.html',
                                    'uspAccessDataLink': '/ccpa/access-data.html',
                                    'suppressCcpaLinks': true
                                }
                            });
                        })();

                        window.__POWERCMP = true;
                    };

                var createElementChildAd = function createElementChildAd(adSlot) {
                    var element = document.createElement("div");
                    element.className = Configs.adClass;
                    element.setAttribute("data-ad-slot", adSlot);
                    return element;
                };

                var handlerAdSlot = function handlerAdSlot(objSlot) {
                    if (objSlot.isEmpty === true) {
                        return;
                    }

                    var typeAd = objSlot.type ? objSlot.type : null;
                    var sizeAd = objSlot.size ? objSlot.size : null;
                    var adDivParent = document.getElementsByClassName("powerAdElement");
                    Array.from(adDivParent).forEach(function (item, index) {
                        if (item.getAttribute("data-ad-used") != null || !item.getAttribute("data-ad-type")) {
                            return;
                        }

                        if (typeAd != item.getAttribute("data-ad-type")) {
                            return;
                        }

                        vilog(item.getAttribute("data-ad-type"));

                        switch (item.getAttribute("data-ad-type")) {
                            case "banner":
                                if (!isObjEmpty(Configs.adsTags.displaySlot)) {
                                    for (var _i = 0, _Object$entries = Object.entries(Configs.adsTags.displaySlot); _i < _Object$entries.length; _i++) {
                                        var _Object$entries$_i = slicedToArray_default()(_Object$entries[_i], 2),
                                            adSlot = _Object$entries$_i[0],
                                            adSlotObject = _Object$entries$_i[1];

                                        if (adSlotObject) {
                                            var _sizeAdSlot = adSlotObject.w + 'x' + adSlotObject.h;

                                            if (sizeAd == _sizeAdSlot) {
                                                var element = createElementChildAd(adSlot);
                                                item.appendChild(element);
                                                item.setAttribute("data-ad-used", "true");
                                                displayBanner(adSlot);
                                                sizeAd = null;
                                            }
                                        }
                                    }
                                }

                                break;
                        }
                    });
                };

                return {
                    toggleDebug: function toggleDebug() {
                        showDebugAd();
                    },
                    showAd: function showAd(objSlot) {
                        handlerAdSlot(objSlot);
                    },
                    mobileDetect: function mobileDetect() {
                        return utlis_mobileDetect();
                    },
                    getConst: function getConst(value) {
                        console.log(JSON.parse(JSON.stringify(Configs[value])));
                    },
                    enableBidTest: function enableBidTest() {
                        if (typeof Storage === 'undefined') {
                            vilog("Failed to enable bid test. Try append bidtest=true to URL");
                            return;
                        }

                        sessionStorage.setItem("bidtest", "true");
                        window.location.reload();
                    },
                    init: function init() {
                        _init();
                    },
                    display: function display(adSlot) {
                        displayBanner(adSlot);
                    },
                    assignConfig: function assignConfig(configs) {
                        if (!configs) return;

                        for (var key in configs) {
                            if (Object.hasOwnProperty.call(configs, key) && Object.hasOwnProperty.call(Configs, key)) {
                                Configs[key] = configs[key];
                            }
                        }

                        Configs.configAssigned = true;

                        _eventFire("ASSIGN_CONFIG");

                        if (Configs.adsTags.interstitial) {
                            new Interstitial_Interstitial();
                        }
                    },
                    // New
                    initRelatedZone: function initRelatedZone(adSlot) {
                        new RelatedZone_RelatedZone(adSlot);
                    },
                    initStickyBanner: function initStickyBanner(adSlot) {
                        new StickyBanner_StickyBanner(adSlot);
                    },
                    initPowerInstream: function initPowerInstream(adSlot) {
                        new Instream_Instream(adSlot);
                    },
                    initPowerTopArticles: function initPowerTopArticles(adSlot) {
                        new TopArticles_TopArticles(adSlot);
                    },
                    initPowerPinZone: function initPowerPinZone(adSlot) {
                        new PinZone_PinZone(adSlot);
                    },
                    initPowerOutstream: function initPowerOutstream(adSlot) {
                        new OutStream_OutStream(adSlot);
                    },
                    initPowerVideoContainer: function initPowerVideoContainer(config) {
                        var videoContainer = document.querySelector("#videocontainer");
                        var videoConfig = {
                            placementAdSlot: videoContainer,
                            config: config,
                            isTempDemo: true
                        };
                        new VideoContainerTemplate_VideoContainerTemplate(videoConfig);
                    },
                    initPinzoneTemplate: function initPinzoneTemplate(config) {
                        var videoContainer = document.querySelector("#videocontainer");
                        var videoConfig = {
                            placementAdSlot: videoContainer,
                            opts: config
                        };
                        new PinZoneTemplate_PinZoneTemplate(videoConfig);
                    }
                };
            };

            if (typeof window[tagApi] === "undefined") {
                window[tagApi] = main_jsTag();
                window[tagApi].init();
            }

            /***/ })
        /******/ ]);