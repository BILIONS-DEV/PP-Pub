// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "source/internal/entity/dto"

	mock "github.com/stretchr/testify/mock"

	model "source/internal/entity/model"
)

// RepoUser is an autogenerated mock type for the RepoUser type
type RepoUser struct {
	mock.Mock
}

// FindByFilter provides a mock function with given fields: inputs
func (_m *RepoUser) FindByFilter(inputs *dto.UserFilterPayload) (int64, []model.User, error) {
	ret := _m.Called(inputs)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*dto.UserFilterPayload) int64); ok {
		r0 = rf(inputs)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 []model.User
	if rf, ok := ret.Get(1).(func(*dto.UserFilterPayload) []model.User); ok {
		r1 = rf(inputs)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]model.User)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*dto.UserFilterPayload) error); ok {
		r2 = rf(inputs)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindByID provides a mock function with given fields: ID, fields
func (_m *RepoUser) FindByID(ID int64, fields ...string) model.User {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(int64, ...string) model.User); ok {
		r0 = rf(ID, fields...)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	return r0
}

// FindByLogin provides a mock function with given fields: email, passwordHash, fields
func (_m *RepoUser) FindByLogin(email string, passwordHash string, fields ...string) (model.User, error) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, email, passwordHash)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(string, string, ...string) model.User); ok {
		r0 = rf(email, passwordHash, fields...)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, ...string) error); ok {
		r1 = rf(email, passwordHash, fields...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByLoginToken provides a mock function with given fields: loginToken, fields
func (_m *RepoUser) FindByLoginToken(loginToken string, fields ...string) (model.User, error) {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, loginToken)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(string, ...string) model.User); ok {
		r0 = rf(loginToken, fields...)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = rf(loginToken, fields...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepoUser interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepoUser creates a new instance of RepoUser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepoUser(t mockConstructorTestingTNewRepoUser) *RepoUser {
	mock := &RepoUser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
