// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	ad_schedule "source/internal/repo/ad-schedule"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	model "source/internal/entity/model"
)

// RepoAdSchedule is an autogenerated mock type for the RepoAdSchedule type
type RepoAdSchedule struct {
	mock.Mock
}

// DB provides a mock function with given fields:
func (_m *RepoAdSchedule) DB() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// DeleteByID provides a mock function with given fields: ID
func (_m *RepoAdSchedule) DeleteByID(ID int64) error {
	ret := _m.Called(ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EmptyConfigs provides a mock function with given fields: configs
func (_m *RepoAdSchedule) EmptyConfigs(configs []model.AdScheduleConfigModel) error {
	ret := _m.Called(configs)

	var r0 error
	if rf, ok := ret.Get(0).(func([]model.AdScheduleConfigModel) error); ok {
		r0 = rf(configs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Filter provides a mock function with given fields: input
func (_m *RepoAdSchedule) Filter(input *ad_schedule.InputFilter) (int64, []*model.AdScheduleModel, error) {
	ret := _m.Called(input)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*ad_schedule.InputFilter) int64); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 []*model.AdScheduleModel
	if rf, ok := ret.Get(1).(func(*ad_schedule.InputFilter) []*model.AdScheduleModel); ok {
		r1 = rf(input)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*model.AdScheduleModel)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*ad_schedule.InputFilter) error); ok {
		r2 = rf(input)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindByID provides a mock function with given fields: ID
func (_m *RepoAdSchedule) FindByID(ID int64) (*model.AdScheduleModel, error) {
	ret := _m.Called(ID)

	var r0 *model.AdScheduleModel
	if rf, ok := ret.Get(0).(func(int64) *model.AdScheduleModel); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AdScheduleModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsExists provides a mock function with given fields: input, IDs
func (_m *RepoAdSchedule) IsExists(input *ad_schedule.InputIsExists, IDs ...int64) bool {
	_va := make([]interface{}, len(IDs))
	for _i := range IDs {
		_va[_i] = IDs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, input)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*ad_schedule.InputIsExists, ...int64) bool); ok {
		r0 = rf(input, IDs...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Migrate provides a mock function with given fields:
func (_m *RepoAdSchedule) Migrate() {
	_m.Called()
}

// Save provides a mock function with given fields: record
func (_m *RepoAdSchedule) Save(record *model.AdScheduleModel) error {
	ret := _m.Called(record)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.AdScheduleModel) error); ok {
		r0 = rf(record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepoAdSchedule interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepoAdSchedule creates a new instance of RepoAdSchedule. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepoAdSchedule(t mockConstructorTestingTNewRepoAdSchedule) *RepoAdSchedule {
	mock := &RepoAdSchedule{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
