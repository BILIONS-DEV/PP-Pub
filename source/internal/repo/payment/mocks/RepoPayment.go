// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "source/internal/entity/model"

	mock "github.com/stretchr/testify/mock"
)

// RepoPayment is an autogenerated mock type for the RepoPayment type
type RepoPayment struct {
	mock.Mock
}

// FiltersInvoice provides a mock function with given fields: inputs
func (_m *RepoPayment) FiltersInvoice(inputs *model.ParamPaymentIndex) ([]model.PaymentInvoice, error) {
	ret := _m.Called(inputs)

	var r0 []model.PaymentInvoice
	if rf, ok := ret.Get(0).(func(*model.ParamPaymentIndex) []model.PaymentInvoice); ok {
		r0 = rf(inputs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PaymentInvoice)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.ParamPaymentIndex) error); ok {
		r1 = rf(inputs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalAmountByFilter provides a mock function with given fields: inputs, idUser
func (_m *RepoPayment) GetTotalAmountByFilter(inputs *model.ParamPaymentIndex, idUser int64) []model.PaymentInvoice {
	ret := _m.Called(inputs, idUser)

	var r0 []model.PaymentInvoice
	if rf, ok := ret.Get(0).(func(*model.ParamPaymentIndex, int64) []model.PaymentInvoice); ok {
		r0 = rf(inputs, idUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PaymentInvoice)
		}
	}

	return r0
}

// GetTotalInfoInvoicesByPermission provides a mock function with given fields: permission
func (_m *RepoPayment) GetTotalInfoInvoicesByPermission(permission string) []model.PaymentInvoice {
	ret := _m.Called(permission)

	var r0 []model.PaymentInvoice
	if rf, ok := ret.Get(0).(func(string) []model.PaymentInvoice); ok {
		r0 = rf(permission)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PaymentInvoice)
		}
	}

	return r0
}

// GetTotalPagesInvoice provides a mock function with given fields: inputs
func (_m *RepoPayment) GetTotalPagesInvoice(inputs *model.ParamPaymentIndex) int64 {
	ret := _m.Called(inputs)

	var r0 int64
	if rf, ok := ret.Get(0).(func(*model.ParamPaymentIndex) int64); ok {
		r0 = rf(inputs)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

type mockConstructorTestingTNewRepoPayment interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepoPayment creates a new instance of RepoPayment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepoPayment(t mockConstructorTestingTNewRepoPayment) *RepoPayment {
	mock := &RepoPayment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
